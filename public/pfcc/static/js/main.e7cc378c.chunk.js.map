{"version":3,"sources":["comp/Filters.js","helpers/dt.js","helpers/datetime.js","comp/TreatmentItem.js","helpers/logger.js","config.js","providers/ScheduledActivityDataProvider.js","comp/TreatmentList.js","comp/SimScheduleItem.js","providers/EnumDataProvider.js","comp/SimSchedule.js","users/Login.js","providers/QaDataProvider.js","helpers/SimpleDlg.js","helpers/GammaDlg.js","helpers/useForm.js","comp/QAListItem.js","comp/QAListDlg.js","providers/UserDataProvider.js","helpers/CheckBoxSelectorDlg.js","users/UserSettingsDlg.js","comp/Header.js","comp/Footer.js","comp/AriaActivityItem.js","providers/LogDataProvider.js","comp/AriaActivityList.js","comp/PlanNoteList.js","providers/PlanSetupDataProvider.js","helpers/PlanSetupSelector.js","comp/AddQADlg.js","data/QaDataContext.js","helpers/SimpleInputWithSearchListDlg.js","providers/EmailServiceProvider.js","comp/Plan.js","comp/PlanList.js","providers/PlanDataProvider.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","menuButton","marginRight","textField_DateTime","marginLeft","width","textAlign","color","appBar","position","title","spacing","flex","Transition","React","forwardRef","props","ref","Slide","direction","isValidDate","d","Date","isNaN","Filters","classes","filter","handleClose","useState","newstart_from","set_newstart_from","newstart_to","set_newstart_to","keyword","handleCancel","utils","DateFnsUtils","Dialog","fullScreen","open","onClose","TransitionComponent","AppBar","className","Toolbar","IconButton","edge","onClick","aria-label","Typography","variant","Button","autoFocus","List","ListItem","button","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","disableToolbar","format","margin","id","value","onChange","date","console","log","KeyboardButtonProps","Divider","DAYS","zeroPad","num","places","zero","toString","length","Array","join","DT","yyyy","getFullYear","mm","getMonth","dd","getDate","dow","getDay","hours","getHours","minutes","getMinutes","ampm","this","YYYY_MM_DD","HH_MM","MM_DD_YYYY","MM_DD","MM_DD_DAY","HH_MM_AMPM","YYYY_MM_DDTHH_MM","TreatmentItem","dt","txItem","tx_starttime","ScheduledStartTime","ActivityCode","type","name","e","dir","target","selectionChange","checked","logger","obj","ScheduledActivityDataProvider","token","url","config","ResourceSer","StartDateTime_begin","StartDateTime_end","url_query","fetch","method","PatientId","container","display","flexWrap","formControl","minWidth","backgroundColor","TreatmentList","user","simItem","txList","setTxList","fetchList","a","userid","dp","dt_1","setDate","getScheduledActivitiesPerPatientId","res","json","list","list2","item","ActivityCategoryCode","toLowerCase","includes","useEffect","selected","push","forEach","newstart_date","replace","plan","case_name","LastName","sim","status","newstart","plan_name","planners","doctors","tx_site","note","ActivityNote","logs","addplan","alert","map","key","uuidv4","SimScheduleItem","scheduleItem","ScheduledActivityCode","scheduledActivitiesDlgOpen","setScheduledActivitiesDlgOpen","Fragment","size","endIcon","EnumDataProvider","prop_name","addDays","days","result","Message","msg","SimList","i","SimSchedule","simResourceList","setSimResourceList","getEnums_prop","then","data","setResourceSer","aria_resourceser","catch","err","error","resourceSer","setMessage","today","simDateList","day","dateString","simDate","setSimDate","setList","loggedIn","parts","split","YYYY","parseInt","MM","DD","getScheduledActivitiesPerResourceSer","FormControl","Select","native","event","inputProps","Alert","elevation","marginTop","Login","setUserid","pw","setPw","setMsg","openAlert","setAlertOpen","handleAlertClose","reason","handleSubmit","password","xhr","XMLHttpRequest","setRequestHeader","onreadystatechange","readyState","DONE","JSON","parse","responseText","setUser","handleLoginClose","send","stringify","loginOpen","TextField","textField","label","onKeyUp","keyCode","Snackbar","autoHideDuration","severity","QaDataProvider","skip","limit","encodeURIComponent","machines","qa","headers","body","addtional_querystring","_id","mode","qa_url","SimpleDlg","buttons","titleClass","DialogTitle","DialogContent","DialogContentText","DialogActions","GammaDlg","initialVlaues","values","setValues","useForm","PD","DTA","G","handleChange","QaListItem","qaitem","save_qa","delete_qa","due_on","dirty","plan_case_name","machine","requested_by","completed_by","requested_on","notes","completed_on","saveButtonEnabled","setSaveButtonEnabled","trim","completeButtonEnabled","setCompleteButtonEnabled","openConfirmDlg","setOpenConfirmDlg","openGammaDlg","setOpenGammaDlg","placeholder","disabled","email","btnPressed","newResult","QaList","QAListDlg","statusList","setStatus","page","setPage","totalCount","setTotalCount","itemsPerPage","settings","qalist_num_of_cases_per_page","numOfPages","Math","floor","my_machines","getQAs_machines_skip_limit","getPendingQAs_machines_skip_limit","getCompletedQAs_machines_skip_limit","getQAs_skip_limit","getPendingQAs_skip_limit","getCompletedQAs_skip_limit","getQAs","ret_data","qaItemList","htmlFor","s","deleteQA","deletedCount","newList","qi","updateQA","nModified","Pagination","count","UserDataProvider","make_dict","dict","indexOf","CheckBoxSelectorDlg","setDict","component","FormGroup","Object","keys","FormControlLabel","control","Checkbox","checked_items","isPositiveInteger","Number","isInteger","UserSettingsDlg","enumList","initValues","notify_planq_list","planq_num_of_cases_per_page","notify_qa_new","notify_qa_completed_all","notify_aria_rx_change","notify_aria_plan_change","notify_aria_structure_change","notify_for_all_patients","planner","doctor","aria_userid","machine_list","setSettings","setDirty","fetchData","useCallback","getUserByUserId","openMachineSelectorDlg","setOpenMachineSelectorDlg","Switch","StyledMenu","withStyles","paper","border","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","MenuItem","Header","update_planlist","set_filter","isLoggedIn","filterOpen","setFilterOpen","simScheduleOpen","setSimScheduleOpen","qaListDlgOpen","setQaListDlgOpen","handleQaListDlgOpen","setLoginOpen","menuAnchorElement","setMenuAnchorElement","handleMenuClose","handleAddCase","onclick_addplan","handleOpenSimulationSchedule","update_user_settings_to_db","updateUser","openUserSettingsDlg","setOpenUserSettingsDlg","searchKeyword_init","planq_search_keyword","setSearchKeyword","searchKeyword","currentTarget","anchorEl","keepMounted","Boolean","fontSize","onclick_email_planq_list_to_me","padding","Footer","Paper","style","Component","ExpansionPanel","boxShadow","borderBottom","expanded","MuiExpansionPanel","ExpansionPanelSummary","marginBottom","minHeight","content","MuiExpansionPanelSummary","ExpansionPanelDetails","MuiExpansionPanelDetails","AriaActivityItem","setExpanded","msg1","msgList","substring","whos","elms1","who","whos_unique_string","Set","times","time","time_unique_string","new_status_list","new_status","panel","new_status_unique_string","square","newExpanded","aria-controls","str","LogDataProvider","object_id","palette","background","AriaActivityList","getLogsOfObject","LogTextField","logToolbar","borderWidth","listitem","PlanLogList","change_handler","setState","input_text","keyup","addlog","planitem","state","fullWidth","InputLabelProps","shrink","at","removelog","PlanSetupDataProvider","PlanSetupSelector","setSelected","getAllPlanSetupsPerPatientId","RadioGroup","ps","CourseId","PlanSetupId","Radio","AddQADlg","setType","setPlan","openPlanSetupSelectorDlg","setOpenPlanSetupSelectorDlg","msgBox","setMsgBox","showMsg","helperText","planname","QaDataContext","createContext","qaReducer","action","addQA","QaDataContextProvider","useReducer","qaList","qaListDispatch","Provider","children","SimpleInputWithSearchListDlg","initialValue","searchList","setValue","matchedList","setMatchedList","handleItemClick","clicked_value","innerText","EmailServiceProvider","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","initial_list_string_from_name_email_list_string","name_email_list_string","name_email","elms","toUpperCase","initial_from_name","remove_empty_string","string_list","heading","expensionPanelSummary","Plan","useContext","handlePlanChange","setPlanProp","toggleExpanded","ariaActivitiesOpen","setAriaActivitiesOpen","deleteDlgOpen","setSimpleDlgOpen","newstart_diff_month","openAddQADlg","setOpenAddQADlg","openTxSiteDlg","setOpenTxSiteDlg","doctorsClassName","plannersClassName","expandIcon","modality","Grid","justify","alignItems","noValidate","defaultValue","select","SelectProps","plan_status_list","tx_modality_list","m","InputLabel","labelId","multiple","input","Input","renderValue","doctor_list","planner_list","InputProps","tx_site_list","PlanNoteList","ExpansionPanelActions","saveplan_handler","duplicateplan_handler","deleteplan_handler","plan_case_id","p","lines","mail","from","to","subject","text","email_plan","PlanList","pagenation","planitems","pi","date_change_handler","set_planitems_state","PlanDataProvider","t0","t1","keywords","f","plan_url","App","update_planlist_internal","dataFetchFunction","showProgress","getEnums","sort","list1","useMachinesFilter","getAllPlans_newstart_gt_lt_machines_skip_limit","getAllPlans_newstart_gt_lt_keyword_machines_skip_limit","getAllPlans_newstart_gt_lt_keyword_skip_limit","getAllPlans_newstart_gt_lt_skip_limit","addPlan","unshift","pi1","pi2","line","onclick_deleteplan","deletePlan","new_planitems","onclick_saveplan","updatePlan","onclick_duplicateplan","by","l","document","querySelector","innerHTML","dt_plus2year","LinearProgress","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7cc378c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n//import Switch from '@material-ui/core/Switch';\r\nimport WifiIcon from '@material-ui/icons/Wifi';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport './Filter.css'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n      //flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: 2,\r\n    },\r\n    textField_DateTime: {\r\n      marginLeft: 1,\r\n      marginRight: 1,\r\n      width: 180,\r\n      textAlign: \"center\",\r\n      color: \"white\",\r\n      //borderColor: \"white\",\r\n      //backgroundColor: \"red\"\r\n   },\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function isValidDate(d) {\r\n    return d instanceof Date && !isNaN(d);\r\n  }\r\n\r\nexport default function Filters(props)\r\n{\r\n\r\n    const classes = useStyles()\r\n\r\n\r\n    const {filter, handleClose} = props;\r\n    \r\n    ////////////////////////\r\n    // newstart_from state\r\n    const [newstart_from, set_newstart_from] = React.useState(filter.newstart_from);\r\n\r\n    const handle_newstart_from = (date) => {\r\n\r\n      // check if date is valid date\r\n      if(!isValidDate(date))\r\n      {\r\n        console.log('date is not valid!!!');\r\n        return;\r\n      }\r\n\r\n      set_newstart_from(date);\r\n\r\n      // update the list\r\n      //props.onchange_filter('newstart_from', date);\r\n    };\r\n\r\n    ////////////////////////\r\n    // newstart_to state\r\n    const [newstart_to, set_newstart_to] = React.useState(filter.newstart_to);\r\n    const handle_newstart_to = (date) => {\r\n      \r\n      // check if date is valid date\r\n      if(!isValidDate(date))\r\n      {\r\n        console.log('date is not valid!!!');\r\n        return;\r\n      }\r\n      \r\n      set_newstart_to(date);\r\n\r\n      // update the list\r\n      //props.onchange_filter('newstart_to', date);\r\n    };\r\n\r\n    ///////////////////\r\n    // search keyword\r\n    const [keyword, set_keyword] = React.useState(filter.keyword);\r\n    const handle_keyword_change = (e)=>{\r\n        console.log('keyword', e.target.value);\r\n\r\n        set_keyword(e.target.value)\r\n        //props.onchange_filter('keyword', e.target.value);\r\n    }\r\n\r\n    // //////////////////\r\n    // // switch items\r\n    // const [checked, setChecked] = React.useState(['show_tx_approved']);\r\n    // const handleToggle = value => () => {\r\n    //   const currentIndex = checked.indexOf(value);\r\n    //   const newChecked = [...checked];\r\n    //   if (currentIndex === -1) {\r\n    //     newChecked.push(value);\r\n    //   } else {\r\n    //     newChecked.splice(currentIndex, 1);\r\n    //   }\r\n    //     setChecked(newChecked);\r\n    // };\r\n\r\n    const handleApply = ()=>{\r\n      \r\n      const filter = {\r\n        newstart_from: newstart_from,\r\n        newstart_to:  newstart_to,\r\n        keyword: keyword\r\n      }\r\n\r\n      handleClose(filter)\r\n    }\r\n\r\n    const handleCancel = ()=>{\r\n      handleClose(null)\r\n    }\r\n\r\n    return(\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={props.open} onClose={props.handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCancel} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Filters\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleApply}>\r\n                Apply\r\n            </Button>\r\n            <Button autoFocus color=\"inherit\" onClick={handleCancel}>\r\n                Close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n        <List>\r\n            {/* Hide Tx Approved */}\r\n            {/* <ListItem button>\r\n            <ListItemIcon> <WifiIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"Show Tx Approved\"/>\r\n            <ListItemSecondaryAction>\r\n            <Switch\r\n                edge=\"end\"\r\n                onChange={handleToggle('show_tx_approved')}\r\n                checked={checked.indexOf('show_tx_approved') !== -1}\r\n                inputProps={{ 'aria-labelledby': 'switch-list-label-show_tx_approved' }}\r\n                />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/> */}\r\n\r\n            {/* NewStart From Date */}\r\n            <ListItem button>\r\n            <ListItemIcon> <DateRangeIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"New Start From\"/>\r\n            <ListItemSecondaryAction>\r\n            {/* New Start From */}\r\n            <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-newstart_from\"\r\n                //label=\"NewStart From\"\r\n                //value={props.filter.newstart_from}\r\n                value={newstart_from}\r\n                //onChange={on_newstart_from_changed}\r\n                onChange={handle_newstart_from}\r\n                KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n                }}\r\n            />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/>\r\n\r\n            {/* NewStart To Date */}\r\n            <ListItem button>\r\n            <ListItemIcon> <DateRangeIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"New Start To\"/>\r\n            <ListItemSecondaryAction>\r\n            {/* New Start From */}\r\n            <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-newstart_to\"\r\n                //label=\"NewStart From\"\r\n                value={newstart_to}\r\n                onChange={handle_newstart_to}\r\n                KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n                }}\r\n            />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/>\r\n\r\n\r\n            {/* Keyword */}\r\n            {/* <ListItem button>\r\n            <ListItemIcon> <SearchIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"Keyword\"/>\r\n            <ListItemSecondaryAction>\r\n            <input \r\n              className=\"filter-keyword\" \r\n              value={keyword} \r\n              onChange={handle_keyword_change} \r\n              placeholder=\"Enter keyword for search\"/>\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/> */}\r\n\r\n        \r\n        </List>\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>)\r\n} // function","\r\nconst DAYS = ['SUN','MON','TUE','WED', 'THR', 'FRI','SAT'];\r\n\r\nfunction zeroPad(num, places) {\r\n  var zero = places - num.toString().length + 1;\r\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\r\n}\r\n\r\n\r\nexport default class DT{\r\n\r\n static MM_DD_YYYY(date){\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}/${yyyy}`;\r\n        return strTime;\r\n      }\r\n\r\n static MM_DD(date){\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n static MM_DD_DAY(date){\r\n        var mm =zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n        var dow = DAYS[date.getDay()];\r\n\r\n        var strTime = `${mm}/${dd} [${dow}]`;\r\n        return strTime;\r\n      }\r\n\r\nstatic HH_MM_AMPM(date){\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'PM' : 'AM';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0'+minutes : minutes;\r\n        var strTime = `${hours}:${minutes} ${ampm}`;\r\n        return strTime;\r\n      }\r\n\r\nstatic HH_MM(date){\r\n        var hours = zeroPad(date.getHours(),2);\r\n        var minutes =  zeroPad(date.getMinutes(),2);\r\n        var strTime = `${hours}:${minutes}`;\r\n        return strTime;\r\n      }\r\n\r\n      \r\nstatic YYYY_MM_DD(date){\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(), 2);\r\n        var strTime = `${yyyy}-${mm}-${dd}`;\r\n        return strTime;\r\n      }\r\n\r\nstatic YYYY_MM_DDTHH_MM(date){\r\n        return this.YYYY_MM_DD(date)+'T'+this.HH_MM(date);\r\n      }\r\n\r\n    } // class\r\n\r\n\r\n\r\n","/// this is obsolte, ues datatime2.js\r\n\r\nconst DAYS = ['SUN','MON','TUE','WED', 'THR', 'FRI','SAT'];\r\n\r\nfunction zeroPad(num, places) {\r\n  var zero = places - num.toString().length + 1;\r\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\r\n}\r\n\r\n\r\nexport default class DT{\r\n\r\n MM_DD_YYYY = (date)=>{\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}/${yyyy}`;\r\n        return strTime;\r\n      }\r\n\r\n      MM_DD = (date)=>{\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n      MM_DD_DAY = (date)=>{\r\n        var mm =zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n        var dow = DAYS[date.getDay()];\r\n\r\n        var strTime = `${mm}/${dd} [${dow}]`;\r\n        return strTime;\r\n      }\r\n\r\n      HH_MM_AMPM = (date)=>{\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'PM' : 'AM';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0'+minutes : minutes;\r\n        var strTime = `${hours}:${minutes} ${ampm}`;\r\n        return strTime;\r\n      }\r\n\r\n      HH_MM=(date)=>{\r\n        var hours = zeroPad(date.getHours(),2);\r\n        var minutes =  zeroPad(date.getMinutes(),2);\r\n        var strTime = `${hours}:${minutes}`;\r\n        return strTime;\r\n      }\r\n\r\n    YYYY_MM_DD=(date)=>{\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(), 2);\r\n        var strTime = `${yyyy}-${mm}-${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n      YYYY_MM_DDTHH_MM = (date)=>{\r\n        return this.YYYY_MM_DD(date)+'T'+this.HH_MM(date);\r\n      }\r\n\r\n    } // class\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport DT from '../helpers/datetime';\r\nimport './TreatmentItem.css'\r\n\r\nexport default function TreatmentItem(props){\r\n\r\n    let dt = new DT();\r\n\r\n    const {txItem} = props;\r\n    \r\n    const tx_starttime  = dt.MM_DD_DAY(new Date(txItem.ScheduledStartTime));\r\n\r\n    const handleSelectionChange = (e)=>{\r\n        console.dir(e.target);\r\n        props.selectionChange(txItem, e.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tx-item\">\r\n            <div className=\"tx-start-time\">{tx_starttime}</div>\r\n            <div className='tx-activity-code'>{txItem.ActivityCode}</div>\r\n            <div>\r\n                {/* <span className='add-to-q-button' onClick={handleAddToPlanQ}>Add to Q</span> */}\r\n                <input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" onChange={handleSelectionChange}/>\r\n            </div>\r\n        </div>\r\n    ) // return\r\n} // function","export default class logger {\r\n    static log(title, obj) {\r\n      console.log(title, obj)\r\n    }\r\n\r\n    static log(obj) {\r\n        console.log(obj)\r\n      }\r\n  \r\n  }","export default {\r\n    webservice_url: 'https://uhmc-ro-1502.uhmc.sbuh.stonybrook.edu:1004/api',\r\n    site: 'SH'\r\n    //webservice_url: 'https://localhost:1004/api',\r\n    // AuxiliaryName_ResourceSer_List: [\r\n    //     {\r\n    //         Name: 'CT Simulation SH',\r\n    //         ResourceSer: '5832'\r\n    //     },\r\n    //     {\r\n    //         Name: 'CT Simulation',\r\n    //         ResourceSer: '115'\r\n    //     }\r\n    // ],\r\n    // Machine_List: [\"SIL 21IX\",\r\n    //     \"Edge\",\r\n    //     \"TrueBeam\",\r\n    //     \"TrueBeamSH\"],\r\n    // Doctor_List: [\r\n    //     { ResourceSer: 5667, DoctorId: \"1585\", LastName: \"Mani\", FirstName: \"Kartik\", Email:'kartik.mani@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5121, DoctorId: \"1581\", LastName: \"Ryu\", FirstName: \"Samuel\", Email:'samuel.ryu@stonybrookmedicine.edu'}, \r\n    //     { ResourceSer: 5213, DoctorId: \"1583\", LastName: \"Stessin\", FirstName: \"Alexander\", Email:'alexander.stessin@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 49, DoctorId: \"1577\", LastName: \"Valentine\", FirstName: \"Edward\", Email: 'edward.valentine@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5775, DoctorId: \"170056513\", LastName: \"Newman\", FirstName: \"Bernard\", Email: 'bernard.newman@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5645, DoctorId: \"170056717\", LastName: \"Roberson\", FirstName: \"John\", Email:'john.roberson@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5893, DoctorId: \"170096733\", LastName: \"Zabrocka\", FirstName: \"Ewa\", Email: 'ewa.zabrocka@stonybrookmedicine.edu' }],\r\n            \r\n    // Profession_List: [\r\n    //     \"Dosimetrist\",\r\n    //     \"Physician\",\r\n    //     \"Physicist\",\r\n    //     \"Therapist\",\r\n    //     \"Other\"\r\n    // ],\r\n\r\n    // Email_Domain_List: [\r\n    //     \"stonybrook.edu\",\r\n    //     \"stonybrookmedicine.edu\"\r\n    // ],\r\n \r\n}\r\n\r\n","import config from '../config'\r\n\r\nexport default class ScheduledActivityDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/aria/scheduled_activities';\r\n        this.token = token;\r\n    }\r\n\r\n    getScheduledActivitiesPerResourceSer(ResourceSer, StartDateTime_begin , StartDateTime_end){\r\n       \r\n      const url_query = `${this.url}/ScheduledActivitiesPerResourceSer/${ResourceSer}/${StartDateTime_begin}/${StartDateTime_end}?token=${this.token}`;\r\n      \r\n    //  console.log('url_query',url_query);\r\n      return fetch(url_query,\r\n        {\r\n            method: 'GET', \r\n            //credentials: 'include'\r\n        });\r\n    }\r\n\r\n    getAllScheduledActivitiesPerPatientId(PatientId){\r\n       \r\n        const url_query = `${this.url}/ScheduledActivitiesPerPatientIdAll/${PatientId}?token=${this.token}`;\r\n        \r\n     //   console.log('url_query',url_query);\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n    getScheduledActivitiesPerPatientId(PatientId, StartDateTime_begin , StartDateTime_end){\r\n       \r\n        const url_query = `${this.url}/ScheduledActivitiesPerPatientId/${PatientId}/${StartDateTime_begin}/${StartDateTime_end}?token=${this.token}`;\r\n        \r\n     //   console.log('url_query',url_query);\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n} // class\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TreatmentItem from './TreatmentItem'\r\n\r\n\r\nimport logger from '../helpers/logger'\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ScheduledActivityDataProvider from '../providers/ScheduledActivityDataProvider'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nexport default function TreatmentList(props)\r\n{\r\n   logger.log('ScheduledActivityList()');\r\n    \r\n   const classes = useStyles()\r\n \r\n   const {open, handleClose, user, simItem} = props;\r\n  //  const {ScheduledStartTime, LastName, PatientId, ActivityCode, ScheduledActivityCode, ActivityNote} = simItem;\r\n\r\n  ///////////////\r\n  // Activity List\r\n  const [txList, setTxList] = React.useState([]);\r\n\r\n  ////\r\n  // primary oncologist\r\n  // const [doctor, setDoctor] = React.useState(null);\r\n\r\n    ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n    }\r\n    \r\n    // const findPrimaryOncologistOfPatientId = async (PatientId) =>{\r\n    //     const dp = new DoctorDataProvider();\r\n\r\n    //     //console.log('PatientId', PatientId)\r\n        \r\n    //     const res = await dp.getPrimaryOncologistOfPatientId(PatientId);\r\n    //     const doctors = await res.json();\r\n\r\n    //     //console.log('doctors', doctors);\r\n\r\n    //     // there should be only 1 primary oncologist of a patient.\r\n\r\n    //     // get only the new start\r\n    //     //const list_newstart = list.filter(item => item.ActivityCode.toLowerCase().includes(\"new start\"))\r\n\r\n    //     //console.log('list_newstart', list_newstart)\r\n\r\n    //     setDoctor(doctors[0]);\r\n    // }\r\n\r\n\r\n    const fetchList = async (PatientId, ScheduledStartTime)=>{\r\n\r\n        console.log('ScheduledActivityList - fetchList()')\r\n\r\n        if(!loggedIn())\r\n        {\r\n            console.log('fetchList -> User not logged in. Returing....')\r\n            return;\r\n        }\r\n\r\n        const dp = new ScheduledActivityDataProvider(props.user.token);\r\n\r\n        // date range: from sim date to 1 year later\r\n        const dt =new Date(ScheduledStartTime); // simDate\r\n        let dt_1 = new Date();\r\n        dt_1.setDate(dt.getDate()+365); // a year later \r\n        const StartDateTime_begin = `${dt.getMonth()+1}-${dt.getDate()}-${dt.getFullYear()}`\r\n        const StartDateTime_end = `${dt_1.getMonth()+1}-${dt_1.getDate()}-${dt_1.getFullYear()}`\r\n\r\n        const res = await dp.getScheduledActivitiesPerPatientId(PatientId, StartDateTime_begin, StartDateTime_end);\r\n        const list = await res.json();\r\n\r\n        // get only the new start\r\n        const list2 = list.filter(item => item.ActivityCategoryCode.toLowerCase().includes(\"treatment\"))\r\n        \r\n        setTxList(list2)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect');\r\n\r\n        fetchList(simItem.PatientId, simItem.ScheduledStartTime);\r\n\r\n        //findPrimaryOncologistOfPatientId(PatientId);\r\n\r\n    }, [simItem.PatientId]);\r\n\r\n    // called when the selection changed\r\n    let selected = [];\r\n    const selectionChange = (txItem, checked)=>{\r\n      if(checked)\r\n        {\r\n          selected.push(txItem);\r\n        }\r\n        else\r\n        {\r\n          selected = selected.filter(item=> item !== txItem)\r\n        }\r\n    }\r\n    \r\n    ////////////////\r\n    // Add tp PlanQ\r\n    const handleAddToPlanQ = ()=>\r\n    {\r\n        console.log('adding a case!')\r\n\r\n        if(selected.length===0)\r\n        {\r\n          alert(\"Please select items to add to the plan Q\");\r\n          return;\r\n        } \r\n\r\n        ///////////////////////////\r\n        // find Primary Oncologist\r\n        //const doctorString = doctor.LastName+\",\"+doctor.FirstName;\r\n        //console.log('doctor========>', doctor)\r\n\r\n        selected.forEach(txItem=>{\r\n          // remove Z to make the string as local time. \r\n          // The time stamps in ARIA is in UTC format, but it's actually local time.\r\n          const newstart_date = new Date(txItem.ScheduledStartTime.replace(\"Z\",\"\"))\r\n\r\n          //console.log('newstart_date',newstart_date)\r\n          const plan =  {\r\n              case_name: `${simItem.LastName}-${simItem.PatientId}`,\r\n              sim: new Date(simItem.ScheduledStartTime.replace('Z','')),\r\n              status: \"Sim Completed\",\r\n              newstart: newstart_date,\r\n              plan_name: \"\",\r\n              planners: \"\",\r\n              // doctors: doctorString,\r\n              doctors:\"\",\r\n              tx_site: \"\",\r\n              note: simItem.ActivityNote,\r\n              logs: []\r\n              };\r\n      \r\n          //console.log('adding plan to Q', plan)\r\n          props.addplan(plan)\r\n        }) // forEach\r\n\r\n        alert(`${selected.length} items havev been added to PlanQ`);\r\n        selected=[];\r\n        handleClose();\r\n    }   // handleAddToPlanQ\r\n\r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={props.handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Treatment List\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleAddToPlanQ}>\r\n                ADD TO PLANQ\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={props.handleClose}>\r\n                CANCEL\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n       {\r\n           txList.map(item=>(<TreatmentItem key={uuidv4()} txItem={item} selectionChange={selectionChange} />))\r\n       } \r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DT from '../helpers/dt'\r\nimport './SimScheduleItem.css'\r\nimport TreatmentList from './TreatmentList';\r\n\r\nexport default function SimScheduleItem(props){\r\n\r\n    const {scheduleItem} = props;\r\n    const {ScheduledStartTime, LastName, PatientId, ActivityCode, ScheduledActivityCode, ActivityNote} = scheduleItem;\r\n\r\n    //console.log(props)\r\n    // ActivityCode: \"Initial IMRT Sim UH\"\r\n    // ScheduledStartTime: \"2020-02-11T09:00:00.000Z\"\r\n    // ScheduledActivityCode: \"Manually Completed\"\r\n    // ActivityNote: \"prostate\"\r\n    // PatientId: \"xxxxxxxxx\"\r\n    // LastName: \"xxxxxxx\"\r\n    // FirstName: \"xxxxxx\"\r\n    // ScheduledActivitySer: \"971151\"\r\n    // CreatedByUserName: \"jberkosk\"\r\n    // CreationDate: \"2020-02-11T07:42:13.470Z\"\r\n    // HstryUserName: \"sabagaro\"\r\n    // HstryDateTime: \"2020-02-11T09:33:48.343Z\"\r\n    // HstryTaskName: \"AriaPM\"\r\n\r\n    /////////////////////////////\r\n    // sim schedule dialog open/close\r\n    const [scheduledActivitiesDlgOpen, setScheduledActivitiesDlgOpen] = useState(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"item\">\r\n                <ul className=\"schedule_item\">\r\n                    <li className=\"ScheduledStartTime\">{DT.MM_DD_DAY(new Date(ScheduledStartTime.replace('Z','')))}</li>\r\n                    <li className=\"LastName\">{LastName}</li>\r\n                    <li className=\"PatientId\">{PatientId}</li>\r\n                    <li className=\"ActivityCode\">{ActivityCode}</li>\r\n                    <li className=\"ScheduledActivityCode\">{ScheduledActivityCode}</li>\r\n                    <li className=\"ActivityNote\">{ActivityNote}</li>\r\n                </ul>\r\n                \r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    className=\"add_button\"\r\n                    endIcon={<AddIcon/>}\r\n                    onClick={()=>{setScheduledActivitiesDlgOpen(true)}}\r\n                >\r\n                PlanQ\r\n                </Button>\r\n\r\n                <TreatmentList  \r\n                    open = {scheduledActivitiesDlgOpen}  \r\n                    handleClose = {()=>{setScheduledActivitiesDlgOpen(false)}}\r\n                    user = {props.user}\r\n                    simItem = {props.scheduleItem}\r\n                    addplan = {props.addplan}\r\n                />\r\n\r\n            </div>\r\n            <Divider/>\r\n        </React.Fragment>\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class EnumDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/enums';\r\n        this.token = token;\r\n    }\r\n\r\n    getEnums(){\r\n        const url_query = `${this.url}?token=${this.token}`;\r\n        return fetch(url_query);\r\n    }\r\n\r\n    getEnums_prop(prop_name)\r\n    {\r\n        const url_query = `${this.url}/${prop_name}?token=${this.token}`;\r\n        return fetch(url_query);\r\n    }\r\n  \r\n\r\n} // class\r\n","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport List from '@material-ui/core/List';\r\nimport SimScheduleItem from './SimScheduleItem'\r\nimport ScheduledActivityDataProvider from '../providers/ScheduledActivityDataProvider'\r\nimport EnumDataProvider from '../providers/EnumDataProvider'\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport logger from '../helpers/logger'\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n//    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\n  import DateFnsUtils from '@date-io/date-fns';\r\n\r\n  import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function addDays(date, days) {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  }\r\n\r\n  function Message(props) {\r\n    return <h1>{props.msg}</h1>;\r\n  }\r\n\r\n  function SimList(props){\r\n    const {list, addplan, user} = props;\r\n    return (\r\n    <List>\r\n    { \r\n        list.map((item,i)=>(<SimScheduleItem key={uuidv4()} scheduleItem={item} addplan = {addplan} user={user}/>))\r\n    }\r\n    </List>)\r\n  }\r\n\r\nexport default function SimSchedule(props)\r\n{\r\n\r\n    const {open, handleClose, addplan, user} = props;\r\n\r\n    logger.log('SimSchedule()');\r\n\r\n    const classes = useStyles()\r\n\r\n    //////////////////\r\n    // fetch sim_list\r\n    const [simResourceList, setSimResourceList] = useState([]);\r\n    useEffect(()=>{\r\n\r\n        console.log('SimSchedule->useEffect- fetching simResourceList')        \r\n\r\n        const dp = new EnumDataProvider(user.token);\r\n        dp.getEnums_prop(\"sim_list\").\r\n        then(res=>{\r\n            return res.json()\r\n        })\r\n        .then(data=>{\r\n            \r\n            setSimResourceList(data)\r\n\r\n            if(data && data.length>0)\r\n            {\r\n                setResourceSer(data[0].aria_resourceser);\r\n            }\r\n               \r\n        })\r\n        .catch(err=>{\r\n            console.error('SimSchedule - fetching simResourceList failed')\r\n            console.error(err)\r\n        })\r\n        \r\n    },[user])\r\n    \r\n\r\n    ///////////////\r\n    // Resource\r\n    const [resourceSer, setResourceSer] = React.useState(null);\r\n    const handleResourceSerChange = event => {\r\n//        console.log('event.target.value', event.target.value)\r\n        setResourceSer(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Message\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    ///////////////\r\n    // Sim Date\r\n    const today = new Date();\r\n    let simDateList = [];\r\n    for(var i=0; i<7; i++)\r\n    {\r\n        let day = new Date();\r\n        day.setDate(today.getDate()-i);\r\n        const dateString = `${day.getMonth()+1}-${day.getDate()}-${day.getFullYear()}`;\r\n        simDateList.push(dateString);\r\n    }\r\n\r\n    const [simDate, setSimDate] = React.useState(simDateList[0]);\r\n    const handleSimDateChange = e => {\r\n        setSimDate(e.target.value);\r\n    };\r\n\r\n  ///////////////\r\n  // Schedule List\r\n  const [list, setList] = React.useState([]);\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n  \r\n  ////////////////////////\r\n  // fetch simulation list\r\n  const fetchList = async () => {\r\n\r\n    console.log('SimSchedule-->fetchList()')\r\n\r\n    if(!loggedIn())\r\n    {\r\n        console.log('fetchList -> User not logged in. Returing....')\r\n        return;\r\n    }\r\n    \r\n    const dp = new ScheduledActivityDataProvider(user.token);\r\n        \r\n    const ResourceSer = resourceSer;\r\n    const parts = simDate.split('-');\r\n    const YYYY = parseInt(parts[2]);\r\n    const MM = parseInt(parts[0]);\r\n    const DD = parseInt(parts[1]);\r\n\r\n    const dt = new Date(YYYY, MM-1, DD);\r\n    const dt_1 = addDays(dt,1);\r\n    \r\n    // let dt_new Date();\r\n    // dt_1.setDate(dt.getDate()+1);\r\n    \r\n    // today\r\n    const StartDateTime_begin = `${dt.getMonth()+1}-${dt.getDate()}-${dt.getFullYear()}`\r\n    const StartDateTime_end = `${dt_1.getMonth()+1}-${dt_1.getDate()}-${dt_1.getFullYear()}`\r\n\r\n    // console.log('ResourceSer', ResourceSer)\r\n    // console.log('StartDateTime_begin', StartDateTime_begin)\r\n    // console.log('StartDateTime_end', StartDateTime_end)\r\n    \r\n\r\n    // var xhr = new XMLHttpRequest();\r\n    // const url_query = `${config.webservice_url}/aria/scheduled_activities/ScheduledActivitiesPerResourceSer/${ResourceSer}/${StartDateTime_begin}/${StartDateTime_end}`\r\n    // xhr.open('GET', url_query, true);\r\n    // xhr.withCredentials = true;\r\n    // xhr.onreadystatechange = function() {\r\n    //   if (this.readyState == 4 && this.status == 200) {\r\n    //      // Typical action to be performed when the document is ready:\r\n    //      console.log('xhr.responseText',xhr.responseText);\r\n    //      const data = JSON.parse(xhr.responseText);\r\n    //      console.log('data==>', data);\r\n    //      setList(data);\r\n    //      setMessage(\"\");\r\n    //   }\r\n    //   else{\r\n    //       setMessage(\"Please login\")\r\n    //   }\r\n    // };\r\n    // xhr.send(null);\r\n\r\n    const res = await dp.getScheduledActivitiesPerResourceSer(ResourceSer, StartDateTime_begin, StartDateTime_end);\r\n    //console.log('res',res)\r\n    if(res.status === 401) // Unauthorized. \r\n    {\r\n        setMessage(\"Please login\");\r\n    }else{\r\n        const data = await res.json();\r\n        //console.log('list==>', data);\r\n        setList(data);\r\n        setMessage(\"\");\r\n    }\r\n  } // fetchList\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect()')\r\n    fetchList();\r\n  }, [resourceSer,simDate, open, simResourceList]); \r\n\r\n  const handleRefresh = ()=>{\r\n      fetchList();\r\n  }\r\n\r\n    return(\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                CT Sim\r\n            </Typography>\r\n\r\n            {/* Resource */}\r\n            <FormControl className={classes.formControl}>\r\n            <Select\r\n                native\r\n                value={resourceSer}\r\n                onChange={handleResourceSerChange}\r\n                inputProps={{\r\n                    name: 'resourceSer',\r\n                    id: 'resourceSer-native-simple',\r\n                }}\r\n            >\r\n                {\r\n                    simResourceList.map(res=>{\r\n                        return (<option value={res.aria_resourceser} key={uuidv4()}>{res.name}</option>)\r\n                    })\r\n                }\r\n            </Select>\r\n            </FormControl>\r\n\r\n            {/* Sim Date */}\r\n            <FormControl className={classes.formControl}>\r\n            <Select\r\n                native\r\n                value={simDate}\r\n                onChange={handleSimDateChange}\r\n                inputProps={{\r\n                    name: 'simDate',\r\n                    id: 'simDate-native-simple',\r\n                }}\r\n            >\r\n                {\r\n                    simDateList.map(date=>{\r\n                        return (<option value={date} key={uuidv4()}>{date}</option>)\r\n                    })\r\n                }\r\n            </Select>\r\n            </FormControl>\r\n\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        {\r\n            (loggedIn())?(<SimList list = {list} user={user} addplan={addplan} />):(<Message msg=\"please login\"/>)\r\n        }\r\n\r\n\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>\r\n    ) // return\r\n} // function","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport config from '../config'\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport logger from '../helpers/logger'\r\n\r\nimport './Login.css'\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n    root: {\r\n\r\n    },\r\n    appBar: {\r\n     position: 'relative',\r\n     },\r\n     title: {\r\n       //marginLeft: theme.spacing(2),\r\n       flex: 1,\r\n     },\r\n       formControl: {\r\n          margin: theme.spacing(1),\r\n        //  minWidth: 120,\r\n        //  backgroundColor: 'white'\r\n       },\r\n       button: {\r\n         margin: theme.spacing(1),\r\n      },\r\n      alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(0),\r\n        },\r\n      },\r\n   })); // classes\r\n\r\n \r\n\r\n\r\nexport default function Login(props)\r\n{\r\n  logger.log('Login()')\r\n\r\n    const classes = useStyles()\r\n\r\n    ///////////////\r\n    // userid\r\n    const [userid, setUserid] = React.useState(\"\");\r\n    const handleUseridChange = event => {\r\n        setUserid(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Password\r\n    const [pw, setPw] = React.useState(\"\");\r\n    const handlePwChange = event => {\r\n        setPw(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Alert Message\r\n    const [msg, setMsg] = React.useState(\"\");\r\n\r\n    const handleMsgClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n\r\n      setMsg(\"\");\r\n    };\r\n    \r\n    const [openAlert, setAlertOpen] = React.useState(false);\r\n    const handleAlertClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n        setAlertOpen(false);\r\n    };\r\n\r\n    ///////////////\r\n    // Submit\r\n    const handleSubmit = () => {\r\n\r\n        const data = {userid: userid, password: pw};\r\n        const url = config.webservice_url + '/users/authenticate';\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        xhr.onreadystatechange = function() { // Call a function when the state changes.\r\n          if (this.readyState === XMLHttpRequest.DONE && this.status === 200) \r\n          {\r\n            // successful login\r\n\r\n            // set user\r\n            const user = JSON.parse(xhr.responseText);\r\n            props.setUser(user);\r\n\r\n            // close the login dialogbox\r\n            props.handleLoginClose();\r\n\r\n            // remove password\r\n            setPw(\"\");\r\n           \r\n            setAlertOpen(false);\r\n          }\r\n          else{\r\n            // login failed, let user to try again\r\n            const msg = \"Login Failed. Try again. Use your computer login ID and PW.\";\r\n\r\n            setMsg(msg)\r\n            setAlertOpen(true);\r\n\r\n            // remove password\r\n            setPw(\"\");\r\n          }\r\n        }// function\r\n        \r\n        xhr.send(JSON.stringify(data));\r\n        // xhr.send(new Int8Array()); \r\n        // xhr.send(document);\r\n    };\r\n\r\n    const handlePwKeyUp = e=>{\r\n      if(e.keyCode === 13) // enter key pressed\r\n        handleSubmit();\r\n    }\r\n\r\n    return(\r\n\r\n    // <Dialog fullScreen className={classes.root} open={props.loginOpen} onClose={props.handleLoginClose} TransitionComponent={Transition}>\r\n    <Dialog className='login-dialog' open={props.loginOpen} onClose={props.handleLoginClose}>      \r\n         <FormControl className={classes.formControl}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Login\r\n                </Typography>\r\n\r\n                <Button autoFocus color=\"inherit\" onClick={props.handleLoginClose}>\r\n                    CLOSE\r\n                </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </FormControl>\r\n\r\n        <FormControl className={classes.formControl}>\r\n        {/* Userid */}\r\n        <TextField\r\n            id=\"textfield_userid\"\r\n            className={classes.textField}\r\n            label=\"User Id\"\r\n            value={userid}\r\n            // InputLabelProps={{shrink:true}}\r\n            onChange = {handleUseridChange}\r\n        />\r\n        </FormControl>\r\n\r\n        {/* Password */}\r\n        <FormControl className={classes.formControl}>\r\n        <TextField\r\n            id=\"textfield_password\"\r\n            className={classes.textField}\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value={pw}\r\n            onKeyUp={handlePwKeyUp}\r\n            // InputLabelProps={{shrink:true}}\r\n            onChange = {handlePwChange}\r\n        />\r\n        </FormControl>\r\n\r\n        <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleAlertClose}>\r\n        <Alert onClose={handleAlertClose} severity=\"error\">\r\n          {msg}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.button}\r\n        onClick={handleSubmit}\r\n      >\r\n        Submit\r\n      </Button>\r\n\r\n    </Dialog>\r\n\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class QaDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/qalist';\r\n        this.token = token;\r\n    }\r\n\r\n    getQAs(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs(){\r\n      return fetch(this.url+`/notcompleted?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs(){\r\n      return fetch(this.url+`/completed?token=${this.token}`);\r\n    }\r\n\r\n    getQAs_skip_limit(skip, limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs_skip_limit(skip,limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/notcompleted/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs_skip_limit(skip,limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/completed/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }    \r\n\r\n    getQAs_machines_skip_limit(machines,skip, limit){\r\n      machines = encodeURIComponent(machines)\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs_machines_skip_limit(machines,skip,limit){\r\n        machines = encodeURIComponent(machines)\r\n        skip = encodeURIComponent(skip)\r\n        limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/notcompleted/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs_machines_skip_limit(machines,skip,limit){\r\n      machines = encodeURIComponent(machines)\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/completed/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }    \r\n\r\n    addQA(qa) {\r\n     //   console.log('adding a plan', plan);\r\n        return fetch(this.url+`?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(qa)\r\n        });\r\n      }\r\n\r\n      updateQA(qa,addtional_querystring) {\r\n     //   console.log('updating a plan', plan);\r\n        const qa_url = this.url+'/'+qa._id;\r\n        \r\n        let url = qa_url +`?token=${this.token}`;\r\n\r\n        if(addtional_querystring)\r\n           url = url+addtional_querystring;\r\n        \r\n        console.log('url==>', url);\r\n        return fetch(url, {\r\n          method: 'PATCH',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(qa)\r\n        });\r\n      }\r\n\r\n\r\n      deleteQA(qa) {\r\n    //    console.log('deleting a plan', plan);\r\n        const qa_url = this.url+'/'+qa._id;\r\n    //    console.log('plan url', plan_url);\r\n        return fetch(qa_url+`?token=${this.token}`, {\r\n          method: 'DELETE',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          }\r\n          //body: JSON.stringify(plan)\r\n        });\r\n      }\r\n} // class\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport './SimpleDlg.css'\r\n\r\nexport default function SimpleDlg(props) {\r\n\r\n  const {open, handleClose, title, msg, buttons, error} = props;\r\n\r\n  \r\n  const titleClass = (error)?'simple-dlg-error-title':'simple-dlg-info-title'\r\n    \r\n  return (\r\n      <Dialog\r\n        open={open}\r\n        className='simple-dlg'\r\n      >\r\n        {/* Title */}\r\n        <DialogTitle\r\n          className={titleClass}\r\n          > \r\n          {title}\r\n        </DialogTitle>\r\n\r\n        {\r\n          (msg)&&(\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-msg\">\r\n                {msg}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n          )\r\n        } \r\n        \r\n        <DialogActions>\r\n          {\r\n            (buttons.includes('Yes')) && (\r\n            <Button onClick={()=>{handleClose('Yes')}} color=\"primary\">\r\n            Yes\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('No')) && (\r\n            <Button onClick={()=>{handleClose('No')}} color=\"primary\">\r\n            No\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('Ok')) && (\r\n            <Button onClick={()=>{handleClose('Ok')}} color=\"primary\">\r\n            Ok\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('Cancel')) && (\r\n            <Button onClick={()=>{handleClose('Cancel')}} color=\"primary\">\r\n            Cancel\r\n            </Button>\r\n            )\r\n          }\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useForm from './useForm'\r\nimport './GammaDlg.css'\r\n\r\nexport default function GammaDlg(props) {\r\n\r\n    const {open, handleClose} = props;\r\n\r\n    const [values, handleChange] = useForm({PD:3,DTA:2,G:95});\r\n\r\n\r\n\r\n  return (\r\n      <Dialog\r\n        open={open}\r\n      >\r\n        <div className='gamma-title'>Gamma Result</div>\r\n        { <DialogContent>\r\n            <div className=\"gamma-wrapper\">\r\n                  Gamma: [\r\n                    <select id=\"PD\" \r\n                    name=\"PD\"\r\n                    onChange={handleChange} \r\n                    value={values.PD}\r\n                    >\r\n                    <option value=\"1\">1 %</option>\r\n                    <option value=\"2\">2 %</option>\r\n                    <option value=\"3\">3 %</option>\r\n                    <option value=\"4\">4 %</option>\r\n                    <option value=\"5\">5 %</option>\r\n                  </select>\r\n                  /\r\n\r\n                  <select id=\"DTA\" \r\n                    name=\"DTA\"\r\n                    onChange={handleChange} \r\n                    value={values.DTA}\r\n                    >\r\n                    <option value=\"1\">1 mm</option>\r\n                    <option value=\"2\">2 mm</option>\r\n                    <option value=\"3\">3 mm</option>\r\n                    <option value=\"4\">4 mm</option>\r\n                    <option value=\"5\">5 mm</option>\r\n                  </select>\r\n                  ] => \r\n                  <input id=\"G\" name=\"G\" onChange={handleChange} value={values.G}/>\r\n                  %\r\n            </div>\r\n        </DialogContent>\r\n         }\r\n        <DialogActions>\r\n        <Button onClick={()=>{handleClose(values)}} color=\"primary\" autoFocus>\r\n            OK\r\n          </Button>\r\n          <Button onClick={()=>{handleClose(null)}} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import {useState} from 'react';\r\n\r\nexport default function useForm(initialVlaues){\r\n    const [values, setValues] = useState(initialVlaues);\r\n\r\n    const handleChange = (e)=>{\r\n        setValues({...values, [e.target.name]:e.target.value})\r\n    }\r\n\r\n    return [values, handleChange]\r\n}","import React, {useState} from 'react';\r\nimport './QAListItem.css'\r\nimport DT from '../helpers/datetime'\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\nimport GammaDlg from '../helpers/GammaDlg'\r\n\r\nexport default function QaListItem(props){\r\n\r\n    console.log('QAListItem()')\r\n    \r\n    const {qaitem, user, save_qa, delete_qa} = props;\r\n    const {qa, dirty} = qaitem;\r\n    const {due_on, plan_case_name, plan, type, result, machine, requested_by, requested_on, completed_by, completed_on, notes} = qa;\r\n\r\n    const dt = new DT();\r\n\r\n    const [values, setValues] = useState({result:result, notes: notes})\r\n\r\n    const [saveButtonEnabled, setSaveButtonEnabled] = useState(false);\r\n    const readyToComplete=()=>{\r\n        \r\n        // someone compalted already? no need to complate again.\r\n        if(qa.completed_by.trim()!==\"\")  \r\n            return false;\r\n\r\n        // no result? cannot complete the qa yet.\r\n        if(qa.result.trim() === \"\") // no result yet?\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const [completeButtonEnabled, setCompleteButtonEnabled] = useState(readyToComplete());\r\n\r\n    const handleSaveQa = ()=>{\r\n        \r\n        // save the current value\r\n        qa.result = values.result;\r\n        qa.notes = values.notes;\r\n        \r\n        // save\r\n        save_qa(qa);\r\n\r\n        setSaveButtonEnabled(false)\r\n    }\r\n\r\n    const handleDeleteQa = ()=>{\r\n        delete_qa(qaitem.qa);\r\n    }\r\n    \r\n    const handleCompleteQa = ()=>{\r\n\r\n        // completer info\r\n        qa.completed_on = new Date();\r\n        qa.completed_by = `${user.name}|${user.email}|${user.userid}`;    \r\n        \r\n        // save the current value\r\n        qa.result = values.result;\r\n        qa.notes = values.notes;\r\n    \r\n        // save\r\n        save_qa(qa, \"&action=completed\");\r\n\r\n        setSaveButtonEnabled(false)\r\n        setCompleteButtonEnabled(false)\r\n    }\r\n  \r\n    const handleChagneInput = (e)=>{\r\n        if(e.target.name==='notes')\r\n        {\r\n            setValues({...values, notes:e.target.value})\r\n            setSaveButtonEnabled(true);\r\n        }\r\n    }\r\n\r\n    const [openConfirmDlg, setOpenConfirmDlg] = useState(false);\r\n    const [openGammaDlg, setOpenGammaDlg] = useState(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"qa_item\">\r\n                <div className=\"qa-due\">{dt.MM_DD_DAY(new Date(due_on))}</div>\r\n                <div className=\"qa-plan_case_name\">{plan_case_name}</div>\r\n                <div className=\"qa-plan\">{plan}</div>\r\n                <div className=\"qa-type\">{type}</div>\r\n                <div className=\"qa-machine\">{machine}</div>\r\n                <div className=\"qa-requested_by\">{requested_by.split('|')[0]}</div>\r\n\r\n                <div className='qa-result-wrapper'>\r\n                    <div className=\"qa-result\">{values.result}</div>\r\n                    {/* <input name=\"result\" value={values.result} onChange={handleChagneInput} placeholder=\"Result\"/> */}\r\n                    <button className='open-gamma-dlg' onClick={()=>{setOpenGammaDlg(true)}}>...</button>\r\n                </div>\r\n                <div><input name=\"notes\" value={values.notes} onChange={handleChagneInput} placeholder=\"Notes\"></input></div>\r\n                <div className=\"qa-completed_by\">{completed_by.split('|')[0]}</div>\r\n                {/* <li className=\"qa-requested_on\">{requested_on}</li> */}\r\n                <div className=\"button-container\">\r\n                    <div><button onClick={handleSaveQa} disabled={!saveButtonEnabled} > Save </button></div>\r\n                    <div><button onClick={handleCompleteQa} disabled={!completeButtonEnabled} > Complete </button></div>\r\n                    {/* <div><button onClick={handleReviewQa} disabled={!reiewButtonEnabled} > Review </button></div> */}\r\n                    <div><button onClick={()=>{setOpenConfirmDlg(true)}}>x</button></div>\r\n                </div>\r\n            </div>\r\n\r\n            <SimpleDlg id=\"delete_confirm_dialog\"\r\n                open = {openConfirmDlg}\r\n                title = \"Are you sure?\"\r\n                buttons='Yes|no'\r\n                handleClose = {(btnPressed)=>{\r\n                    if(btnPressed==='Yes')\r\n                        handleDeleteQa();\r\n                    setOpenConfirmDlg(false);\r\n                }}\r\n            />\r\n\r\n            <GammaDlg id=\"gamma_dialog\"\r\n                open = {openGammaDlg}\r\n                handleClose = {(result)=>{\r\n                    if(result) // ok clicked\r\n                    {\r\n                        const newResult = `G(${result.PD}%,${result.DTA}mm)=${result.G}%`\r\n\r\n                        setValues({...values, result:newResult})\r\n                        setSaveButtonEnabled(true);\r\n                        setCompleteButtonEnabled(true)\r\n                    }\r\n\r\n                    setOpenGammaDlg(false);\r\n                }}\r\n            />\r\n\r\n        </React.Fragment>\r\n    ) // return\r\n} // function","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport List from '@material-ui/core/List';\r\nimport QaDataProvider from '../providers/QaDataProvider'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './QAListDlg.css'\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n//    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\n  import DateFnsUtils from '@date-io/date-fns';\r\n\r\n  import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport QaListItem from './QAListItem'\r\n\r\n  const useStyles = makeStyles(theme =>({\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n    container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    },\r\n    formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    backgroundColor: 'white'\r\n    },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nfunction Message(props) {\r\n    return <h1>{props.msg}</h1>;\r\n}\r\n\r\nfunction QaList(props){\r\n    const {list, delete_qa, save_qa, user} = props;\r\n    return (\r\n        <List>\r\n        { \r\n            list.map((qaitem,i)=>(<QaListItem key={uuidv4()} qaitem={qaitem} delete_qa={delete_qa} save_qa={save_qa} user={user}/>))\r\n        }\r\n        </List>)\r\n}\r\n\r\nexport default function QAListDlg(props)\r\n{\r\n    const classes = useStyles()\r\n    \r\n    const {open, handleClose, user} = props;\r\n    \r\n    const [list, setList] = useState([]);\r\n\r\n    const statusList = ['Pending', 'Completed', 'All'];\r\n    const [status, setStatus] = useState(statusList[0]);\r\n    const handleStatusChange = (e) =>{\r\n      \r\n      console.log('status', e.target.value);\r\n      setStatus(e.target.value)\r\n    }\r\n\r\n    ///////////////\r\n    // pagenation\r\n    const initValues = {\r\n      page: 1,\r\n      totalCount: 0,\r\n    };\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const itemsPerPage = (user && user.settings && user.settings.qalist_num_of_cases_per_page)?user.settings.qalist_num_of_cases_per_page:10;    \r\n    const numOfPages = (totalCount%itemsPerPage>0) ? Math.floor(totalCount/itemsPerPage)+1:Math.floor(totalCount/itemsPerPage);\r\n    \r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n      };\r\n\r\n    const getQAs = (status, page, itemsPerPage)=>{\r\n      \r\n      const skip = (page-1)*itemsPerPage;\r\n      const limit = itemsPerPage;\r\n\r\n      if(!user || !user.token) return;\r\n\r\n      const dp = new QaDataProvider(user.token);\r\n      \r\n      if(!user.settings.my_machines || user.settings.my_machines.trim()==='') // no machine settings\r\n      {\r\n        switch(status){\r\n          case 'All':\r\n            return dp.getQAs_skip_limit(skip, limit);\r\n            break;\r\n          case 'Pending':\r\n              return dp.getPendingQAs_skip_limit(skip, limit);\r\n              break;\r\n          case 'Completed':\r\n                return dp.getCompletedQAs_skip_limit(skip, limit);\r\n                break;            \r\n          default:\r\n            console.error('Unknown status')\r\n        }\r\n      }\r\n      else\r\n      {\r\n        switch(status){\r\n          case 'All':\r\n            return dp.getQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n            break;\r\n          case 'Pending':\r\n              return dp.getPendingQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n              break;\r\n          case 'Completed':\r\n                return dp.getCompletedQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n                break;            \r\n          default:\r\n            console.error('Unknown status')\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    const fetchList = ()=>\r\n    {\r\n      if(!user || !user.userid)\r\n        {\r\n          console.log('user not logged in yet');\r\n          return;\r\n        }\r\n\r\n      getQAs(status, page, itemsPerPage)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n              \r\n              // items\r\n              const qaItemList = ret_data.list.map(qa=>{\r\n                return {\r\n                        qa:qa,\r\n                        dirty:false }\r\n              });\r\n\r\n              setList(qaItemList)\r\n\r\n              setTotalCount(ret_data.totalCount)\r\n          })\r\n          .catch(err=>console.log(err));\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n      fetchList();\r\n             \r\n    },[open, user, status, page]) // useEffect\r\n\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n\r\n  const handleRefresh = ()=>{\r\n      fetchList();\r\n  }\r\n\r\n  const delete_qa = (qa)=>\r\n  {\r\n    if(!loggedIn())  return;\r\n\r\n    const dp = new QaDataProvider(user.token);\r\n    dp.deleteQA(qa)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(ret_data => {\r\n        \r\n        // console.log('delete_qa->ret_data',ret_data)\r\n        if(ret_data.deletedCount===1){\r\n          // delete from the list \r\n          const newList = list.filter(qi=>qi.qa._id!==qa._id);\r\n          setList(newList);\r\n          setTotalCount(totalCount-1)\r\n        }\r\n        else{\r\n          console.error('delete qa failed. Either none deleted or more than 1 QAs deleted.')\r\n        }\r\n      })\r\n      .catch(err=>console.log(err));\r\n  }\r\n\r\n  const save_qa = (qa, addtional_querystring)=>\r\n  {\r\n    if(!user || !user.token) return;\r\n\r\n    const dp = new QaDataProvider(user.token);\r\n    dp.updateQA(qa, addtional_querystring)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(ret_data => {\r\n        \r\n        // console.log('save_qa->ret_data',ret_data)\r\n        if(ret_data.nModified===1){\r\n           setList(list);\r\n        }\r\n        else{\r\n           console.error('save qa failed. Either none saved or more than 1 QAs saved.')\r\n        }\r\n      })\r\n      .catch(err=>console.log(err));\r\n  }\r\n\r\n\r\n    return(\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                QA List\r\n            </Typography>\r\n\r\n            {/* Status */}\r\n           <div className='qa-status-wrapper'>\r\n            <label htmlFor=\"qa-status\" >STATUS:</label>\r\n            <select id=\"qa-status\" onChange={handleStatusChange} value={status}>\r\n            {\r\n              statusList.map(s=>{\r\n                  return (<option value={s} key={uuidv4()}>{s}</option>)\r\n              })\r\n            }\r\n            </select>\r\n          </div>\r\n\r\n\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        {\r\n            (loggedIn())?(<QaList list = {list} delete_qa={delete_qa} save_qa={save_qa} user={user}/>):(<Message msg=\"please login\"/>)\r\n        }\r\n\r\n\r\n        <div className=\"qalist-pagenation\">\r\n            <Pagination count={numOfPages} page={page} onChange={handlePageChange} />\r\n            <div className='total-count'>N={totalCount}</div>\r\n        </div>\r\n\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class UserDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/users';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllUsers(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getUserByUserId(userid){\r\n        const url = `${this.url}/userid/${userid}?token=${this.token}`;\r\n        return fetch(url);\r\n    }\r\n\r\n    updateUser(user) {\r\n        console.log('updating a user', user);\r\n        const url = `${this.url}/userid/${user.userid}?token=${this.token}`;\r\n        console.log('url==>', url);\r\n        return fetch(url, {\r\n            method: 'PATCH',\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: JSON.stringify(user)\r\n        });\r\n    }\r\n\r\n    // deleteUser(user) {\r\n    // console.log('deleting a user', user);\r\n    // const url = `${this.url}/userid/${user.userid}?token=${this.token}`;\r\n    // return fetch(url, {\r\n    //     method: 'DELETE',\r\n    //     mode: 'cors', // no-cors, *cors, same-origin\r\n    //     headers: {\r\n    //     'Content-Type': 'application/json'\r\n    //     // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    //     }\r\n    //     //body: JSON.stringify(plan)\r\n    // });\r\n    // }\r\n    \r\n} // class\r\n","import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\nfunction make_dict(list, selected){\r\n    const dict = {}\r\n    list.forEach(key=>{\r\n        dict[key] = (selected.indexOf(key)>-1);\r\n    })\r\n    return dict;\r\n}\r\n\r\nexport default function CheckBoxSelectorDlg(props){\r\n\r\n    console.log('CheckBoxSelectorDlg()')\r\n\r\n    const {open, handleClose, title, list, selected} = props;\r\n\r\n    const classes = useStyles();\r\n    \r\n    const [dict, setDict] = React.useState(make_dict(list, selected))\r\n\r\n    useEffect(()=>{\r\n        setDict(make_dict(list, selected)\r\n    )}, [list, selected, open])\r\n\r\n    const handleChange = (event) => {\r\n        setDict({ ...dict, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    const handleClickOk = ()=>{\r\n\r\n        const checked_items = [];\r\n        Object.keys(dict).forEach(key=>{\r\n            if(dict[key])\r\n                checked_items.push(key)\r\n        })\r\n\r\n        handleClose(checked_items)\r\n    }\r\n\r\n    const handleClickCancel = ()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    return(\r\n        <Dialog\r\n            open={open}\r\n            className = 'checkbox-selector-dlg'\r\n        >\r\n        <DialogTitle className = 'checkbox-selector-dlg-title'>{title}</DialogTitle>\r\n        <DialogContent>\r\n        \r\n        \r\n        <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        {/* <FormLabel component=\"legend\">Assign responsibility</FormLabel> */}\r\n        <FormGroup>\r\n            {\r\n                Object.keys(dict).map(key=>(\r\n\r\n                    <FormControlLabel key={key}\r\n                        control={<Checkbox checked={ dict[key]} onChange={handleChange} name={key} />}\r\n                        label={key}\r\n                    />\r\n                ))\r\n            }\r\n          \r\n        </FormGroup>\r\n        {/* <FormHelperText>Be careful</FormHelperText> */}\r\n      </FormControl>\r\n    </div>\r\n\r\n          \r\n         \r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n        </Button>\r\n\r\n        <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n        </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        ) // return\r\n}","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport logger from '../helpers/logger'\r\nimport UserDataProvider from '../providers/UserDataProvider'\r\nimport CheckBoxSelectorDlg from '../helpers/CheckBoxSelectorDlg'\r\n\r\nimport './UserSettingsDlg.css'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function isInteger(label, value){\r\n    // is empty\r\n    if(!value ||value.trim()==='')\r\n    {\r\n      alert(`\"${label}\" field cannot be empty`);\r\n      return false;\r\n    }\r\n\r\n    // is this a number?\r\n    if(isNaN(value))\r\n    { \r\n      alert(`\"${label}\" is not a number`);\r\n      return false;\r\n    } \r\n\r\n    // is this an integer\r\n    const num = Number(value);\r\n    if(!Number.isInteger(num)){\r\n      alert(`\"${label}\" is not an integer number`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function isPositiveInteger(label, value){\r\n    if(!isInteger(label, value))\r\n      return false;\r\n\r\n    if(parseInt(value)<1){\r\n      alert(`\"${label}\" is not a positive integer number`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\nexport default function UserSettingsDlg(props)    \r\n{\r\n    const {open, handleClose, user, enumList} = props;\r\n\r\n    logger.log('UseSettings()');\r\n\r\n    // console.log('UseSettingsDlg-user', user)\r\n    const classes = useStyles()\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n  \r\n  const isValid = ()=>{\r\n \r\n    if(!isPositiveInteger('PlanQ - Number of cases per page', settings.planq_num_of_cases_per_page))\r\n      return false;\r\n    \r\n    if(!isPositiveInteger('QA - Number of cases per page', settings.qalist_num_of_cases_per_page))\r\n      return false;\r\n\r\n    return true;\r\n }\r\n\r\n  const handleApply = ()=>{\r\n    if(!isValid())\r\n      return;\r\n\r\n    setDirty(false);\r\n\r\n    // return the values\r\n    handleClose(settings)\r\n  }\r\n\r\n  const handleCancel = ()=>\r\n  {\r\n    handleClose(null)\r\n  }\r\n  \r\n  const initValues = {\r\n    notify_planq_list: false,\r\n    planq_num_of_cases_per_page: 10,\r\n    qalist_num_of_cases_per_page: 10,\r\n    notify_qa_new: false,\r\n    notify_qa_completed_all: false,\r\n    notify_aria_rx_change: false,\r\n    notify_aria_plan_change: false,\r\n    notify_aria_structure_change:false,\r\n    notify_for_all_patients:false,\r\n    planner: false,\r\n    doctor: false,\r\n    aria_userid: \"\",\r\n    my_machines: (enumList)?enumList.machine_list.join(','):'' \r\n  }\r\n\r\n  const [settings, setSettings] = useState(initValues);\r\n  const [dirty, setDirty] = useState(false);\r\n\r\n  \r\n  const handleChange = (e) =>{\r\n\r\n    if(e.target.type === \"checkbox\")\r\n    {\r\n        setSettings({...settings, [e.target.name]:e.target.checked})\r\n    }\r\n    else\r\n    {\r\n        setSettings({...settings, [e.target.name]:e.target.value})\r\n    }\r\n\r\n    setDirty(true);\r\n  }\r\n\r\n\r\n  ////////////////////////\r\n  // fetch user\r\n  const fetchData = useCallback(async () => {\r\n\r\n    console.log('UserSettingsDlg - fetchList()')\r\n\r\n    if(!loggedIn())\r\n    {\r\n        console.log('fetchData -> User not logged in. Returing....')\r\n        return;\r\n    }\r\n\r\n    const dp = new UserDataProvider(props.user.token);\r\n    const res = await dp.getUserByUserId(props.user.userid);\r\n    const user = await res.json();\r\n\r\n    if(user.settings)\r\n    {\r\n      // overwrite the current settings with the user settings\r\n\r\n      // if user has no machine settings\r\n      if(!user.settings.my_machines || user.settings.my_machines.trim()===\"\")\r\n        if(enumList)\r\n          user.settings.my_machines = enumList.machine_list.join(',')\r\n\r\n      setSettings({...settings, ...user.settings})\r\n    }\r\n\r\n    setDirty(false);\r\n\r\n  },[user, open]) // fetchData\r\n\r\n  useEffect(() => {\r\n    console.log('UserSettingsDlg-->useEffect()')\r\n    fetchData();\r\n  }, [open, user, fetchData]); \r\n\r\n  const [openMachineSelectorDlg, setOpenMachineSelectorDlg] = useState(false);\r\n  const handleMachineSelectorDlgClose = (selected)=>\r\n  {\r\n    \r\n    if(selected) {\r\n      const machines =  selected.join(',');\r\n\r\n      setSettings({...settings, my_machines: machines})\r\n      setDirty(true);\r\n    }\r\n\r\n    // close dlg\r\n    setOpenMachineSelectorDlg(false)\r\n  }\r\n  // let my_machines = [];\r\n  // if(!settings.my_machines || !settings.my_machines.trim() ==\"\") // if not defined, user is by defualt insterted in all machines.\r\n  // {\r\n  //   if(enumList)\r\n  //     my_machines = enumList.machine_list.join(',');\r\n  // }  \r\n  \r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCancel} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Use Settings\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleApply} disabled={!dirty}>\r\n                Apply\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleCancel}>\r\n                Cancel\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n\r\n<div className='user-settings-content'>\r\n\r\n      {/* About Me */}\r\n      <div className='card'>\r\n        <div className='card-title'>About Me</div>\r\n        <div className='card-content'>\r\n\r\n         <div className='user-settings-item-wrapper'>\r\n            My Email: {user.email}\r\n         </div>\r\n         <div className='user-settings-item-wrapper'>\r\n            My Name: {user.name}\r\n          </div>\r\n          <div className='item-helper-text'>\r\n             (If the email/name above is not correct, please contact the administrator)\r\n          </div>\r\n\r\n            {/* I am a planner */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>I am a planner</label>\r\n              <Switch\r\n                  name=\"planner\"\r\n                  checked={settings.planner}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n\r\n            </div>\r\n            {/* I am a doctor */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>I am a doctor</label>\r\n              <Switch\r\n                  name=\"doctor\"\r\n                  checked={settings.doctor}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n        {/* My Machines */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>My Machines</label>\r\n          <div className='item-input'>\r\n            <span>{settings.my_machines}</span>\r\n            <button onClick={()=>setOpenMachineSelectorDlg(true)}>...</button>\r\n          </div>\r\n        </div>\r\n        <div className='item-helper-text'>\r\n             (If blank, it means I am interested in all machines)\r\n        </div>\r\n        <CheckBoxSelectorDlg \r\n          open = {openMachineSelectorDlg}\r\n          handleClose = {handleMachineSelectorDlgClose}\r\n          title = \"Select Machines\"\r\n          list = {(enumList)?enumList.machine_list:[]}\r\n          selected = {settings.my_machines.split(',')}\r\n        />\r\n\r\n\r\n\r\n         </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n      {/* PlanQ */}\r\n      <div className='card'>\r\n        <div className='card-title'>PlanQ</div>\r\n        <div className='card-content'>\r\n            \r\n            {/* Daily PlanQ Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Send me PlanQ list every morning</label>\r\n              <Switch\r\n                  name=\"notify_planq_list\"\r\n                  checked={settings.notify_planq_list}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            {/* Num of items per page */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Number of cases per page</label>\r\n              <input \r\n                name='planq_num_of_cases_per_page'\r\n                value={settings.planq_num_of_cases_per_page}\r\n                className='item-input'\r\n                onChange = {handleChange}\r\n              />\r\n            </div>\r\n            \r\n            \r\n\r\n          </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n{/* QA */}\r\n<div className='card'>\r\n        <div className='card-title'>QA</div>\r\n        <div className='card-content'>\r\n            \r\n            {/* Notify me for new QA cases */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for all new QA creations</label>\r\n              <Switch\r\n                  name=\"notify_qa_new\"\r\n                  checked={settings.notify_qa_new}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n             {/* Notify me for all completed QA cases */}\r\n             <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for all QA completions</label>\r\n              <Switch\r\n                  name=\"notify_qa_completed_all\"\r\n                  checked={settings.notify_qa_completed_all}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            {/* Num of items per page */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Number of QA items per page</label>\r\n              <input \r\n                name='qalist_num_of_cases_per_page'\r\n                value={settings.qalist_num_of_cases_per_page}\r\n                className='item-input'\r\n                onChange = {handleChange}\r\n              />\r\n            </div>\r\n\r\n          </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n    {/* ARIA  */}\r\n    <div className='card'>\r\n        <div className='card-title'>ARIA</div>\r\n        <div className='card-content'>\r\n\r\n        {/* Aria User Id */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>My Aria User Id</label>\r\n          <input \r\n            name='aria_userid'\r\n            value={settings.aria_userid}\r\n            className='item-input'\r\n            onChange = {handleChange}\r\n          />\r\n        </div>\r\n        <div className='item-helper-text'>\r\n             (If ARIA User Id is not entered or incorrect, no ARIA notifiation will be sent)\r\n        </div>        \r\n\r\n          {/* Aria Prescrition (New & status change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Prescription</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_rx_change\"\r\n                  checked={settings.notify_aria_rx_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n          {/* Plan Status Change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Plan</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_plan_change\"\r\n                  checked={settings.notify_aria_plan_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n          {/* Structure Status Change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Structure</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_structure_change\"\r\n                  checked={settings.notify_aria_structure_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n        {/* All Patients */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>Notify me for the changes in <u>all monitored patients</u></label>\r\n          <Switch\r\n                  name=\"notify_for_all_patients\"\r\n                  checked={settings.notify_for_all_patients}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          <div className='item-helper-text'>\r\n            (Monitored patients are those in the PlanQ with its newstart date is today or later)\r\n            </div>\r\n        </div>\r\n\r\n\r\n        </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n\r\n        <Divider/> \r\n\r\n</div>\r\n\r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Filters from './Filters'\r\nimport SimSchedule from './SimSchedule';\r\nimport Login from '../users/Login'\r\nimport logger from '../helpers/logger'\r\n\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n//import CashedIcon from '@material-ui/icons/Cashed';\r\n\r\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport QaListDlg from './QAListDlg'\r\nimport UserSettingsDlg from '../users/UserSettingsDlg'\r\nimport UserDataProvider from '../providers/UserDataProvider'\r\nimport './Header.css'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n      //flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: 2,\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  })); // classes\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})(props => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuItem = withStyles(theme => ({\r\n  root: {\r\n    // '&:focus': {\r\n    //   backgroundColor: theme.palette.primary.main,\r\n    //   '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n    //     color: theme.palette.common.white,\r\n    //   },\r\n    // },\r\n  },\r\n}))(MenuItem);\r\n\r\n\r\n  export default function Header(props){\r\n   \r\n    logger.log('Header()');\r\n\r\n    const classes = useStyles()\r\n\r\n    const {user, update_planlist, setUser, set_filter, enumList} = props;\r\n\r\n    //console.log('Header.js props.user===>', props.user);\r\n\r\n    const isLoggedIn = ()=>{\r\n      return (user && user.userid)?true:false;\r\n    };\r\n\r\n    /////////////////////////////\r\n    // filter dialog open/close\r\n    const [filterOpen, setFilterOpen] = useState(false);\r\n    const handleFilterOpen = ()=>{\r\n      setFilterOpen(true)\r\n    }\r\n    const handleFilterClose = (filter)=> {\r\n      \r\n      if(filter) // apply clicked\r\n      {\r\n        set_filter(filter)\r\n      }\r\n      \r\n      // close dialog\r\n      setFilterOpen(false)\r\n    }\r\n\r\n    const handleRefresh = ()=>{\r\n      // console.log('handleRefresh()')\r\n      update_planlist();\r\n    }\r\n\r\n    /////////////////////////////\r\n    // sim schedule dialog open/close\r\n    const [simScheduleOpen, setSimScheduleOpen] = useState(false);\r\n    const handleSimScheduleOpen = ()=>{\r\n      setSimScheduleOpen(true)\r\n    }\r\n    const handleSimScheduleClose = ()=> {\r\n      setSimScheduleOpen(false)\r\n    }\r\n\r\n\r\n    /////////////////////////////\r\n    // qaList dialog open/close\r\n    const [qaListDlgOpen, setQaListDlgOpen] = useState(false);\r\n    const handleQaListDlgOpen = ()=>{\r\n      setQaListDlgOpen(true)\r\n    }\r\n    const handleQaListDlgClose = ()=> {\r\n      setQaListDlgOpen(false)\r\n      handleMenuClose();\r\n    }\r\n\r\n    /////////////////////////////\r\n    // login dialog open/close\r\n    const [loginOpen, setLoginOpen] = useState(false);\r\n    const handleLoginOpen = ()=>{\r\n      setLoginOpen(true)\r\n    }\r\n    const handleLoginClose = ()=> {\r\n      setLoginOpen(false)\r\n    }\r\n\r\n    const handleLogout = ()=> {\r\n      console.log('Logout!')\r\n      setUser({});\r\n    }\r\n\r\n    /////////\r\n    // Menu\r\n    const [menuAnchorElement, setMenuAnchorElement] = React.useState(null);\r\n    const handleMenuClick = (e)=>{\r\n      setMenuAnchorElement(e.currentTarget);\r\n    }\r\n    const handleMenuClose = ()=>{\r\n      setMenuAnchorElement(null);\r\n    }\r\n\r\n\r\n    const handleAddCase = ()=> {\r\n      console.log('add a case');\r\n      props.onclick_addplan();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const handleSendListToMe = ()=> {\r\n      console.log('email list to me');\r\n      props.onclick_email_planq_list_to_me();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const handleOpenSimulationSchedule = ()=> {\r\n      handleSimScheduleOpen();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const update_user_settings_to_db = (user)=>{ \r\n      console.log('updating user settings============>', user)\r\n      const dp = new UserDataProvider(user.token);\r\n      dp.updateUser({\r\n        userid: user.userid,\r\n        settings: user.settings\r\n      })\r\n      .then(data=>{\r\n        //console.log('User updated', data)\r\n      })\r\n      .catch(err=>{\r\n        console.error(err);\r\n      })\r\n    }\r\n\r\n    const [openUserSettingsDlg, setOpenUserSettingsDlg] = useState(false);\r\n    const handleUserSettingsDlgClose = (settings)=>{\r\n\r\n      //console.log('handleUserSettingsDlgClose')\r\n      if(settings) // apply clicked\r\n      {\r\n        user.settings = {...user.settings, ...settings}\r\n        update_user_settings_to_db(user);\r\n        setUser(user)\r\n      }\r\n              \r\n      setOpenUserSettingsDlg(false);\r\n    }\r\n\r\n    // update the search keyword when the user changes\r\n    useEffect(()=>{\r\n      const searchKeyword_init = (user && user.settings && user.settings.planq_search_keyword)?user.settings.planq_search_keyword:\"\";\r\n      // consolo\r\n      setSearchKeyword(searchKeyword_init);\r\n    }, [user])\r\n\r\n     const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n     const handleSearch = ()=>{\r\n       \r\n      // save to user settings.\r\n      user.settings.planq_search_keyword = searchKeyword;\r\n      update_user_settings_to_db(user);\r\n      setUser(user)\r\n      \r\n       console.log('handleSearch===============>')\r\n     }\r\n   \r\n\r\n    return (\r\n      \r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton \r\n              edge=\"start\" \r\n              className={classes.menuButton} \r\n              color=\"inherit\" \r\n              aria-label=\"menu\"\r\n              onClick={handleMenuClick}\r\n              disabled = {!isLoggedIn()}\r\n              >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            {/* Dropdown Menu */}\r\n            <StyledMenu\r\n              id=\"customized-menu\"\r\n              anchorEl={menuAnchorElement}\r\n              keepMounted\r\n              open={Boolean(menuAnchorElement)}\r\n              onClose={handleMenuClose}\r\n            >\r\n\r\n              {/* Add Case Menu */}\r\n              <StyledMenuItem onClick={handleAddCase}>\r\n                <ListItemIcon>\r\n                  <AddIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Add Case\" />\r\n              </StyledMenuItem>\r\n\r\n              <StyledMenuItem onClick={handleSendListToMe}>\r\n                <ListItemIcon>\r\n                  <SendIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Email List to Me\" />\r\n              </StyledMenuItem>\r\n\r\n              <StyledMenuItem onClick={handleOpenSimulationSchedule}>\r\n                <ListItemIcon>\r\n                  <DraftsIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Sim List\" />\r\n              </StyledMenuItem>\r\n              <SimSchedule\r\n                open = {simScheduleOpen}\r\n                handleClose = {handleSimScheduleClose}\r\n                addplan = {props.addplan}\r\n                user = {props.user}\r\n                enumList = {enumList}\r\n              />\r\n\r\n              {/* QA List Menu */}\r\n              <StyledMenuItem onClick={handleQaListDlgOpen}>\r\n                <ListItemIcon>\r\n                  <GpsFixedIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"QA List\" />\r\n              </StyledMenuItem>\r\n \r\n              {/* QA List Dlg */}\r\n              <QaListDlg\r\n                open = {qaListDlgOpen}\r\n                handleClose = {handleQaListDlgClose}\r\n                user = {user}\r\n              />\r\n\r\n            </StyledMenu>\r\n            \r\n\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              PlanQ\r\n            </Typography>\r\n\r\n            {/* Search */}\r\n            <div className='search-wriapper'>\r\n              <input \r\n                className='search-box'\r\n                placeholder='' \r\n                value={searchKeyword}\r\n                onChange={(e)=>{setSearchKeyword(e.target.value)}}\r\n                disabled = {!isLoggedIn()}\r\n                />\r\n              <Button\r\n                color=\"inherit\"\r\n                onClick = {handleSearch}\r\n                disabled = {!isLoggedIn()}\r\n              >\r\n                Search\r\n              </Button> \r\n             </div>\r\n\r\n            {/* Add Case Button */}\r\n            <Button\r\n              color=\"inherit\"\r\n              onClick = {handleAddCase}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<AddIcon/>}\r\n            >\r\n              Add\r\n            </Button>\r\n\r\n              {/* Sim List Button */}\r\n              <Button\r\n              color=\"inherit\"\r\n              onClick = {handleOpenSimulationSchedule}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<CachedIcon/>}\r\n            >\r\n              Sim\r\n            </Button>\r\n\r\n            {/* QA List Button */}\r\n            <Button\r\n              // id=\"button_refresh\"\r\n              color=\"inherit\"\r\n              onClick = {handleQaListDlgOpen}\r\n              disabled = {!isLoggedIn()}\r\n              // startIcon={<CachedIcon/>}\r\n            >\r\n              QA\r\n            </Button>\r\n\r\n            {/* Filter Dialog */}\r\n            <Button \r\n              id=\"button_filter\"\r\n              color=\"inherit\"\r\n              onClick = {handleFilterOpen}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<SettingsEthernetIcon />}\r\n              >\r\n                FILTERS\r\n              </Button>\r\n              <Filters\r\n                open = {filterOpen}\r\n                handleClose = {handleFilterClose}\r\n                set_filter = {props.set_filter}\r\n                filter = {props.filter}\r\n              />\r\n\r\n            {/* Refresh Button */}\r\n            <Button\r\n              // id=\"button_refresh\"\r\n              color=\"inherit\"\r\n              onClick = {handleRefresh}\r\n              disabled = {!isLoggedIn()}\r\n              // startIcon={<CachedIcon/>}\r\n            >\r\n              REFRESH              \r\n            </Button>\r\n            \r\n\r\n            {/* Login/Logout Dialog */}\r\n            { (isLoggedIn())?(\r\n              <div>\r\n\r\n                 {/* Open User Settings Button */}\r\n                 <Button \r\n                    color=\"inherit\"\r\n                    onClick = {()=>{\r\n                      setOpenUserSettingsDlg(true)\r\n                    }}\r\n                    >\r\n                      Settings\r\n                </Button>\r\n\r\n                {/* Settings Diglog */}\r\n                <UserSettingsDlg\r\n                  open={openUserSettingsDlg}\r\n                  handleClose = {handleUserSettingsDlgClose}\r\n                  user = {user}\r\n                  enumList = {enumList}\r\n                />\r\n\r\n                {/* Logout Button */}\r\n                  <Button \r\n                    color=\"inherit\"\r\n                    onClick = {handleLogout}\r\n                    >\r\n                      LOGOUT[{props.user.userid}]\r\n                </Button>\r\n               \r\n              </div>):\r\n              (\r\n                <Button \r\n                  id=\"button_login\"\r\n                  color=\"inherit\"\r\n                  onClick = {handleLoginOpen}\r\n                  >\r\n                    LOGIN\r\n                </Button>)\r\n            }\r\n\r\n            <Login\r\n              loginOpen = {loginOpen}\r\n              handleLoginClose = {handleLoginClose}\r\n              user = {user}\r\n              setUser = {setUser}\r\n            />\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  } // function\r\n\r\n","import React, { Component } from 'react'\r\nimport { Paper, Typography } from '@material-ui/core'\r\n\r\nconst classes = {\r\n    root: {\r\n        margin: 0,\r\n        padding: 10,\r\n        textAlign: 'center'\r\n    }\r\n}\r\n\r\nexport class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <Paper style={classes.root}>\r\n                <Typography component=\"p\">\r\n                    Confidential. Version 1.0.0 (May 2020)\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport MuiExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport MuiExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport './AriaActivityItem.css';\r\n\r\n  const ExpansionPanel = withStyles({\r\n    root: {\r\n      border: '1px solid rgba(0, 0, 0, .125)',\r\n      boxShadow: 'none',\r\n      '&:not(:last-child)': {\r\n        borderBottom: 0,\r\n      },\r\n      '&:before': {\r\n        display: 'none',\r\n      },\r\n      '&$expanded': {\r\n        margin: 'auto',\r\n      },\r\n    },\r\n    expanded: {},\r\n  })(MuiExpansionPanel);\r\n  \r\n  const ExpansionPanelSummary = withStyles({\r\n    root: {\r\n      backgroundColor: 'rgba(0, 0, 0, .03)',\r\n      borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n      marginBottom: -1,\r\n      minHeight: 56,\r\n      '&$expanded': {\r\n        minHeight: 56,\r\n      },\r\n    },\r\n    content: {\r\n      '&$expanded': {\r\n        margin: '12px 0',\r\n      },\r\n    },\r\n    expanded: {},\r\n  })(MuiExpansionPanelSummary);\r\n  \r\n  const ExpansionPanelDetails = withStyles(theme => ({\r\n    root: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }))(MuiExpansionPanelDetails);\r\n\r\nexport default function AriaActivityItem(props)\r\n{\r\n    \r\n    const [expanded, setExpanded] = React.useState('');\r\n\r\n    const handleChange = panel => (event, newExpanded) => {\r\n      setExpanded(newExpanded ? panel : false);\r\n    };\r\n\r\n    const log = props.log;\r\n\r\n    ///////////\r\n    // createdAt\r\n    // const dt = new DT();\r\n    // const on = new Date(log.createdAt);\r\n    //const createdAtString = dt.MM_DD_YYYY(on)+' '+ dt.HH_MM_AMPM(on);\r\n\r\n    //////////////////////\r\n    // Msg List\r\n    const msg1 =  log.msg.trim();\r\n    const msg2 = msg1.substring(1, msg1.length-1);\r\n    const msgList = msg2.split(',');\r\n    \r\n    //////////////\r\n    // find whos\r\n    let whos = [];\r\n    msgList.forEach(msg => {\r\n      const elms1 = msg.split(' by ');\r\n      if(elms1.length===2)\r\n      {\r\n        const who = elms1[1].split(' ')[0];\r\n        whos.push(who);\r\n      }\r\n    });\r\n    const whos_unique_string = [...new Set(whos)].join('/'); \r\n\r\n    ///////////////////////\r\n    // find action times\r\n    let times = [];\r\n    msgList.forEach(msg => {\r\n       const elms1 = msg.split(' at ');\r\n       if(elms1.length===2)\r\n       {\r\n         const time = elms1[1].trim();\r\n         times.push(time);\r\n       }\r\n     });\r\n     const time_unique_string = [...new Set(times)].join('/'); \r\n\r\n\r\n    ////////////////////\r\n    // find new status\r\n    let new_status_list = [];\r\n    if(log.title.toLowerCase().includes('status changed'))\r\n    {\r\n      msgList.forEach(msg => {\r\n        const elms1 = msg.split('->');\r\n        if(elms1.length === 2)\r\n        {\r\n          const new_status = elms1[1].trim().split(' ')[0];\r\n          new_status_list.push(new_status);\r\n        } \r\n      });\r\n    }\r\n    const new_status_unique_string = [...new Set(new_status_list)].join('/'); \r\n\r\n    let title2 = \"\";\r\n    if(new_status_unique_string.length===0){\r\n      title2 = [whos_unique_string, time_unique_string].join(',');\r\n    }\r\n    else{\r\n      title2 = [].join(',');\r\n    }\r\n\r\n    return(\r\n      <ExpansionPanel square expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n      <ExpansionPanelSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\r\n        <ul className=\"log-heading\">\r\n          <li className=\"log-title\">{log.title}</li> \r\n          <li className=\"log-who\">{whos_unique_string}</li>\r\n          <li className=\"log-status\">{new_status_unique_string}</li>\r\n          <li className=\"log-time\">{time_unique_string}</li>\r\n        </ul>  \r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n          <ul>\r\n          {\r\n             msgList.map(str=>(<li key={uuidv4()}>{str}</li>))\r\n          }\r\n          </ul>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n    ); // return\r\n}","import config from '../config'\r\n\r\nexport default class LogDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/logs';\r\n        this.token = token;\r\n    }\r\n\r\n    getLogsOfObject(object_id){\r\n       \r\n        const url_query = `${this.url}/object_id/${object_id}?token=${this.token}`;\r\n        \r\n       // console.log('url_query',url_query);\r\n        return fetch(url_query);\r\n    }\r\n\r\n    addLogOfObject(object_id, msg) {\r\n            \r\n        const url_query = `${this.url}/object_id/${object_id}?token=${this.token}`;\r\n\r\n           return fetch(url_query, {\r\n             method: 'POST',\r\n             headers: {\r\n               'Content-Type': 'application/json'\r\n               // 'Content-Type': 'application/x-www-form-urlencoded',\r\n             },\r\n             body: msg\r\n           });\r\n         }\r\n\r\n\r\n} // class\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AriaActivityItem from './AriaActivityItem'\r\nimport LogDataProvider from '../providers/LogDataProvider'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport logger from '../helpers/logger'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n   list:{\r\n    width: '100%',\r\n    //maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n   }, \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nexport default function AriaActivityList(props)\r\n{\r\n\r\n  const {open, handleClose} = props;\r\n\r\n  logger.log('AriaActivityList()')\r\n  const classes = useStyles()\r\n\r\n  const object_id = props.object_id;\r\n\r\n  ///////////////\r\n  // Log List\r\n  const [list, setList] = React.useState([]);\r\n    \r\n  const fetchList = async () => {\r\n\r\n    logger.log('AriaActivityList()->fetchList()->props.user', props.user)\r\n    \r\n    const dp = new LogDataProvider(props.user.token);\r\n    const res = await dp.getLogsOfObject(props.object_id);\r\n    const data = await res.json();\r\n    setList(data);\r\n\r\n  } // fetchList\r\n\r\n  useEffect(() => {\r\n     fetchList();\r\n  }, [object_id, open]); // re-run only if object_id changes (this will not happen)\r\n\r\n  const handleRefresh = ()=>{\r\n    fetchList();\r\n  }\r\n\r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Activities\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        <div>\r\n        { \r\n            list.map(item=>(<AriaActivityItem key={item._id} log={item}/>))\r\n        }\r\n        </div>\r\n        \r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\nimport DT from '../helpers/datetime';\r\n\r\nconst classes = {\r\n    root:{\r\n        width: '100%',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n    },\r\n    LogTextField:{\r\n        width: '100%'\r\n    },\r\n    logToolbar: {\r\n        width: '100%',\r\n        borderWidth: 1,\r\n    },\r\n    listitem:{\r\n        margin:0,\r\n        padding:0,\r\n    }\r\n  };\r\n  \r\n\r\nexport class PlanLogList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n       \r\n        this.state = {input_text:\"\"}\r\n    }\r\n\r\n    change_handler = (e)=>{\r\n        this.setState({input_text: e.target.value});\r\n    }\r\n\r\n    keyup = (e)=>{\r\n        if(e.keyCode===13) // enter key\r\n        {\r\n            const msg = e.target.value;\r\n            this.props.addlog(this.props.planitem, msg);\r\n\r\n            // clear the target\r\n            this.setState({input_text:\"\"}); // clear input\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let dt = new DT();\r\n\r\n        return (\r\n            <div style={classes.root}>\r\n\r\n                        <TextField\r\n                            fullWidth={true}\r\n                            style={classes.LogTextField}\r\n                            label=\"Log\" \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.input_text}\r\n                            placeholder=\"Type your log & hit Enter key\"\r\n                            InputLabelProps={{shrink:true}}\r\n                            onChange = {this.change_handler}\r\n                            onKeyUp = {this.keyup}\r\n                            />\r\n\r\n\r\n            {/* Log List */}\r\n            <div style={classes.list}>\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    \r\n                    {\r\n                        this.props.planitem.plan.logs && this.props.planitem.plan.logs.map(log=>\r\n                        (<ListItem button style={classes.listitem} key={log.at}> \r\n                           <ListItemText primary={`[${dt.MM_DD(new Date(log.at))}] ${log.msg}`} /> \r\n                           <Button onClick={()=>{this.props.removelog(this.props.planitem, log)}}>X</Button>\r\n                        </ListItem>)\r\n                        )\r\n                    }\r\n\r\n                </List>\r\n            </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlanLogList\r\n","import config from '../config'\r\n\r\nexport default class PlanSetupDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/aria/plansetups';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllPlanSetupsPerPatientId(PatientId){\r\n       \r\n\r\n        const url_query = `${this.url}/PlanSetupsPerPatientIdAll/${PatientId}?token=${this.token}`;\r\n        \r\n        // console.log('url_query',url_query);\r\n        // console.log('PatientId=', PatientId);\r\n\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n} // class\r\n","import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PlanSetupDataProvider from '../providers/PlanSetupDataProvider'\r\nimport './PlanSetupSelector.css'\r\n\r\n\r\nexport default function PlanSetupSelector(props){\r\n\r\n    const {open, handleClose, user, PatientId} = props;\r\n\r\n    const [list, setList] = useState([])\r\n\r\n    const [selected, setSelected] = useState(null);\r\n    const handleSelectedChange = (event) => {\r\n        setSelected(event.target.value);\r\n      };\r\n\r\n      const handleClickOk =()=>{\r\n        handleClose(selected)\r\n      }\r\n\r\n      const handleClickCancel =()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    ////////////////////////\r\n    // is user logged in?\r\n    const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n        }\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect()');\r\n\r\n        fetchList(PatientId);\r\n\r\n    }, [PatientId, open]);\r\n\r\n\r\n    const fetchList = async (PatientId)=>{\r\n\r\n        console.log('PlanSetupSelector - fetchList()')\r\n\r\n        if(!loggedIn())\r\n        {\r\n            console.log('fetchList -> User not logged in. Returing....')\r\n            return;\r\n        }\r\n\r\n        const dp = new PlanSetupDataProvider(props.user.token);\r\n        const res = await dp.getAllPlanSetupsPerPatientId(PatientId);\r\n        const list = await res.json();\r\n\r\n        setList(list)\r\n    }\r\n\r\n    return(\r\n        <Dialog\r\n          open={open}\r\n          className=\"plan-setup-selector-dlg\"\r\n        >\r\n        <DialogTitle className=\"plan-setup-selector-dlg-title\">Select Plan</DialogTitle>\r\n        { <DialogContent>\r\n\r\n            <FormControl component=\"fieldset\">\r\n            {/* <FormLabel component=\"legend\">Gender</FormLabel> */}\r\n            <RadioGroup className=\"plansetupselector-radiogroup\" aria-label=\"plansetuplist\" name=\"plansetuplist\" value={selected} onChange={handleSelectedChange} >\r\n                {\r\n                    list.map(ps=>{ \r\n                        const label = ps.CourseId + '/'+ps.PlanSetupId;\r\n                        return (<FormControlLabel key={uuidv4()} value={label} control={<Radio/>} label={label} />)\r\n                        }) // map\r\n                }\r\n            </RadioGroup>\r\n            </FormControl>\r\n\r\n        </DialogContent>\r\n         }\r\n        <DialogActions>\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n          </Button>\r\n          <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        ) // return\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PlanSetupSelector from '../helpers/PlanSetupSelector'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\n\r\nimport './AddQADlg.css'\r\n\r\nexport default function AddQADlg(props){\r\n\r\n    const {open, handleClose, user, PatientId} = props;\r\n\r\n    ////////////\r\n    // qa type\r\n    const list = [\"PD\", \"MapCheck\", \"Film\"];\r\n    const [type, setType] = React.useState(list[0]);\r\n    const handleTypeChange = (event) => {\r\n        setType(event.target.value);\r\n      };\r\n\r\n    ///////////\r\n    // plan \r\n    const [plan, setPlan] = React.useState(\"\");\r\n    \r\n    /////////////////////////////\r\n    // plansetup selector dialog\r\n    const [openPlanSetupSelectorDlg, setOpenPlanSetupSelectorDlg] = useState(false);\r\n    const handlePlanSetupSelectorDlgClose = (planname)=>{\r\n        \r\n        console.log('handlePlanSetupSelectorDlgClose()', planname)\r\n\r\n        // set data (plan name) if Ok clicked\r\n        if(planname){\r\n            setPlan(planname);            \r\n        }\r\n\r\n        // close dlg\r\n        setOpenPlanSetupSelectorDlg(false);\r\n    }\r\n\r\n    ////////////////////\r\n    // Ok/Canel Buttons\r\n    const handleClickOk = ()=>{\r\n        \r\n        // check if a plan has been selected.\r\n        if(plan === \"\")\r\n        {\r\n            showMsg(\"Error\", \"Please select a QA plan\", true)\r\n            return;\r\n        }\r\n        \r\n        handleClose({\r\n            type: type,\r\n            plan: plan})\r\n    }\r\n    \r\n    const handleClickCancel = ()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    ///////////////\r\n    // msgbox\r\n    const [msgBox, setMsgBox] = useState({\r\n            open: false,\r\n            title: \"\",\r\n            msg: \"\",\r\n            error: false\r\n        })\r\n    const showMsg = (title, msg, error=false)=>{\r\n        setMsgBox({\r\n            open: true,\r\n            title: title,\r\n            msg: msg,\r\n            error: error\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <Dialog\r\n        open={open}\r\n        className = 'add-qa-dlg'\r\n      >\r\n        <DialogTitle className='add-qa-dlg-title'>New QA</DialogTitle>\r\n        <DialogContent>\r\n        <FormControl component=\"fieldset\">\r\n\r\n            {/* Type */}\r\n            <label className='qa-type-label'> QA Type:</label>\r\n            <RadioGroup \r\n                className='radiogroup-qa-type'\r\n                value={type} \r\n                onChange={handleTypeChange}>\r\n                {\r\n                    list.map(label=>(<FormControlLabel value={label} key={uuidv4()} control={<Radio />} label={label} />))\r\n                }\r\n            </RadioGroup>\r\n\r\n            {/* Plan Name */}\r\n            <label className='qa-plan-label'>QA Plan:</label>\r\n            <TextField\r\n                //id=\"textfield_plan_name\"\r\n                className=\"text-field-qa-plan-name\"\r\n                // label=\"Plan Name\"\r\n                value={plan}\r\n                InputLabelProps={{shrink:true}}\r\n                // onChange = {(e)=>{props.change_handler(props.planitem, 'plan_name', e.target.value)}}                       \r\n                onClick = {()=>{\r\n                    setOpenPlanSetupSelectorDlg(true);\r\n                }}\r\n                helperText=\"Click to select a QA plan\"\r\n            />\r\n            <PlanSetupSelector\r\n                open = {openPlanSetupSelectorDlg}\r\n                handleClose = {handlePlanSetupSelectorDlgClose}\r\n                user = {user}\r\n                PatientId = {PatientId}\r\n            />\r\n\r\n            </FormControl>\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n        </Button>\r\n\r\n        <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n        </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <SimpleDlg \r\n        open = {msgBox.open}\r\n        handleClose = {()=> setMsgBox({open:false, title:\"\", msg:\"\", error:false})}\r\n        title = {msgBox.title}\r\n        msg = {msgBox.msg}\r\n        buttons = 'Ok'\r\n        error = {msgBox.error}\r\n      />\r\n\r\n\r\n\r\n      </div>\r\n        ) // return\r\n}","import React, { useReducer, useEffect } from 'react';\r\nimport QaDataProvider from '../providers/QaDataProvider';\r\n\r\nconst QaDataContext = React.createContext();\r\n\r\nfunction qaReducer(qaItemList, action){\r\n\r\n  const {type, data, user} = action;\r\n\r\n  switch(type){\r\n    case 'set-list':\r\n      return data;  \r\n    case 'add-item':\r\n        console.log('add-item', data);\r\n\r\n        if(!user || !user.token)      return;\r\n\r\n        // add to db\r\n        const dp = new QaDataProvider(user.token);\r\n        dp.addQA(data)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n            let qaitem = {\r\n              qa: ret_data,\r\n              dirty: false\r\n            }\r\n\r\n            // console.log('qaItem', qaitem);\r\n\r\n            const ret = [...qaItemList, qaitem];\r\n\r\n            // console.log('qaReducer->add-item->qaItemList', qaItemList)\r\n            // console.log('qaReducer->add-item->ret', ret)\r\n            return ret;\r\n          })\r\n          .catch(err=>console.log(err));\r\n\r\n        break;\r\n    default:\r\n  }\r\n}\r\n\r\n\r\nconst QaDataContextProvider = (props) => {\r\n  \r\n    const {user} = props;\r\n\r\n    const [qaList, qaListDispatch] = useReducer(qaReducer,[]);\r\n\r\n    const fetchList =(user)=>{\r\n  \r\n      if(!user || !user.token) return;\r\n\r\n      const dp = new QaDataProvider(user.token);\r\n        dp.getQAs()\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n              // console.log('QaDataContextProvider->fetchList->ret_data', ret_data);\r\n\r\n              const qaItemList = ret_data.map(qa=>{\r\n                return {\r\n                        qa:qa,\r\n                        dirty:false }\r\n              });\r\n\r\n              qaListDispatch({type:'set-list', data:qaItemList})\r\n          })\r\n          .catch(err=>console.log(err));\r\n  \r\n    }\r\n        \r\n    useEffect(()=>{\r\n      fetchList(user);\r\n    },[user]); // useEffect\r\n    \r\n  \r\n    return (\r\n    <QaDataContext.Provider value={{qaList, qaListDispatch}}>\r\n      {props.children}\r\n    </QaDataContext.Provider>\r\n  );\r\n}\r\n\r\nexport {QaDataContext, QaDataContextProvider};","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport './SimpleInputWithSearchListDlg.css'\r\n\r\nexport default function SimpleInputWithSearchListDlg({open, handleClose, title, initialValue, searchList}) {\r\n\r\n    const [value, setValue] = useState(initialValue);\r\n    const [matchedList, setMatchedList] = React.useState([]);\r\n\r\n    const handleChange = (e)=>{\r\n        const value = e.target.value;\r\n        setValue(value);\r\n\r\n        //  find the matching result\r\n        const list = searchList.filter(item=>item.toLowerCase().includes(value.toLowerCase()));\r\n        setMatchedList(list);\r\n    }\r\n\r\n    const handleItemClick = (e)=>{\r\n        console.log('item clicked', e.target);\r\n        \r\n        const clicked_value = e.target.innerText;\r\n\r\n        setValue(clicked_value)\r\n    }\r\n   \r\n  return (\r\n      <Dialog\r\n        open={open}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n            {title}\r\n        </DialogTitle>\r\n        \r\n        <DialogContent>\r\n            \r\n            <div className=\"search-wrapper\">\r\n                <div className=\"search-input-wrapper\">\r\n                    <input\r\n                        className=\"search-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"matched-list\">\r\n                    {matchedList.map(item => (\r\n                     <div key={item} onClick={handleItemClick}>{item}</div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n        </DialogContent>\r\n        \r\n        <DialogActions>\r\n        <Button onClick={()=>{handleClose(value)}} color=\"primary\" autoFocus>\r\n            Ok\r\n          </Button>\r\n          <Button onClick={()=>{handleClose(null)}} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import config from '../config'\r\n\r\nexport default class EmailServiceProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/email';\r\n        this.token = token;\r\n    }\r\n\r\n    send(email) {\r\n        console.log('sending an email', email);\r\n        return fetch(`${this.url}?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(email)\r\n        });\r\n      }\r\n\r\n    send_dailydigest()\r\n    {\r\n      //console.log('sending an email', email);\r\n      return fetch(`${this.url}/dailydigest?token=${this.token}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: JSON.stringify({})\r\n      });\r\n\r\n    }\r\n\r\n     \r\n\r\n\r\n      \r\n    \r\n} // class\r\n","import 'date-fns';\r\nimport React, {useState, useContext} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport DT from '../helpers/dt';\r\nimport AriaActivityList from './AriaActivityList'\r\nimport PlanNoteList from './PlanNoteList';\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\nimport PlanSetupSelector from '../helpers/PlanSetupSelector'\r\nimport AddQADlg from './AddQADlg'\r\nimport {QaDataContext} from '../data/QaDataContext' \r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './Plan.css';\r\nimport SimpleInputWithSearchListDlg from '../helpers/SimpleInputWithSearchListDlg'\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport EmailServiceProvider from '../providers/EmailServiceProvider';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction initial_from_name(name)\r\n{\r\n    if(!name.includes('.'))\r\n        return name;\r\n\r\n    const elms = name.split('.');\r\n    const init = elms[0][0]+elms[1][0];\r\n    return init.toUpperCase();    \r\n}\r\n\r\n\r\nfunction initial_list_string_from_name_email_list_string(name_email_list_string)\r\n{\r\n    //console.log('name_email_list_string===>', name_email_list_string )\r\n    if(!name_email_list_string || name_email_list_string.trim()===\"\")\r\n        return \"\";\r\n\r\n    const name_email_list = name_email_list_string.split(',').filter(name_email=>name_email.trim()!==\"\");\r\n\r\n    // remove empty\r\n\r\n    const name_list = name_email_list.map(name_email=>name_email.split('|')[0])\r\n    return name_list.map(name=>initial_from_name(name)).join(',')\r\n}\r\n\r\nfunction remove_empty_string(string_list){\r\n    return string_list.filter(str=>str.trim() !== \"\")\r\n}\r\nconst useStyles = makeStyles( theme =>({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: 15,\r\n    },\r\n    expensionPanelSummary: {\r\n        backgroundColor: '#f1f1f1',\r\n        borderWidth:1,\r\n    },\r\n    PlanLogList:{\r\n        width: '100%',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        //maxWidth: 300,\r\n    }\r\n  }));\r\n  \r\nfunction email_plan(plan, user)\r\n{\r\n    console.log('plan====>', plan)\r\n\r\n    const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\r\n    const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\r\n\r\n    const newstart = (newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\";\r\n    const case_name = plan.case_name;\r\n    const status = plan.status;\r\n    const doctors = plan.doctors.split(',').map(d=>d.split('|')[0]).join('/');\r\n    const planners = plan.planners.split(',').map(p=>p.split('|')[0]).join('/');\r\n    const tx_site = plan.tx_site;\r\n    const modality = plan.modality;\r\n    const machine = plan.machine;\r\n    const note = plan.note\r\n    \r\n    const lines = [];\r\n    lines.push('Patient = ' + case_name)\r\n    lines.push('Start Date = ' + newstart)\r\n    lines.push('Status = ' + status)\r\n    lines.push('Doctors=' + doctors)\r\n    lines.push('Planners = ' +planners)\r\n    lines.push('Tx Site = ' + tx_site)\r\n    lines.push('Modality = ' + modality)\r\n    lines.push('Machine = ' + machine)\r\n    lines.push('Notes = ' + note)\r\n    \r\n    // const line = `${newstart}\\t${case_name}\\t${status}\\t${doctors}\\t${planners}\\t${tx_site}`\r\n    const msg = lines.join('\\n')\r\n\r\n    const mail = {\r\n        from: 'radonc.physics@stonybrookmedicine.edu', \r\n        to: user.email, // list of receivers\r\n        subject: case_name.split('-')[0], // Subject line\r\n        text: msg\r\n        //html: err\r\n    }\r\n\r\n    const esp = new EmailServiceProvider(user.token);\r\n    esp.send(mail);\r\n}\r\n\r\nexport default function Plan(props){\r\n\r\n    const classes = useStyles();\r\n\r\n    const {user, planitem, enumList} = props;\r\n\r\n    const {qaListDispatch} = useContext(QaDataContext);\r\n\r\n    /////////////////////////////\r\n    // local copy of the plan\r\n    const [plan, setPlan] = useState(planitem.plan);\r\n    const [dirty, setDirty] = useState(false);\r\n    const handlePlanChange = (e)=>{\r\n        setPlanProp(e.target.name, e.target.value);\r\n    }\r\n    const setPlanProp = (name, value)=>{\r\n        setPlan({...plan, [name]:value}) \r\n        setDirty(true);\r\n    }\r\n\r\n    //////////////////////\r\n    // expander state\r\n    const [expanded, setExpanded] = useState(false);\r\n    const toggleExpanded = () => {\r\n        setExpanded(!expanded)\r\n    }\r\n\r\n    ///////////////////////////\r\n    // ARIA Activities Dialog\r\n    const [ariaActivitiesOpen, setAriaActivitiesOpen] = useState(false);\r\n\r\n    /////////////////////////////\r\n    // auto log dialog open/close\r\n    const [deleteDlgOpen, setSimpleDlgOpen] = useState(false);\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // rough calculation - newstart - how many month away from now\r\n    // if more than 6 month, display as TBD in the line summary\r\n    const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\r\n    const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\r\n\r\n    /////////////////////////////\r\n    // plansetup selector dialog\r\n    const [openPlanSetupSelectorDlg, setOpenPlanSetupSelectorDlg] = useState(false);\r\n    const handlePlanSetupSelectorDlgClose = (result)=>{\r\n        // if okay clicked, set the result (plan name)\r\n        if(result){\r\n            setPlanProp(\"plan_name\", result)\r\n        }\r\n        setOpenPlanSetupSelectorDlg(false);\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Add QA Dlg\r\n    const [openAddQADlg, setOpenAddQADlg] = useState(false);\r\n    const handleAddQADlgClose = (data) =>{\r\n        \r\n        if(data){ // clicked OK\r\n            const qa = {\r\n                id: uuidv4(),\r\n                type: data.type,\r\n                plan: data.plan,\r\n                result: \"\",\r\n                requested_by: `${user.name}|${user.email}|${user.userid}`,\r\n                requested_on: new Date(),\r\n                completed_by:\"\",\r\n                completed_on: null,\r\n                due_on: new Date(plan.newstart),\r\n                plan_case_name: plan.case_name,\r\n                plan_case_id: plan._id,\r\n                machine: plan.machine,\r\n                notes:\"\"\r\n            }\r\n            qaListDispatch({type:'add-item', data:qa, user:user})\r\n        }\r\n        \r\n        // close the dlg\r\n        setOpenAddQADlg(false);\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Tx Site Dlg\r\n    const [openTxSiteDlg, setOpenTxSiteDlg] = useState(false);\r\n    const handleTxSiteDlgClose = (data) =>{\r\n        \r\n        // console.log('handleTxSiteDlgClose.data', data)\r\n\r\n        if(data) // Yes clicked\r\n        {\r\n            // set the value\r\n            setPlanProp('tx_site', data)\r\n        }\r\n\r\n        setOpenTxSiteDlg(false);\r\n    }\r\n\r\n    ////////////////////////\r\n    // highlight if my plan\r\n    const doctorsClassName = (plan && plan.doctors && user && user.email && plan.doctors.toLowerCase().includes(user.email.toLowerCase()))? \"doctors highlight\" : \"doctors\"\r\n    const plannersClassName = (plan && plan.planners && user && user.email && plan.planners.toLowerCase().includes(user.email.toLowerCase()))? \"planners highlight\" : \"doctors\"\r\n    \r\n    return (\r\n       <ExpansionPanel expanded={expanded} >\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls={plan._id+\"content\"}\r\n                id={plan._id+\"header\"}\r\n                className={classes.expensionPanelSummary}\r\n                onClick={toggleExpanded}\r\n            >\r\n                <ul className=\"heading\">\r\n                    <li className=\"newstart\">{(newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\"}</li>\r\n                    <li className=\"lastname\">{plan.case_name.split('-')[0]}</li>\r\n                    <li className=\"status\">{plan.status}</li>\r\n                    <li className= {doctorsClassName}>{initial_list_string_from_name_email_list_string(plan.doctors)}</li> \r\n                    <li className= {plannersClassName}>{initial_list_string_from_name_email_list_string(plan.planners)}</li>\r\n                    <li className=\"tx_site\">{plan.tx_site}</li>\r\n                    <li className=\"tx_modality\">{plan.modality}</li>\r\n                    <li className=\"tx_machine\">{plan.machine}</li>\r\n                    <li className=\"note\">{plan.note}</li>\r\n                </ul>                    \r\n\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n\r\n                <form className=\"plan-form\" noValidate>\r\n                    {/* Case Name */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-casename\"\r\n                        label=\"Case\"\r\n                        name=\"case_name\"\r\n                        value={plan.case_name}\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    {/* New Start */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        //id=\"textfield_new_start\"\r\n                        className=\"text-field-newstart\"\r\n                        type=\"datetime-local\"\r\n                        label=\"New Start\"\r\n                        name=\"newstart\"\r\n                        defaultValue={DT.YYYY_MM_DDTHH_MM(new Date(plan.newstart))} //\"2019-11-18T17:16\"\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    {/* Status */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        //id=\"select-plan-status\"\r\n                        className=\"text-field-plan-status\"\r\n                        select\r\n                        name=\"status\"\r\n                        label=\"Status\"\r\n                        value={plan.status}\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                        SelectProps={{native: true}}\r\n                        // helperText=\"Select Plan Status\"\r\n                        >\r\n                        <option key=\"status_not_selected\" value=\"\"></option>\r\n                        {\r\n                            (enumList && enumList.plan_status_list.map(status => (\r\n                            <option key={status} value={status}>\r\n                                {status}\r\n                            </option>\r\n                            )))\r\n                        }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n    \r\n                    {/* Plan Name */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-plan-name\"\r\n                        label=\"Plan Name\"\r\n                        value={plan.plan_name}\r\n                        InputLabelProps={{shrink:true}}\r\n                        onClick = {()=>{\r\n                            setOpenPlanSetupSelectorDlg(true);\r\n                        }}\r\n                    />\r\n                    </FormControl>\r\n                    <PlanSetupSelector\r\n                        open = {openPlanSetupSelectorDlg}\r\n                        handleClose = {handlePlanSetupSelectorDlgClose}\r\n                        user = {user}\r\n                        PatientId = {plan.case_name.split('-')[1]}\r\n                    />\r\n\r\n                    {/* tx modality */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-tx-modality\"\r\n                        select\r\n                        label=\"Modality\"\r\n                        name=\"modality\"\r\n                        value={plan.modality}\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                        SelectProps={{native: true}}\r\n                        // helperText=\"Select doctor\"\r\n                        >\r\n                        <option key=\"modality_not_selected\" value=\"\"></option>\r\n                        {\r\n                            (enumList && enumList.tx_modality_list.map(m => (\r\n                                <option key={m} value={m}>\r\n                                    {m}\r\n                                </option>\r\n                            )))\r\n                        }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n                    {/* Doctors */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"doctors-label\">Doctors</InputLabel>\r\n                    <Select\r\n                    labelId=\"doctors-label\"\r\n                    id=\"doctors-checkbox-list\"\r\n                    multiple\r\n                    value={plan.doctors.split(',')}\r\n                    onChange={(e)=>setPlanProp(\"doctors\", remove_empty_string(e.target.value).join(','))}\r\n                    input={<Input />}\r\n                    renderValue={(selected) => initial_list_string_from_name_email_list_string(selected.join(','))}\r\n                    MenuProps={MenuProps}\r\n                    >\r\n                    {enumList.doctor_list.map((name_email) => (\r\n                        <MenuItem key={name_email} value={name_email}>\r\n                            <Checkbox checked={plan.doctors.split(',').indexOf(name_email) > -1} />\r\n                            <ListItemText primary={name_email.split('|')[0]} />\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Select>\r\n                    </FormControl>\r\n\r\n                    {/* Planners */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"planners-label\">Planners</InputLabel>\r\n                    <Select\r\n                    labelId=\"planners-label\"\r\n                    id=\"planners-checkbox-list\"\r\n                    multiple\r\n                    value={plan.planners.split(',')}\r\n                    onChange={(e)=>setPlanProp(\"planners\", remove_empty_string(e.target.value).join(','))}\r\n                    input={<Input />}\r\n                    renderValue={(selected) => initial_list_string_from_name_email_list_string(selected.join(','))}\r\n                    MenuProps={MenuProps}\r\n                    >\r\n                    {enumList.planner_list.map((name_email) => (\r\n                        <MenuItem key={name_email} value={name_email}>\r\n                            <Checkbox checked={plan.planners.split(',').indexOf(name_email) > -1} />\r\n                            <ListItemText primary={name_email.split('|')[0]} />\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Select>\r\n                    </FormControl>\r\n\r\n                    {/* Tx Site */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-tx-site\"\r\n                        label=\"Tx Site\"\r\n                        name=\"tx_site\"\r\n                        value={plan.tx_site}\r\n                        onChange = {handlePlanChange}\r\n                        onClick = {()=>setOpenTxSiteDlg(true)}\r\n                        InputLabelProps={{shrink:true}}\r\n                        InputProps={{disabled:true}}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    <SimpleInputWithSearchListDlg \r\n                        open = {openTxSiteDlg}\r\n                        handleClose = {handleTxSiteDlgClose}\r\n                        title=\"Treatment Site\"\r\n                        initialValue={plan.tx_site}\r\n                        searchList = {enumList.tx_site_list}\r\n                    />\r\n\r\n                    {/* Sim */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-sim-date\"\r\n                        type=\"date\"\r\n                        label=\"Sim\"\r\n                        name=\"sim\"\r\n                        defaultValue={DT.YYYY_MM_DD(new Date(plan.sim.replace('Z','')))} //\"2019-11-18\"\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n                        \r\n                    {/* machine */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                    className=\"text-field-machine\"\r\n                    select\r\n                    name=\"machine\"\r\n                    label=\"Machine\"\r\n                    value={plan.machine}\r\n                    onChange = {handlePlanChange}\r\n                    InputLabelProps={{shrink:true}}\r\n                    SelectProps={{native: true}}\r\n                    >\r\n                    <option key=\"machine_not_selected\" value=\"\"></option>\r\n                    {\r\n                        (enumList && enumList.machine_list.map(machine => (\r\n                        <option key={machine} value={machine}>\r\n                            {machine}\r\n                        </option>\r\n                        )))\r\n                    }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n\r\n                    {/* note */}\r\n                    <FormControl className={classes.formControl} fullWidth={true}>\r\n                    <TextField\r\n                        className=\"text-field-note\"\r\n                        label=\"Short Comment\"\r\n                        name=\"note\"\r\n                        value={plan.note}\r\n                        fullWidth={true}\r\n                        variant = 'outlined'\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                    />\r\n                    </FormControl>\r\n\r\n                </form>\r\n                \r\n                 <PlanNoteList \r\n                    className={classes.PlanLogList}\r\n                    planitem={props.planitem}\r\n                    addlog = {props.addlog}\r\n                    removelog = {props.removelog}\r\n                    />\r\n\r\n                </Grid>\r\n                </ExpansionPanelDetails>\r\n       \r\n        {/* Bottom Toolbar */}\r\n        <Divider />\r\n        <ExpansionPanelActions>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            disabled={!dirty}\r\n            onClick = {()=>{\r\n                props.saveplan_handler({plan:plan, dirty: true});\r\n                toggleExpanded();\r\n            }}\r\n            > \r\n            Save \r\n        </Button>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            onClick = {()=>{\r\n                props.duplicateplan_handler(props.planitem);\r\n\r\n                // close the expanded one\r\n                toggleExpanded();\r\n            }}\r\n            > \r\n            Duplicate\r\n        </Button>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            onClick = {()=>{\r\n                setSimpleDlgOpen(true);\r\n            }}\r\n            > \r\n            Delete \r\n        </Button>\r\n        <SimpleDlg id=\"delete_dialog\"\r\n            open = {deleteDlgOpen}\r\n            title = \"Are you sure?\"\r\n            buttons = 'Yes|No'\r\n            handleClose = {(btnPressed)=>{\r\n                if(btnPressed==='Yes')\r\n                    props.deleteplan_handler(props.planitem)\r\n                setSimpleDlgOpen(false);\r\n            }}\r\n        />\r\n\r\n            {/* Add QA */}\r\n            <Button \r\n              id=\"button_add_qa\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>{setOpenAddQADlg(true)}}\r\n              >\r\n                Add QA\r\n              </Button>\r\n\r\n              <AddQADlg\r\n                open = {openAddQADlg}\r\n                handleClose = {handleAddQADlgClose}\r\n                user = {user}\r\n                PatientId = {plan.case_name.split('-')[1]}\r\n              />\r\n\r\n            {/* Email Group */}\r\n            <Button \r\n              id=\"button_email_group\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>{email_plan(planitem.plan, user)}}\r\n              >\r\n                Email Me\r\n              </Button>\r\n             \r\n\r\n            {/* Logs Dialog Box */}\r\n            <Button \r\n              id=\"button_view_auto_activities\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>setAriaActivitiesOpen(true)}\r\n              >\r\n                Activities\r\n              </Button>\r\n\r\n              <AriaActivityList\r\n                open = {ariaActivitiesOpen}\r\n                handleClose = {()=>setAriaActivitiesOpen(false)}\r\n                object_id = {plan.case_name.split('-')[1]}\r\n                user = {props.user}\r\n              />\r\n\r\n        </ExpansionPanelActions>\r\n\r\n        </ExpansionPanel>\r\n        )\r\n    }\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Paper} from '@material-ui/core';\r\nimport Plan from './Plan';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './PlanList.css'\r\n\r\nexport default function PlanList(props){\r\n        const{ pagenation, setPage} = props;\r\n        const {page, totalCount, itemsPerPage} = pagenation;\r\n        \r\n        const numOfPages = (totalCount%itemsPerPage>0) ? Math.floor(totalCount/itemsPerPage)+1:Math.floor(totalCount/itemsPerPage);\r\n\r\n        const handlePageChange = (event, page) => {\r\n            setPage(page);\r\n          };\r\n\r\n        return (\r\n            <Paper className='planlist-wrapper'>\r\n                <div className=\"planlist\">\r\n                { \r\n                    props.planitems.map(pi=>\r\n                        <Plan \r\n                            key={pi.plan._id} \r\n                            planitem={pi} \r\n                            date_change_handler={props.date_change_handler} \r\n                            deleteplan_handler={props.deleteplan_handler}\r\n                            saveplan_handler={props.saveplan_handler}\r\n                            duplicateplan_handler={props.duplicateplan_handler}\r\n                            addlog = {props.addlog}\r\n                            removelog = {props.removelog}\r\n                            user = {props.user}\r\n                            set_planitems_state = {props.set_planitems_state}\r\n                            enumList = {props.enumList}\r\n                        />)\r\n                } \r\n                </div>\r\n                <div className=\"planlist-pagenation\">\r\n                        {/* <Pagination count={numOfPages} page={page} onChange={handleChange} /> */}\r\n                        <Pagination count={numOfPages} page={page} onChange={handlePageChange} />\r\n                        <div className='total-count'>N={totalCount}</div>\r\n                </div>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n\r\n\r\n","import config from '../config'\r\n\r\nexport default class PlanDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/plans';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllPlans(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getAllPlans_newstart_gt(t0){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}?token=${this.token}`;\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt(t0, t1){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_skip_limit(t0, t1, skip, limit){\r\n      \r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_keyword_skip_limit(t0, t1, keyword, skip, limit){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      keyword = encodeURIComponent(keyword)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n      \r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/keyword/${keyword.trim().toLowerCase()}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_machines_skip_limit(t0, t1, machines, skip, limit){\r\n      \r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      machines = encodeURIComponent(machines)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_keyword_machines_skip_limit(t0, t1, keyword, machines, skip, limit){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      keyword = encodeURIComponent(keyword)\r\n      machines = encodeURIComponent(machines)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n      \r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/keyword/${keyword.trim().toLowerCase()}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n\r\n    getAllPlans_keyword_skip_limit(keyword, skip, limit){\r\n\r\n        // encode the inputs\r\n        keyword = encodeURIComponent(keyword)\r\n        skip=encodeURIComponent(skip);\r\n        limit=encodeURIComponent(limit)\r\n\r\n            \r\n      const url_query = `${this.url}/keyword/${keyword.trim().toLowerCase()}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n\r\n    addPlan(plan) {\r\n\r\n        // update the keywords string field\r\n        plan.keywords = \"\";\r\n        plan.keywords = Object.values(plan)\r\n                           .filter(f => typeof(f) === 'string')\r\n                           .filter(item=>item.length>0)\r\n                           .filter(item=>item.length !== '2019-11-12T00:00:00.000Z'.length)\r\n                           .join('|')\r\n                           .toLowerCase()\r\n\r\n        return fetch(this.url+`?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(plan)\r\n        });\r\n      }\r\n\r\n      updatePlan(plan) {\r\n     //   console.log('updating a plan', plan);\r\n        const plan_url = this.url+'/'+plan._id;\r\n        const url = plan_url +`?token=${this.token}`;\r\n        // console.log('url==>', url);\r\n\r\n        // update the keywords string field\r\n        plan.keywords = \"\";\r\n        plan.keywords = Object.values(plan)\r\n          .filter(f => typeof(f) === 'string')\r\n          .filter(item=>item.length>0)\r\n          .filter(item=>item.length !== '2019-11-12T00:00:00.000Z'.length)\r\n          .join('|')\r\n          .toLowerCase()\r\n\r\n        return fetch(url, {\r\n          method: 'PATCH',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(plan)\r\n        });\r\n      }\r\n\r\n\r\n      deletePlan(plan) {\r\n    //    console.log('deleting a plan', plan);\r\n        const plan_url = this.url+'/'+plan._id;\r\n    //    console.log('plan url', plan_url);\r\n        return fetch(plan_url+`?token=${this.token}`, {\r\n          method: 'DELETE',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          }\r\n          //body: JSON.stringify(plan)\r\n        });\r\n      }\r\n    \r\n} // class\r\n","import React from 'react';\nimport './App.css';\nimport {Header,Footer} from './comp'\nimport PlanList from './comp/PlanList'\nimport PlanDataProvider from './providers/PlanDataProvider';\nimport EmailServiceProvider from './providers/EmailServiceProvider';\nimport DT from  './helpers/dt';\nimport logger from './helpers/logger'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {QaDataContextProvider} from './data/QaDataContext'\nimport EnumDataProvider from './providers/EnumDataProvider'\nimport SimpleDlg from './helpers/SimpleDlg'\nimport config from './config'\n\nfunction same_array(list1, list2){\n\n  if(list1.length !== list2.length)\n    return false;\n\n  const str1 = list1.map(i=>i.trim()).sort().join('')\n  const str2 = list2.map(i=>i.trim()).sort().join('')\n  \n  return (str1 === str2)\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // set the browser window title\n    document.querySelector('title').innerHTML = 'PlanQ - ' + config.site;\n\n    // initial state\n    this.state = { \n      planitems: [],\n      user:{},\n      showProgress:false,\n      msgBox: {\n        open: false,\n        title: \"\",\n        msg: \"\",\n        error: false\n      }\n    };\n\n    this.pagenation = {\n      itemsPerPage:10,\n      page:1,\n      totalCount:0\n    }\n\n    const dt = new Date();\n    const dt_plus2year = new Date(dt.getFullYear()+2, dt.getMonth(), dt.getDate());\n    this.filter = {\n      newstart_from: dt,\n      newstart_to:  dt_plus2year,\n      keyword: \"\"\n    }\n    \n  }  \n\n  ///////////////////////////\n  // i\n  componentDidMount( )\n  {\n    logger.log('App-->componentDidMount()')\n    this.update_planlist()\n  }\n\n  showMsg = (title, msg, error=false)=>{\n    this.setState({msgBox:{\n      open: true,\n      title: title,\n      msg, msg,\n      error: error\n    }})\n  }\n\n setPage = (page)=> {\n\n    if(page === this.pagenation.page)\n      return;\n\n    this.pagenation.page = page;\n\n    this.update_planlist();\n\n  }\n\n  update_planlist_internal = (dataFetchFunction)=>\n  {\n    const user = this.state.user;\n\n    //console.log('update_planlist_internal.user', user)  \n\n    logger.log('App-->update_planlist()')\n    \n    // if not logged in, just return\n    if(!user || !user.token)\n    {\n      console.log('update_planlist=>user not logged in yet')\n      \n      this.setState({planitems:[]})\n      \n      return;\n    }\n\n    /// show progress bar\n    this.setState({showProgress:true});\n\n    // see if user seeting has the number of cases per page\n    if(user.settings && user.settings.planq_num_of_cases_per_page)\n      {\n        this.pagenation.itemsPerPage = user.settings.planq_num_of_cases_per_page;\n      }\n\n      \n    // get enum list\n    const dp = new EnumDataProvider(this.state.user.token);\n    dp.getEnums()\n    .then(res=>{\n      return res.json()\n    })\n    .then(data=>{\n\n      this.enumList = data;\n      this.enumList.tx_site_list.sort();\n\n      // fetch planning cases\n      dataFetchFunction()\n      .then(res=>{\n        return res.json();\n      })\n      .then(data => {\n\n          this.pagenation.totalCount = data.totalCount;\n\n          // add dirty flag\n          const planitems = data.list.map(p => {\n            return {plan: p, dirty: false}\n          });\n\n          this.setState({\n            planitems: planitems,\n            showProgress:false\n          }\n\n        );\n      })\n      .catch(err => {\n        console.error('getAllPlans failed',err)\n        this.showMsg(\"Error\", 'Failed getting planning data. Please contact the administrator.', true)\n      });\n      \n    })\n    .catch(err=>{\n      console.error()\n      this.showMsg(\"Error\", 'Failed getting the enumeration data. Please contact the administrator.', true)\n    })\n    \n  }//update_planlist_internal\n\n  update_planlist = ()=>{\n\n    console.log('update_planlist================>')\n    const user = this.state.user;\n\n    if(!user || !user.token)\n    {\n      console.log('update_planlist=>user not logged in yet')\n      \n      this.setState({planitems:[]})\n      \n      return;\n    }\n\n    ///////////\n    let useMachinesFilter = false;\n    if(this.enumList) // enum list available, then if the users' machine setting is different from the machine list, use machine filter\n    {\n      // console.log('enumList.machine_list', this.enumList.machine_list)\n      if(user.settings && user.settings.my_machines &&  !same_array(user.settings.my_machines.split(','), this.enumList.machine_list)) \n        useMachinesFilter = true;\n    }\n    else // enumList is not available yet, then useMachine filter if the user has machine filter settings\n    {\n      if(user.settings && user.settings.my_machines) \n        useMachinesFilter = true;\n    }\n\n    /////////////\n    let searchKeyword = (user.settings && user.settings.planq_search_keyword && user.settings.planq_search_keyword.trim() !== \"\")?user.settings.planq_search_keyword.trim():\"\";\n  \n\n    if(searchKeyword === \"\" && !useMachinesFilter)\n    {\n      const dataFetchFunction = ()=>{\n\n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_skip_limit(\n          newstart_from, \n          newstart_to, \n          skip, \n          limit)\n      }\n\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword === \"\" && useMachinesFilter)\n    {\n      const dataFetchFunction = ()=>{\n\n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const machines = user.settings.my_machines;\n\n        \n        // console.log('machines===>', machines)\n\n\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_machines_skip_limit(\n          newstart_from, \n          newstart_to,\n          machines,\n          skip, \n          limit)\n      }\n\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword !== \"\" && !useMachinesFilter){ // there is keyword, but no macine filter\n      \n\n      const dataFetchFunction = ()=>{\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        console.log('keyword===>', searchKeyword)\n\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_keyword_skip_limit(\n          newstart_from, \n          newstart_to, \n          searchKeyword,\n          skip, \n          limit)\n      }\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword !== \"\" && useMachinesFilter){ // keyword & machine filter \n\n      const dataFetchFunction = ()=>{\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const machines = user.settings.my_machines;\n        console.log('keyword===>', searchKeyword)\n        console.log('machines===>', machines)\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_keyword_machines_skip_limit(\n          newstart_from, \n          newstart_to, \n          searchKeyword,\n          machines,\n          skip, \n          limit)\n      }\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else{\n        console.log('Code should not reach this code block!!!')\n    }\n    \n  }\n\n  //////////////////////////\n  // click Add Plan button\n  onclick_addplan = ()=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_addplan=> User not Logged In')\n      return;\n    }\n    const d = new Date();\n    \n    const plan =  {\n        case_name: \"NA\",\n        sim: d,\n        status: \"\",\n        newstart: d,\n        plan_name: \"\",\n        planners: \"\",\n        doctors: \"\",\n        tx_site: \"\",\n        note: \"\",\n        logs: []\n     };\n\n     this.addplan(plan)\n  }\n\n  addplan = (plan)=>{\n    \n    if(!this.state.user || !this.state.user.userid)\n    {\n      console.log('onclick_addplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.addPlan(plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n\n      let planitem = {\n        plan: ret_data,\n        dirty: false\n      }\n\n      this.state.planitems.unshift(planitem);\n    \n     // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n        return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n\n      this.setState({planitems: this.state.planitems});\n    });\n  }\n\n  \n  //////////////////////////\n  // click Email List to Me button\n  onclick_email_planq_list_to_me = ()=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_email_planq_list_to_me=> User not Logged In')\n      return;\n    }\n\n    // make this of the case\n    const lines = []\n    this.state.planitems.forEach(pi=>{\n      const plan = pi.plan;\n\n      const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\n      const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\n\n      const newstart = (newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\";\n      const case_name = plan.case_name;\n      const status = plan.status;\n      const doctors = plan.doctors.split(',').map(d=>d.split('|')[0]).join('/')\n      const planners = plan.planners.split(',').map(d=>d.split('|')[0]).join('/')\n      const tx_site = plan.tx_site;\n      //const tx_modality = plan.tx_modality;\n      //const tx_machine = plan.tx_machine;\n      //const note = plan.note\n      \n      const line = `${newstart}\\t${case_name}\\t${status}\\t${doctors}\\t${planners}\\t${tx_site}`\n\n      lines.push(line);\n\n    }) // forEach\n\n    const mail = {\n      from: 'radonc.physics@stonybrookmedicine.edu', \n      to: this.state.user.email, // list of receivers\n      subject: \"PlanQ List\", // Subject line\n      text: lines.join('\\n')\n      //html: err\n    }\n\n    const esp = new EmailServiceProvider(this.state.user.token);\n    esp.send(mail);\n  }\n\n  \n  /////////////////\n  // delete plan\n  onclick_deleteplan = (planitem)=>{\n\n    if(!this.state.user.userid)\n    {\n      console.log('onclick_deleteplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.deletePlan(planitem.plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n      \n      // remove the plan from the list & set the state\n      let new_planitems = this.state.planitems.filter(pi => pi.plan._id !== planitem.plan._id);\n\n      this.setState({planitems: new_planitems});\n    });\n  }\n\n  /////////////////\n  // save plan\n  onclick_saveplan = (planitem)=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_saveplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    \n    // // if array flatten out to a string \n    // if(Array.isArray(planitem.doctors))\n    //   planitem.doctors = planitem.doctors.join(\"/\");\n\n    console.log('planitem.plan=', planitem.plan)\n\n    dp.updatePlan(planitem.plan)\n    .then(res=>{\n      return res.json()\n    })\n    .then(data=>{\n      // success \n      // set the dirty flag to OFF  \n      // this.state.planitems.forEach(pi => {\n      //   if(pi.plan._id === planitem.plan._id)\n      //   {\n      //     pi.dirty = false;\n      //   }\n      // });\n      planitem.dirty = false;\n\n      // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n        return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n      \n      this.setState({planitems: this.state.planitems});\n    })\n    .catch(err=>{\n      console.log(err);\n    })\n\n  }\n\n  onclick_duplicateplan = (planitem)=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_duplicateplan=> User not Logged In')\n      return;\n    }\n\n    //console.log('duplicate plan');\n    const plan =  {\n      case_name: planitem.plan.case_name,\n      sim: planitem.plan.sim,\n      status: \"\",\n      newstart: planitem.plan.newstart,\n      plan_name: planitem.plan.plan_name,\n      planners: planitem.plan.planners,\n      doctors: planitem.plan.doctors,\n      tx_site: planitem.plan.tx_site,\n      machine: planitem.plan.machine,\n      modality: planitem.plan.modality,\n      note: planitem.plan.note,\n      logs: planitem.plan.logs\n   };\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.addPlan(plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n\n      let planitem = {\n        plan: ret_data,\n        dirty: false\n      }\n\n      this.state.planitems.unshift(planitem);\n\n      // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n       return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n\n      this.setState({planitems: this.state.planitems});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  } // onclick_duplicateplan\n\n\n  // change_handler = (planitem,key, value)=>{\n    \n  //   //console.log('change handler')\n\n  //    //const value = e.target.value;\n\n  //    // set the new value to the plan\n  //    this.state.planitems.forEach(pi => {\n  //     if(pi.plan._id === planitem.plan._id)\n  //     {\n  //       if(key === 'newstart')\n  //       {\n  //         pi.plan[key] = new Date(value); // set new value\n  //       }\n  //       else\n  //       {\n  //         pi.plan[key] = value; // set new value\n  //       }\n  //       pi.dirty = true; // set dirty flag\n  //     }\n  //   });\n\n  //   // set state\n  //   this.setState({planitems: this.state.planitems});\n  // } // change_handler\n  \n\n  addlog = (planitem, msg)=>\n  {\n    logger.log('addlog()')\n    if(!this.state.user.userid)\n    {\n      console.log('addlog=> User not Logged In')\n      return;\n    }\n\n    const log = {\n      msg: msg,\n      by: \"\",\n      at: new Date()\n    }\n\n    // add at the front\n    planitem.plan.logs.unshift(log);\n\n    // set dirty flag\n    planitem.dirty = true;\n        \n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  removelog = (planitem, log)=>\n  {\n    logger.log('removelog()')\n\n    if(!this.state.user.userid)\n    {\n      console.log('removelog=> User not Logged In')\n      return;\n    }\n\n    // remove\n    planitem.plan.logs = planitem.plan.logs.filter(l=> l.at !== log.at );\n\n    // set dirty flag\n    planitem.dirty = true;\n     \n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  set_filter = (filter)=>{\n\n    if(!filter)\n      return;\n    \n    this.filter = filter;\n    \n    console.log('set_filter=>',filter)\n\n    this.pagenation.page=1;\n\n    this.update_planlist()\n  }\n\n  setUser = (user)=>{\n    console.log('setUser()')\n    \n    if(user && user.token)  // login\n    {\n      this.setState({user: user})\n      this.update_planlist();\n    }\n    else // logout\n    {\n      this.setState({\n        user: {},\n        planitems:[]\n      })\n\n    }\n  }\n  \n  ///////////////////////////////////\n  // helper function to set the state\n  // triggering the PlanList to update\n  set_planitems_state = () =>{\n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  render() {\n\n    return (\n    \n    <React.Fragment>\n      <QaDataContextProvider user={this.state.user}>\n        <Header \n          onclick_addplan={this.onclick_addplan} \n          onclick_email_planq_list_to_me={this.onclick_email_planq_list_to_me}\n          set_filter ={this.set_filter}\n          addplan = {this.addplan}\n          user = {this.state.user}\n          setUser = {this.setUser}\n          update_planlist = {this.update_planlist}\n          filter = {this.filter}\n          enumList = {this.enumList}\n        />\n        \n        {/* Progress Bar */}\n        { this.state.showProgress && (<LinearProgress color=\"secondary\"/>) }\n\n        { (this.state.user && this.state.user.userid)?\n        (<PlanList \n            planitems={this.state.planitems}\n            date_change_handler={this.date_change_handler}\n            deleteplan_handler = {this.onclick_deleteplan}\n            saveplan_handler = {this.onclick_saveplan}\n            duplicateplan_handler = {this.onclick_duplicateplan}\n            addlog = {this.addlog}\n            removelog = {this.removelog}\n            user = {this.state.user}\n            set_planitems_state = {this.set_planitems_state}\n            enumList = {this.enumList}\n            pagenation={this.pagenation}\n            setPage = {this.setPage}\n            />):(\n              <h3 className=\"please-login\">Please login (use your computer login id/pw)</h3>\n            )\n        }\n        <Footer/>\n      </QaDataContextProvider>\n      <SimpleDlg \n        open = {this.state.msgBox.open}\n        handleClose = {()=>this.setState({msgBox:{open:false, title:\"\", msg:\"\", error:false}})}\n        title = {this.state.msgBox.title}\n        msg = {this.state.msgBox.msg}\n        buttons = 'Ok'\n        error = {this.state.msgBox.error}\n      />\n    </React.Fragment>\n    \n  );}\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}