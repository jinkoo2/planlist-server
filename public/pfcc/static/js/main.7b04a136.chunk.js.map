{"version":3,"sources":["comp/Filters.js","helpers/dt.js","helpers/datetime.js","comp/TreatmentItem.js","helpers/logger.js","config.js","config.pfcc.js","providers/ScheduledActivityDataProvider.js","comp/TreatmentList.js","comp/SimScheduleItem.js","providers/EnumDataProvider.js","comp/SimSchedule.js","users/Login.js","providers/QaDataProvider.js","helpers/SimpleDlg.js","helpers/GammaDlg.js","helpers/useForm.js","comp/QAListItem.js","comp/QAListDlg.js","providers/UserDataProvider.js","helpers/CheckBoxSelectorDlg.js","users/UserSettingsDlg.js","comp/Header.js","comp/Footer.js","comp/AriaActivityItem.js","providers/LogDataProvider.js","comp/AriaActivityList.js","comp/PlanNoteList.js","providers/PlanSetupDataProvider.js","helpers/PlanSetupCheckboxSelector.js","helpers/PlanSetupRadioButtonSelector.js","comp/AddQADlg.js","data/QaDataContext.js","helpers/SimpleInputWithSearchListDlg.js","providers/EmailServiceProvider.js","comp/Plan.js","comp/PlanList.js","providers/PlanDataProvider.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","menuButton","marginRight","textField_DateTime","marginLeft","width","textAlign","color","appBar","position","title","spacing","flex","Transition","React","forwardRef","props","ref","Slide","direction","isValidDate","d","Date","isNaN","Filters","classes","filter","handleClose","useState","newstart_from","set_newstart_from","newstart_to","set_newstart_to","keyword","handleCancel","utils","DateFnsUtils","Dialog","fullScreen","open","onClose","TransitionComponent","AppBar","className","Toolbar","IconButton","edge","onClick","aria-label","Typography","variant","Button","autoFocus","List","ListItem","button","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","disableToolbar","format","margin","id","value","onChange","date","console","log","KeyboardButtonProps","Divider","DAYS","zeroPad","num","places","zero","toString","length","Array","join","DT","yyyy","getFullYear","mm","getMonth","dd","getDate","dow","getDay","hours","getHours","minutes","getMinutes","ampm","this","YYYY_MM_DD","HH_MM","MM_DD_YYYY","MM_DD","MM_DD_DAY","HH_MM_AMPM","YYYY_MM_DDTHH_MM","TreatmentItem","dt","txItem","tx_starttime","ScheduledStartTime","ActivityCode","type","name","e","dir","target","selectionChange","checked","logger","obj","config","webservice_url","site","doctor_list","planner_list","machine_list","tx_site_list","plan_status_list","tx_modality_list","ScheduledActivityDataProvider","token","url","ResourceSer","StartDateTime_begin","StartDateTime_end","url_query","fetch","method","PatientId","container","display","flexWrap","formControl","minWidth","backgroundColor","TreatmentList","user","simItem","txList","setTxList","fetchList","userid","dp","dt_1","setDate","getScheduledActivitiesPerPatientId","then","res","json","list","list2","item","ActivityCategoryCode","toLowerCase","includes","catch","err","alert","useEffect","selected","push","forEach","newstart_date","replace","plan","case_name","LastName","sim","status","newstart","plan_name","planners","doctors","tx_site","note","ActivityNote","logs","addplan","map","key","uuidv4","SimScheduleItem","scheduleItem","ScheduledActivityCode","scheduledActivitiesDlgOpen","setScheduledActivitiesDlgOpen","Fragment","size","endIcon","EnumDataProvider","prop_name","addDays","days","result","Message","msg","SimList","i","SimSchedule","simResourceList","setSimResourceList","getEnums_prop","data","setResourceSer","aria_resourceser","error","resourceSer","setMessage","today","simDateList","day","dateString","simDate","setSimDate","setList","loggedIn","a","parts","split","YYYY","parseInt","MM","DD","getScheduledActivitiesPerResourceSer","FormControl","Select","native","event","inputProps","Alert","elevation","marginTop","Login","setUserid","pw","setPw","setMsg","openAlert","setAlertOpen","handleAlertClose","reason","handleSubmit","password","xhr","XMLHttpRequest","setRequestHeader","onreadystatechange","readyState","DONE","JSON","parse","responseText","setUser","handleLoginClose","send","stringify","loginOpen","TextField","textField","label","onKeyUp","keyCode","Snackbar","autoHideDuration","severity","QaDataProvider","skip","limit","encodeURIComponent","machines","qa","headers","body","addtional_querystring","_id","mode","qa_url","SimpleDlg","buttons","titleClass","DialogTitle","DialogContent","DialogContentText","DialogActions","GammaDlg","initialVlaues","values","setValues","useForm","PD","DTA","G","handleChange","QaListItem","qaitem","save_qa","delete_qa","due_on","dirty","plan_case_name","machine","requested_by","completed_by","requested_on","notes","completed_on","saveButtonEnabled","setSaveButtonEnabled","trim","completeButtonEnabled","setCompleteButtonEnabled","openConfirmDlg","setOpenConfirmDlg","openGammaDlg","setOpenGammaDlg","placeholder","disabled","email","btnPressed","newResult","QaList","QAListDlg","statusList","setStatus","page","setPage","totalCount","setTotalCount","itemsPerPage","settings","qalist_num_of_cases_per_page","numOfPages","Math","floor","my_machines","getQAs_machines_skip_limit","getPendingQAs_machines_skip_limit","getCompletedQAs_machines_skip_limit","getQAs_skip_limit","getPendingQAs_skip_limit","getCompletedQAs_skip_limit","getQAs","ret_data","qaItemList","htmlFor","s","deleteQA","deletedCount","newList","qi","updateQA","nModified","Pagination","count","UserDataProvider","make_dict","dict","indexOf","CheckBoxSelectorDlg","setDict","component","FormGroup","Object","keys","FormControlLabel","control","Checkbox","checked_items","isPositiveInteger","Number","isInteger","UserSettingsDlg","initValues","notify_planq_list","planq_num_of_cases_per_page","notify_qa_new","notify_qa_completed_all","notify_aria_rx_change","notify_aria_plan_change","notify_aria_structure_change","notify_for_all_patients","planner","doctor","aria_userid","setSettings","setDirty","fetchData","useCallback","getUserByUserId","openMachineSelectorDlg","setOpenMachineSelectorDlg","Switch","StyledMenu","withStyles","paper","border","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","MenuItem","Header","update_planlist","set_filter","isLoggedIn","filterOpen","setFilterOpen","simScheduleOpen","setSimScheduleOpen","qaListDlgOpen","setQaListDlgOpen","handleQaListDlgOpen","setLoginOpen","menuAnchorElement","setMenuAnchorElement","handleMenuClose","handleAddCase","onclick_addplan","handleOpenSimulationSchedule","update_user_settings_to_db","updateUser","openUserSettingsDlg","setOpenUserSettingsDlg","searchKeyword_init","planq_search_keyword","setSearchKeyword","searchKeyword","currentTarget","anchorEl","keepMounted","Boolean","fontSize","onclick_email_planq_list_to_me","padding","Footer","Paper","style","Component","ExpansionPanel","boxShadow","borderBottom","expanded","MuiExpansionPanel","ExpansionPanelSummary","marginBottom","minHeight","content","MuiExpansionPanelSummary","ExpansionPanelDetails","MuiExpansionPanelDetails","AriaActivityItem","setExpanded","msg1","msgList","substring","whos","elms1","who","whos_unique_string","Set","times","time","time_unique_string","new_status_list","new_status","panel","new_status_unique_string","square","newExpanded","aria-controls","str","LogDataProvider","object_id","palette","background","AriaActivityList","getLogsOfObject","LogTextField","logToolbar","borderWidth","listitem","PlanLogList","change_handler","setState","input_text","keyup","addlog","planitem","state","fullWidth","InputLabelProps","shrink","at","removelog","PlanSetupDataProvider","PlanSetupCheckboxSelector","setSelected","handleSelectedChange","getAllPlanSetupsPerPatientId","ps","CourseId","PlanSetupId","checked_list","PlanSetupRadioButtonSelector","RadioGroup","Radio","AddQADlg","setType","setPlan","openPlanSetupSelectorDlg","setOpenPlanSetupSelectorDlg","msgBox","setMsgBox","showMsg","helperText","planname","QaDataContext","createContext","qaReducer","action","addQA","QaDataContextProvider","useReducer","qaList","qaListDispatch","Provider","children","SimpleInputWithSearchListDlg","initialValue","searchList","setValue","matchedList","setMatchedList","handleItemClick","clicked_value","innerText","EmailServiceProvider","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","initial_list_string_from_name_email_list_string","name_email_list_string","name_email","elms","toUpperCase","initial_from_name","remove_empty_string","string_list","heading","expensionPanelSummary","Plan","useContext","handlePlanChange","setPlanProp","toggleExpanded","ariaActivitiesOpen","setAriaActivitiesOpen","deleteDlgOpen","setSimpleDlgOpen","newstart_diff_month","openAddQADlg","setOpenAddQADlg","openTxSiteDlg","setOpenTxSiteDlg","doctorsClassName","plannersClassName","expandIcon","modality","Grid","justify","alignItems","noValidate","defaultValue","select","SelectProps","m","InputLabel","labelId","multiple","input","Input","renderValue","InputProps","PlanNoteList","ExpansionPanelActions","saveplan_handler","duplicateplan_handler","deleteplan_handler","plan_case_id","p","lines","mail","from","to","subject","text","email_plan","PlanList","pagenation","planitems","pi","date_change_handler","set_planitems_state","PlanDataProvider","t0","t1","keywords","f","plan_url","App","update_planlist_internal","dataFetchFunction","showProgress","getEnums","enumList","sort","list1","useMachinesFilter","getAllPlans_newstart_gt_lt_machines_skip_limit","getAllPlans_newstart_gt_lt_keyword_machines_skip_limit","getAllPlans_newstart_gt_lt_keyword_skip_limit","getAllPlans_newstart_gt_lt_skip_limit","addPlan","unshift","pi1","pi2","line","onclick_deleteplan","deletePlan","new_planitems","onclick_saveplan","updatePlan","onclick_duplicateplan","by","l","document","querySelector","innerHTML","dt_plus2year","LinearProgress","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b04a136.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n//import Switch from '@material-ui/core/Switch';\r\nimport WifiIcon from '@material-ui/icons/Wifi';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport './Filter.css'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n      //flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: 2,\r\n    },\r\n    textField_DateTime: {\r\n      marginLeft: 1,\r\n      marginRight: 1,\r\n      width: 180,\r\n      textAlign: \"center\",\r\n      color: \"white\",\r\n      //borderColor: \"white\",\r\n      //backgroundColor: \"red\"\r\n   },\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function isValidDate(d) {\r\n    return d instanceof Date && !isNaN(d);\r\n  }\r\n\r\nexport default function Filters(props)\r\n{\r\n\r\n    const classes = useStyles()\r\n\r\n\r\n    const {filter, handleClose} = props;\r\n    \r\n    ////////////////////////\r\n    // newstart_from state\r\n    const [newstart_from, set_newstart_from] = React.useState(filter.newstart_from);\r\n\r\n    const handle_newstart_from = (date) => {\r\n\r\n      // check if date is valid date\r\n      if(!isValidDate(date))\r\n      {\r\n        console.log('date is not valid!!!');\r\n        return;\r\n      }\r\n\r\n      set_newstart_from(date);\r\n\r\n      // update the list\r\n      //props.onchange_filter('newstart_from', date);\r\n    };\r\n\r\n    ////////////////////////\r\n    // newstart_to state\r\n    const [newstart_to, set_newstart_to] = React.useState(filter.newstart_to);\r\n    const handle_newstart_to = (date) => {\r\n      \r\n      // check if date is valid date\r\n      if(!isValidDate(date))\r\n      {\r\n        console.log('date is not valid!!!');\r\n        return;\r\n      }\r\n      \r\n      set_newstart_to(date);\r\n\r\n      // update the list\r\n      //props.onchange_filter('newstart_to', date);\r\n    };\r\n\r\n    ///////////////////\r\n    // search keyword\r\n    const [keyword, set_keyword] = React.useState(filter.keyword);\r\n    const handle_keyword_change = (e)=>{\r\n        console.log('keyword', e.target.value);\r\n\r\n        set_keyword(e.target.value)\r\n        //props.onchange_filter('keyword', e.target.value);\r\n    }\r\n\r\n    // //////////////////\r\n    // // switch items\r\n    // const [checked, setChecked] = React.useState(['show_tx_approved']);\r\n    // const handleToggle = value => () => {\r\n    //   const currentIndex = checked.indexOf(value);\r\n    //   const newChecked = [...checked];\r\n    //   if (currentIndex === -1) {\r\n    //     newChecked.push(value);\r\n    //   } else {\r\n    //     newChecked.splice(currentIndex, 1);\r\n    //   }\r\n    //     setChecked(newChecked);\r\n    // };\r\n\r\n    const handleApply = ()=>{\r\n      \r\n      const filter = {\r\n        newstart_from: newstart_from,\r\n        newstart_to:  newstart_to,\r\n        keyword: keyword\r\n      }\r\n\r\n      handleClose(filter)\r\n    }\r\n\r\n    const handleCancel = ()=>{\r\n      handleClose(null)\r\n    }\r\n\r\n    return(\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={props.open} onClose={props.handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCancel} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Filters\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleApply}>\r\n                Apply\r\n            </Button>\r\n            <Button autoFocus color=\"inherit\" onClick={handleCancel}>\r\n                Close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n        <List>\r\n            {/* Hide Tx Approved */}\r\n            {/* <ListItem button>\r\n            <ListItemIcon> <WifiIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"Show Tx Approved\"/>\r\n            <ListItemSecondaryAction>\r\n            <Switch\r\n                edge=\"end\"\r\n                onChange={handleToggle('show_tx_approved')}\r\n                checked={checked.indexOf('show_tx_approved') !== -1}\r\n                inputProps={{ 'aria-labelledby': 'switch-list-label-show_tx_approved' }}\r\n                />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/> */}\r\n\r\n            {/* NewStart From Date */}\r\n            <ListItem button>\r\n            <ListItemIcon> <DateRangeIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"New Start From\"/>\r\n            <ListItemSecondaryAction>\r\n            {/* New Start From */}\r\n            <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-newstart_from\"\r\n                //label=\"NewStart From\"\r\n                //value={props.filter.newstart_from}\r\n                value={newstart_from}\r\n                //onChange={on_newstart_from_changed}\r\n                onChange={handle_newstart_from}\r\n                KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n                }}\r\n            />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/>\r\n\r\n            {/* NewStart To Date */}\r\n            <ListItem button>\r\n            <ListItemIcon> <DateRangeIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"New Start To\"/>\r\n            <ListItemSecondaryAction>\r\n            {/* New Start From */}\r\n            <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-newstart_to\"\r\n                //label=\"NewStart From\"\r\n                value={newstart_to}\r\n                onChange={handle_newstart_to}\r\n                KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n                }}\r\n            />\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/>\r\n\r\n\r\n            {/* Keyword */}\r\n            {/* <ListItem button>\r\n            <ListItemIcon> <SearchIcon /> </ListItemIcon>\r\n            <ListItemText primary=\"Keyword\"/>\r\n            <ListItemSecondaryAction>\r\n            <input \r\n              className=\"filter-keyword\" \r\n              value={keyword} \r\n              onChange={handle_keyword_change} \r\n              placeholder=\"Enter keyword for search\"/>\r\n            </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider/> */}\r\n\r\n        \r\n        </List>\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>)\r\n} // function","\r\nconst DAYS = ['SUN','MON','TUE','WED', 'THR', 'FRI','SAT'];\r\n\r\nfunction zeroPad(num, places) {\r\n  var zero = places - num.toString().length + 1;\r\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\r\n}\r\n\r\n\r\nexport default class DT{\r\n\r\n static MM_DD_YYYY(date){\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}/${yyyy}`;\r\n        return strTime;\r\n      }\r\n\r\n static MM_DD(date){\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n static MM_DD_DAY(date){\r\n        var mm =zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n        var dow = DAYS[date.getDay()];\r\n\r\n        var strTime = `${mm}/${dd} [${dow}]`;\r\n        return strTime;\r\n      }\r\n\r\nstatic HH_MM_AMPM(date){\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'PM' : 'AM';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0'+minutes : minutes;\r\n        var strTime = `${hours}:${minutes} ${ampm}`;\r\n        return strTime;\r\n      }\r\n\r\nstatic HH_MM(date){\r\n        var hours = zeroPad(date.getHours(),2);\r\n        var minutes =  zeroPad(date.getMinutes(),2);\r\n        var strTime = `${hours}:${minutes}`;\r\n        return strTime;\r\n      }\r\n\r\n      \r\nstatic YYYY_MM_DD(date){\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(), 2);\r\n        var strTime = `${yyyy}-${mm}-${dd}`;\r\n        return strTime;\r\n      }\r\n\r\nstatic YYYY_MM_DDTHH_MM(date){\r\n        return this.YYYY_MM_DD(date)+'T'+this.HH_MM(date);\r\n      }\r\n\r\n    } // class\r\n\r\n\r\n\r\n","/// this is obsolte, ues datatime2.js\r\n\r\nconst DAYS = ['SUN','MON','TUE','WED', 'THR', 'FRI','SAT'];\r\n\r\nfunction zeroPad(num, places) {\r\n  var zero = places - num.toString().length + 1;\r\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\r\n}\r\n\r\n\r\nexport default class DT{\r\n\r\n MM_DD_YYYY = (date)=>{\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}/${yyyy}`;\r\n        return strTime;\r\n      }\r\n\r\n      MM_DD = (date)=>{\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n\r\n        var strTime = `${mm}/${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n      MM_DD_DAY = (date)=>{\r\n        var mm =zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(),2);\r\n        var dow = DAYS[date.getDay()];\r\n\r\n        var strTime = `${mm}/${dd} [${dow}]`;\r\n        return strTime;\r\n      }\r\n\r\n      HH_MM_AMPM = (date)=>{\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'PM' : 'AM';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0'+minutes : minutes;\r\n        var strTime = `${hours}:${minutes} ${ampm}`;\r\n        return strTime;\r\n      }\r\n\r\n      HH_MM=(date)=>{\r\n        var hours = zeroPad(date.getHours(),2);\r\n        var minutes =  zeroPad(date.getMinutes(),2);\r\n        var strTime = `${hours}:${minutes}`;\r\n        return strTime;\r\n      }\r\n\r\n    YYYY_MM_DD=(date)=>{\r\n        var yyyy = date.getFullYear();\r\n        var mm = zeroPad(date.getMonth()+1,2);\r\n        var dd  = zeroPad(date.getDate(), 2);\r\n        var strTime = `${yyyy}-${mm}-${dd}`;\r\n        return strTime;\r\n      }\r\n\r\n      YYYY_MM_DDTHH_MM = (date)=>{\r\n        return this.YYYY_MM_DD(date)+'T'+this.HH_MM(date);\r\n      }\r\n\r\n    } // class\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport DT from '../helpers/datetime';\r\nimport './TreatmentItem.css'\r\n\r\nexport default function TreatmentItem(props){\r\n\r\n    let dt = new DT();\r\n\r\n    const {txItem} = props;\r\n    \r\n    const tx_starttime  = dt.MM_DD_DAY(new Date(txItem.ScheduledStartTime));\r\n\r\n    const handleSelectionChange = (e)=>{\r\n        console.dir(e.target);\r\n        props.selectionChange(txItem, e.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tx-item\">\r\n            <div className=\"tx-start-time\">{tx_starttime}</div>\r\n            <div className='tx-activity-code'>{txItem.ActivityCode}</div>\r\n            <div>\r\n                {/* <span className='add-to-q-button' onClick={handleAddToPlanQ}>Add to Q</span> */}\r\n                <input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" onChange={handleSelectionChange}/>\r\n            </div>\r\n        </div>\r\n    ) // return\r\n} // function","export default class logger {\r\n    static log(title, obj) {\r\n      console.log(title, obj)\r\n    }\r\n\r\n    static log(obj) {\r\n        console.log(obj)\r\n      }\r\n  \r\n  }","import config from './config.pfcc'\r\nexport default config\r\n\r\n\r\n","export default {\r\n    webservice_url: 'https://roweb1.uhmc.sbuh.stonybrook.edu:3004/api',\r\n    site: 'PFCC',\r\n    doctor_list:[\r\n        \"Kartik.Mani|kartik.mani@stonybrookmedicine.edu\", \r\n        \"Samuel.Ryu|samuel.ryu@stonybrookmedicine.edu\", \r\n        \"Alexander.Stessin|alexander.stessin@stonybrookmedicine.edu\", \r\n        \"Edward.Valentine|edward.valentine@stonybrookmedicine.edu\", \r\n        \"Alexander.Slade|alexander.slade@stonybrookmedicine.edu\",\r\n        \"Bernard.Newman|bernard.newman@stonybrookmedicine.edu\", \r\n        \"John.Roberson|john.roberson@stonybrookmedicine.edu\", \r\n        \"Ewa.Zabrocka|ewa.zabrocka@stonybrookmedicine.edu\",\r\n        \"Collin.Noldner|collin.noldner@stonybrookmedicine.edu\",\r\n        \"Mark.Ashamalla|mark.ashamalla@stonybrookmedicine.edu\",\r\n    ],\r\n    planner_list:[\r\n        \"Siming.Lu|siming.lu@stonybrookmedicine.edu\",\r\n        \"Xin.Qian|xin.qian@stonybrookmedicine.edu\",\r\n        \"Jinkoo.Kim|jinkoo.kim@stonybrookmedicine.edu\",\r\n        \"Ting.Hsia|an.hsia@stonybrookmedicine.edu\",\r\n        \"Josh.Xu|zhigang.xu@stonybrookmedicine.edu\",\r\n        \"Sunny.Ailawadi|sandeep.ailawadi@stonybrookmedicine.edu\",\r\n        \"Maria.Kartsonis|maria.kartsonis@stonybrookmedicine.edu\",\r\n        \"Todd.Yoder|todd.yoder@stonybrookmedicine.edu\",\r\n        \"Renee.Cattell|renee.cattell@stonybrook.edu\",\r\n        \"Gilbert.Chan|gilbert.chan@stonybrookmedicine.edu\",\r\n        \"Christine.Oh|christine.oh@stonybrookmedicine.edu\",\r\n        \"David.Kahn|david.kahn@stonybrookmedicine.edu\",\r\n    ],\r\n    machine_list: [\r\n        \"Edge\",\r\n        \"TrueBeam\",\r\n        \"TrueBeamSH\",\r\n        \"SIL 21IX\"\r\n    ],\r\n    tx_site_list: [\r\n        \"Brain\",\r\n        \"Brain_Lt\",\r\n        \"Brain_Rt\",\r\n        \"Head\",\r\n        \"Neck\",\r\n        \"Skull\",\r\n        \"H&N\",\r\n        \"Tongue\",\r\n        \"Base_of_Tongue\",\r\n        \"Breast\",\r\n        \"Breast_Lt\",\r\n        \"Breast_Rt\",\r\n        \"Lung\",\r\n        \"Lung_Lt\",\r\n        \"Lung_Rt\",\r\n        \"Spine\",\r\n        \"Spine_C\",\r\n        \"Spine_T\",\r\n        \"Spine_L\",\r\n        \"Sacrum\",\r\n        \"Pelvis\",\r\n        \"Pelvis_Lt\",\r\n        \"Pelvis_Rt\",\r\n        \"Rectum\",\r\n        \"Bladder\",\r\n        \"Esophagus\",\r\n        \"Vulva\",\r\n        \"Mediastinum\",\r\n        \"Chestwall_Lt\",\r\n        \"Chestwall_Rt\",\r\n        \"Skin\",\r\n        \"Anus\",\r\n        \"Hip\",\r\n        \"Hip_Lt\",\r\n        \"Hip_Rt\",\r\n        \"Whole Body\",\r\n        \"Prostate\",\r\n        \"Femur\",\r\n        \"Femur_Lt\",\r\n        \"Femur_Rt\",\r\n        \"Abdomen\",\r\n        \"Adrenal_Lt\",\r\n        \"Adrenal_Rt\",\r\n        \"Thyroid\",\r\n        \"Parotid_Lt\",\r\n        \"Parotid_Rt\",\r\n        \"Scalp\",\r\n        \"Cheek\",\r\n        \"Cheek_Lt\",\r\n        \"Cheek_Rt\",\r\n        \"Iliac\",\r\n        \"Ilium_Lt\",\r\n        \"Ilium_Rt\",\r\n        \"Sternum\",\r\n        \"Cervix\",\r\n        \"Vagina\",\r\n        \"Ear\",\r\n        \"Ear_Lt\",\r\n        \"Ear_Rt\",\r\n        \"Liver\",\r\n        \"Pancreas\",\r\n        \"Lip\",\r\n        \"Lip_Upper\",\r\n        \"Lip_Lower\",\r\n        \"Larynx\",\r\n        \"CSI\",\r\n        \"Shoulder\",\r\n        \"Shoulder_Lt\",\r\n        \"Shoulder_Rt\",\r\n        \"Extremity\",\r\n        \"Kidney\",\r\n        \"Kidney_Lt\",\r\n        \"Kidney_Rt\",\r\n        \"Spleen\",\r\n        \"Thigh_Lt\",\r\n        \"Thigh_Rt\",\r\n        \"Nose\",\r\n        \"Eye\",\r\n        \"Eye_Lt\",\r\n        \"Eye_Rt\",\r\n        \"Base_of_Skull\",\r\n        \"TBI\",\r\n        \"Whole_Brain\",\r\n        \"Other\"\r\n    ],\r\n    plan_status_list: [\r\n        \"Sim Completed\",\r\n        \"Waiting for MRI\",\r\n        \"Waiting for PET\",\r\n        \"Waiting for Patient CD\",\r\n        \"Need MD Contours\",\r\n        \"Need MD Ports\",\r\n        \"Ready to Plan\",\r\n        \"Planning\",\r\n        \"Need MD Approval\",\r\n        \"Need Physics ICC\",\r\n        \"Tx Approved\",\r\n        \"Replan Requested\",\r\n        \"Cancelled\"\r\n    ],\r\n    tx_modality_list: [\r\n        \"2D/3D\",\r\n        \"IMRT\",\r\n        \"ELECTRON\",\r\n        \"SRT\",\r\n        \"SRS\",\r\n        \"SBRT_LUNG\",\r\n        \"SBRT_SPINE\",\r\n        \"SBRT_LIVER\",\r\n        \"SBRT_PROST\",\r\n        \"SBRT_OTHER\",\r\n        \"TBI\",\r\n        \"HDR_VC\",\r\n        \"HDR_T&O\",\r\n        \"HDR_SKIN\",\r\n        \"HDR_PROST\",\r\n        \"HDR_OTHER\",\r\n        \"LDR_I131\",\r\n        \"LDR_XOFIGO\",\r\n        \"LDR_OTHER\"\r\n    ],\r\n\r\n\r\n\r\n\r\n    //webservice_url: 'https://roweb1.uhmc.sbuh.stonybrook.edu:3005/api',\r\n    //site: 'UHMC'\r\n    //webservice_url: 'https://localhost:1004/api',\r\n    // AuxiliaryName_ResourceSer_List: [\r\n    //     {\r\n    //         Name: 'CT Simulation SH',\r\n    //         ResourceSer: '5832'\r\n    //     },\r\n    //     {\r\n    //         Name: 'CT Simulation',\r\n    //         ResourceSer: '115'\r\n    //     }\r\n    // ],\r\n    // Machine_List: [\"SIL 21IX\",\r\n    //     \"Edge\",\r\n    //     \"TrueBeam\",\r\n    //     \"TrueBeamSH\"],\r\n    // Doctor_List: [\r\n    //     { ResourceSer: 5667, DoctorId: \"1585\", LastName: \"Mani\", FirstName: \"Kartik\", Email:'kartik.mani@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5121, DoctorId: \"1581\", LastName: \"Ryu\", FirstName: \"Samuel\", Email:'samuel.ryu@stonybrookmedicine.edu'}, \r\n    //     { ResourceSer: 5213, DoctorId: \"1583\", LastName: \"Stessin\", FirstName: \"Alexander\", Email:'alexander.stessin@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 49, DoctorId: \"1577\", LastName: \"Valentine\", FirstName: \"Edward\", Email: 'edward.valentine@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5775, DoctorId: \"170056513\", LastName: \"Newman\", FirstName: \"Bernard\", Email: 'bernard.newman@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5645, DoctorId: \"170056717\", LastName: \"Roberson\", FirstName: \"John\", Email:'john.roberson@stonybrookmedicine.edu' }, \r\n    //     { ResourceSer: 5893, DoctorId: \"170096733\", LastName: \"Zabrocka\", FirstName: \"Ewa\", Email: 'ewa.zabrocka@stonybrookmedicine.edu' }],\r\n            \r\n    // Profession_List: [\r\n    //     \"Dosimetrist\",\r\n    //     \"Physician\",\r\n    //     \"Physicist\",\r\n    //     \"Therapist\",\r\n    //     \"Other\"\r\n    // ],\r\n\r\n    // Email_Domain_List: [\r\n    //     \"stonybrook.edu\",\r\n    //     \"stonybrookmedicine.edu\"\r\n    // ],\r\n \r\n}\r\n\r\n","import config from '../config'\r\n\r\nexport default class ScheduledActivityDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/aria/scheduled_activities';\r\n        this.token = token;\r\n    }\r\n\r\n    getScheduledActivitiesPerResourceSer(ResourceSer, StartDateTime_begin , StartDateTime_end){\r\n       \r\n      const url_query = `${this.url}/ScheduledActivitiesPerResourceSer/${ResourceSer}/${StartDateTime_begin}/${StartDateTime_end}?token=${this.token}`;\r\n      \r\n    //  console.log('url_query',url_query);\r\n      return fetch(url_query,\r\n        {\r\n            method: 'GET', \r\n            //credentials: 'include'\r\n        });\r\n    }\r\n\r\n    getAllScheduledActivitiesPerPatientId(PatientId){\r\n       \r\n        const url_query = `${this.url}/ScheduledActivitiesPerPatientIdAll/${PatientId}?token=${this.token}`;\r\n        \r\n     //   console.log('url_query',url_query);\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n    getScheduledActivitiesPerPatientId(PatientId, StartDateTime_begin , StartDateTime_end){\r\n       \r\n        const url_query = `${this.url}/ScheduledActivitiesPerPatientId/${PatientId}/${StartDateTime_begin}/${StartDateTime_end}?token=${this.token}`;\r\n        \r\n     //   console.log('url_query',url_query);\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n} // class\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TreatmentItem from './TreatmentItem'\r\n\r\n\r\nimport logger from '../helpers/logger'\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ScheduledActivityDataProvider from '../providers/ScheduledActivityDataProvider'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nexport default function TreatmentList(props)\r\n{\r\n   logger.log('ScheduledActivityList()');\r\n    \r\n   const classes = useStyles()\r\n \r\n   const {open, handleClose, user, simItem} = props;\r\n  //  const {ScheduledStartTime, LastName, PatientId, ActivityCode, ScheduledActivityCode, ActivityNote} = simItem;\r\n\r\n  ///////////////\r\n  // Activity List\r\n  const [txList, setTxList] = React.useState([]);\r\n\r\n  ////\r\n  // primary oncologist\r\n  // const [doctor, setDoctor] = React.useState(null);\r\n\r\n    ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n    }\r\n    \r\n    // const findPrimaryOncologistOfPatientId = async (PatientId) =>{\r\n    //     const dp = new DoctorDataProvider();\r\n\r\n    //     //console.log('PatientId', PatientId)\r\n        \r\n    //     const res = await dp.getPrimaryOncologistOfPatientId(PatientId);\r\n    //     const doctors = await res.json();\r\n\r\n    //     //console.log('doctors', doctors);\r\n\r\n    //     // there should be only 1 primary oncologist of a patient.\r\n\r\n    //     // get only the new start\r\n    //     //const list_newstart = list.filter(item => item.ActivityCode.toLowerCase().includes(\"new start\"))\r\n\r\n    //     //console.log('list_newstart', list_newstart)\r\n\r\n    //     setDoctor(doctors[0]);\r\n    // }\r\n\r\n\r\n    const fetchList = (PatientId, ScheduledStartTime)=>{\r\n\r\n        console.log('ScheduledActivityList - fetchList()')\r\n\r\n        if(!loggedIn())\r\n        {\r\n            console.log('fetchList -> User not logged in. Returing....')\r\n            return;\r\n        }\r\n\r\n        const dp = new ScheduledActivityDataProvider(props.user.token);\r\n\r\n        // date range: from sim date to 1 year later\r\n        const dt =new Date(ScheduledStartTime); // simDate\r\n        let dt_1 = new Date();\r\n        dt_1.setDate(dt.getDate()+365); // a year later \r\n        const StartDateTime_begin = `${dt.getMonth()+1}-${dt.getDate()}-${dt.getFullYear()}`\r\n        const StartDateTime_end = `${dt_1.getMonth()+1}-${dt_1.getDate()}-${dt_1.getFullYear()}`\r\n\r\n        dp.getScheduledActivitiesPerPatientId(PatientId, StartDateTime_begin, StartDateTime_end)\r\n        .then(res=>{\r\n          return res.json()\r\n        })\r\n        .then(list =>{\r\n          // get only the new start\r\n          const list2 = list.filter(item => item.ActivityCategoryCode.toLowerCase().includes(\"treatment\"))\r\n        \r\n           setTxList(list2)\r\n        })\r\n        .catch(err=>{\r\n          alert(\"Failed fetching treatment list!\");\r\n          //alert(JSON.stringify(err))\r\n        })\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect');\r\n\r\n        fetchList(simItem.PatientId, simItem.ScheduledStartTime);\r\n\r\n        //findPrimaryOncologistOfPatientId(PatientId);\r\n\r\n    }, [simItem.PatientId]);\r\n\r\n    // called when the selection changed\r\n    let selected = [];\r\n    const selectionChange = (txItem, checked)=>{\r\n      if(checked)\r\n        {\r\n          selected.push(txItem);\r\n        }\r\n        else\r\n        {\r\n          selected = selected.filter(item=> item !== txItem)\r\n        }\r\n    }\r\n    \r\n    ////////////////\r\n    // Add tp PlanQ\r\n    const handleAddToPlanQ = ()=>\r\n    {\r\n        console.log('adding a case!')\r\n\r\n        if(selected.length===0)\r\n        {\r\n          alert(\"Please select items to add to the plan Q\");\r\n          return;\r\n        } \r\n\r\n        ///////////////////////////\r\n        // find Primary Oncologist\r\n        //const doctorString = doctor.LastName+\",\"+doctor.FirstName;\r\n        //console.log('doctor========>', doctor)\r\n\r\n        selected.forEach(txItem=>{\r\n          // remove Z to make the string as local time. \r\n          // The time stamps in ARIA is in UTC format, but it's actually local time.\r\n          const newstart_date = new Date(txItem.ScheduledStartTime.replace(\"Z\",\"\"))\r\n\r\n          //console.log('newstart_date',newstart_date)\r\n          const plan =  {\r\n              case_name: `${simItem.LastName}-${simItem.PatientId}`,\r\n              sim: new Date(simItem.ScheduledStartTime.replace('Z','')),\r\n              status: \"Sim Completed\",\r\n              newstart: newstart_date,\r\n              plan_name: \"\",\r\n              planners: \"\",\r\n              // doctors: doctorString,\r\n              doctors:\"\",\r\n              tx_site: \"\",\r\n              note: simItem.ActivityNote,\r\n              logs: []\r\n              };\r\n      \r\n          //console.log('adding plan to Q', plan)\r\n          props.addplan(plan)\r\n        }) // forEach\r\n\r\n        alert(`${selected.length} items havev been added to PlanQ`);\r\n        selected=[];\r\n        handleClose();\r\n    }   // handleAddToPlanQ\r\n\r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={props.handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Treatment List\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleAddToPlanQ}>\r\n                ADD TO PLANQ\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={props.handleClose}>\r\n                CANCEL\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n       {\r\n           txList.map(item=>(<TreatmentItem key={uuidv4()} txItem={item} selectionChange={selectionChange} />))\r\n       } \r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DT from '../helpers/dt'\r\nimport './SimScheduleItem.css'\r\nimport TreatmentList from './TreatmentList';\r\n\r\nexport default function SimScheduleItem(props){\r\n\r\n    const {scheduleItem} = props;\r\n    const {ScheduledStartTime, LastName, PatientId, ActivityCode, ScheduledActivityCode, ActivityNote} = scheduleItem;\r\n\r\n    //console.log(props)\r\n    // ActivityCode: \"Initial IMRT Sim UH\"\r\n    // ScheduledStartTime: \"2020-02-11T09:00:00.000Z\"\r\n    // ScheduledActivityCode: \"Manually Completed\"\r\n    // ActivityNote: \"prostate\"\r\n    // PatientId: \"xxxxxxxxx\"\r\n    // LastName: \"xxxxxxx\"\r\n    // FirstName: \"xxxxxx\"\r\n    // ScheduledActivitySer: \"971151\"\r\n    // CreatedByUserName: \"jberkosk\"\r\n    // CreationDate: \"2020-02-11T07:42:13.470Z\"\r\n    // HstryUserName: \"sabagaro\"\r\n    // HstryDateTime: \"2020-02-11T09:33:48.343Z\"\r\n    // HstryTaskName: \"AriaPM\"\r\n\r\n    /////////////////////////////\r\n    // sim schedule dialog open/close\r\n    const [scheduledActivitiesDlgOpen, setScheduledActivitiesDlgOpen] = useState(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"item\">\r\n                <ul className=\"schedule_item\">\r\n                    <li className=\"ScheduledStartTime\">{DT.MM_DD_DAY(new Date(ScheduledStartTime.replace('Z','')))}</li>\r\n                    <li className=\"LastName\">{LastName}</li>\r\n                    <li className=\"PatientId\">{PatientId}</li>\r\n                    <li className=\"ActivityCode\">{ActivityCode}</li>\r\n                    <li className=\"ScheduledActivityCode\">{ScheduledActivityCode}</li>\r\n                    <li className=\"ActivityNote\">{ActivityNote}</li>\r\n                </ul>\r\n                \r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    className=\"add_button\"\r\n                    endIcon={<AddIcon/>}\r\n                    onClick={()=>{setScheduledActivitiesDlgOpen(true)}}\r\n                >\r\n                PlanQ\r\n                </Button>\r\n\r\n                <TreatmentList  \r\n                    open = {scheduledActivitiesDlgOpen}  \r\n                    handleClose = {()=>{setScheduledActivitiesDlgOpen(false)}}\r\n                    user = {props.user}\r\n                    simItem = {props.scheduleItem}\r\n                    addplan = {props.addplan}\r\n                />\r\n\r\n            </div>\r\n            <Divider/>\r\n        </React.Fragment>\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class EnumDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/enums';\r\n        this.token = token;\r\n    }\r\n\r\n    getEnums(){\r\n        const url_query = `${this.url}?token=${this.token}`;\r\n        return fetch(url_query);\r\n    }\r\n\r\n    getEnums_prop(prop_name)\r\n    {\r\n        const url_query = `${this.url}/${prop_name}?token=${this.token}`;\r\n        return fetch(url_query);\r\n    }\r\n  \r\n\r\n} // class\r\n","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport List from '@material-ui/core/List';\r\nimport SimScheduleItem from './SimScheduleItem'\r\nimport ScheduledActivityDataProvider from '../providers/ScheduledActivityDataProvider'\r\nimport EnumDataProvider from '../providers/EnumDataProvider'\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport logger from '../helpers/logger'\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n//    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\n  import DateFnsUtils from '@date-io/date-fns';\r\n\r\n  import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function addDays(date, days) {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  }\r\n\r\n  function Message(props) {\r\n    return <h1>{props.msg}</h1>;\r\n  }\r\n\r\n  function SimList(props){\r\n    const {list, addplan, user} = props;\r\n    return (\r\n    <List>\r\n    { \r\n        list.map((item,i)=>(<SimScheduleItem key={uuidv4()} scheduleItem={item} addplan = {addplan} user={user}/>))\r\n    }\r\n    </List>)\r\n  }\r\n\r\nexport default function SimSchedule(props)\r\n{\r\n\r\n    const {open, handleClose, addplan, user} = props;\r\n\r\n    logger.log('SimSchedule()');\r\n\r\n    const classes = useStyles()\r\n\r\n    //////////////////\r\n    // fetch sim_list\r\n    const [simResourceList, setSimResourceList] = useState([]);\r\n    useEffect(()=>{\r\n\r\n        console.log('SimSchedule->useEffect- fetching simResourceList')        \r\n\r\n        const dp = new EnumDataProvider(user.token);\r\n        dp.getEnums_prop(\"sim_list\").\r\n        then(res=>{\r\n            return res.json()\r\n        })\r\n        .then(data=>{\r\n            \r\n            setSimResourceList(data)\r\n\r\n            if(data && data.length>0)\r\n            {\r\n                setResourceSer(data[0].aria_resourceser);\r\n            }\r\n               \r\n        })\r\n        .catch(err=>{\r\n            console.error('SimSchedule - fetching simResourceList failed')\r\n            console.error(err)\r\n\r\n            alert(\"Fetching simulation list failed! You may click 'Refresh' button on the browser & try again\");\r\n            //alert(JSON.stringify(err))\r\n        })\r\n        \r\n    },[user])\r\n    \r\n\r\n    ///////////////\r\n    // Resource\r\n    const [resourceSer, setResourceSer] = React.useState(null);\r\n    const handleResourceSerChange = event => {\r\n//        console.log('event.target.value', event.target.value)\r\n        setResourceSer(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Message\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    ///////////////\r\n    // Sim Date\r\n    const today = new Date();\r\n    let simDateList = [];\r\n    for(var i=0; i<7; i++)\r\n    {\r\n        let day = new Date();\r\n        day.setDate(today.getDate()-i);\r\n        const dateString = `${day.getMonth()+1}-${day.getDate()}-${day.getFullYear()}`;\r\n        simDateList.push(dateString);\r\n    }\r\n\r\n    const [simDate, setSimDate] = React.useState(simDateList[0]);\r\n    const handleSimDateChange = e => {\r\n        setSimDate(e.target.value);\r\n    };\r\n\r\n  ///////////////\r\n  // Schedule List\r\n  const [list, setList] = React.useState([]);\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n  \r\n  ////////////////////////\r\n  // fetch simulation list\r\n  const fetchList = async () => {\r\n\r\n    console.log('SimSchedule-->fetchList()')\r\n\r\n    if(!loggedIn())\r\n    {\r\n        console.log('fetchList -> User not logged in. Returing....')\r\n        return;\r\n    }\r\n    \r\n    const dp = new ScheduledActivityDataProvider(user.token);\r\n        \r\n    const ResourceSer = resourceSer;\r\n    const parts = simDate.split('-');\r\n    const YYYY = parseInt(parts[2]);\r\n    const MM = parseInt(parts[0]);\r\n    const DD = parseInt(parts[1]);\r\n\r\n    const dt = new Date(YYYY, MM-1, DD);\r\n    const dt_1 = addDays(dt,1);\r\n    \r\n    // let dt_new Date();\r\n    // dt_1.setDate(dt.getDate()+1);\r\n    \r\n    // today\r\n    const StartDateTime_begin = `${dt.getMonth()+1}-${dt.getDate()}-${dt.getFullYear()}`\r\n    const StartDateTime_end = `${dt_1.getMonth()+1}-${dt_1.getDate()}-${dt_1.getFullYear()}`\r\n\r\n    // console.log('ResourceSer', ResourceSer)\r\n    // console.log('StartDateTime_begin', StartDateTime_begin)\r\n    // console.log('StartDateTime_end', StartDateTime_end)\r\n    \r\n\r\n    // var xhr = new XMLHttpRequest();\r\n    // const url_query = `${config.webservice_url}/aria/scheduled_activities/ScheduledActivitiesPerResourceSer/${ResourceSer}/${StartDateTime_begin}/${StartDateTime_end}`\r\n    // xhr.open('GET', url_query, true);\r\n    // xhr.withCredentials = true;\r\n    // xhr.onreadystatechange = function() {\r\n    //   if (this.readyState == 4 && this.status == 200) {\r\n    //      // Typical action to be performed when the document is ready:\r\n    //      console.log('xhr.responseText',xhr.responseText);\r\n    //      const data = JSON.parse(xhr.responseText);\r\n    //      console.log('data==>', data);\r\n    //      setList(data);\r\n    //      setMessage(\"\");\r\n    //   }\r\n    //   else{\r\n    //       setMessage(\"Please login\")\r\n    //   }\r\n    // };\r\n    // xhr.send(null);\r\n\r\n    const res = await dp.getScheduledActivitiesPerResourceSer(ResourceSer, StartDateTime_begin, StartDateTime_end);\r\n    //console.log('res',res)\r\n    if(res.status === 401) // Unauthorized. \r\n    {\r\n        setMessage(\"Please login\");\r\n    }else{\r\n        const data = await res.json();\r\n        //console.log('list==>', data);\r\n        setList(data);\r\n        setMessage(\"\");\r\n    }\r\n  } // fetchList\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect()')\r\n    fetchList();\r\n  }, [resourceSer,simDate, open, simResourceList]); \r\n\r\n  const handleRefresh = ()=>{\r\n      fetchList();\r\n  }\r\n\r\n    return(\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                CT Sim\r\n            </Typography>\r\n\r\n            {/* Resource */}\r\n            <FormControl className={classes.formControl}>\r\n            <Select\r\n                native\r\n                value={resourceSer}\r\n                onChange={handleResourceSerChange}\r\n                inputProps={{\r\n                    name: 'resourceSer',\r\n                    id: 'resourceSer-native-simple',\r\n                }}\r\n            >\r\n                {\r\n                    simResourceList.map(res=>{\r\n                        return (<option value={res.aria_resourceser} key={uuidv4()}>{res.name}</option>)\r\n                    })\r\n                }\r\n            </Select>\r\n            </FormControl>\r\n\r\n            {/* Sim Date */}\r\n            <FormControl className={classes.formControl}>\r\n            <Select\r\n                native\r\n                value={simDate}\r\n                onChange={handleSimDateChange}\r\n                inputProps={{\r\n                    name: 'simDate',\r\n                    id: 'simDate-native-simple',\r\n                }}\r\n            >\r\n                {\r\n                    simDateList.map(date=>{\r\n                        return (<option value={date} key={uuidv4()}>{date}</option>)\r\n                    })\r\n                }\r\n            </Select>\r\n            </FormControl>\r\n\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        {\r\n            (loggedIn())?(<SimList list = {list} user={user} addplan={addplan} />):(<Message msg=\"please login\"/>)\r\n        }\r\n\r\n\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>\r\n    ) // return\r\n} // function","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport config from '../config'\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport logger from '../helpers/logger'\r\n\r\nimport './Login.css'\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    \r\n    root: {\r\n\r\n    },\r\n    appBar: {\r\n     position: 'relative',\r\n     },\r\n     title: {\r\n       //marginLeft: theme.spacing(2),\r\n       flex: 1,\r\n     },\r\n       formControl: {\r\n          margin: theme.spacing(1),\r\n        //  minWidth: 120,\r\n        //  backgroundColor: 'white'\r\n       },\r\n       button: {\r\n         margin: theme.spacing(1),\r\n      },\r\n      alert: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(0),\r\n        },\r\n      },\r\n   })); // classes\r\n\r\n \r\n\r\n\r\nexport default function Login(props)\r\n{\r\n  logger.log('Login()')\r\n\r\n    const classes = useStyles()\r\n\r\n    ///////////////\r\n    // userid\r\n    const [userid, setUserid] = React.useState(\"\");\r\n    const handleUseridChange = event => {\r\n        setUserid(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Password\r\n    const [pw, setPw] = React.useState(\"\");\r\n    const handlePwChange = event => {\r\n        setPw(event.target.value);\r\n    };\r\n\r\n    ///////////////\r\n    // Alert Message\r\n    const [msg, setMsg] = React.useState(\"\");\r\n\r\n    const handleMsgClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n\r\n      setMsg(\"\");\r\n    };\r\n    \r\n    const [openAlert, setAlertOpen] = React.useState(false);\r\n    const handleAlertClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n        setAlertOpen(false);\r\n    };\r\n\r\n    ///////////////\r\n    // Submit\r\n    const handleSubmit = () => {\r\n\r\n        const data = {userid: userid, password: pw};\r\n        const url = config.webservice_url + '/users/authenticate';\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        xhr.onreadystatechange = function() { // Call a function when the state changes.\r\n          if (this.readyState === XMLHttpRequest.DONE && this.status === 200) \r\n          {\r\n            // successful login\r\n\r\n            // set user\r\n            const user = JSON.parse(xhr.responseText);\r\n            props.setUser(user);\r\n\r\n            // close the login dialogbox\r\n            props.handleLoginClose();\r\n\r\n            // remove password\r\n            setPw(\"\");\r\n           \r\n            setAlertOpen(false);\r\n          }\r\n          else{\r\n            // login failed, let user to try again\r\n            const msg = \"Login Failed. Try again. Use your computer login ID and PW.\";\r\n\r\n            setMsg(msg)\r\n            setAlertOpen(true);\r\n\r\n            // remove password\r\n            setPw(\"\");\r\n          }\r\n        }// function\r\n        \r\n        xhr.send(JSON.stringify(data));\r\n        // xhr.send(new Int8Array()); \r\n        // xhr.send(document);\r\n    };\r\n\r\n    const handlePwKeyUp = e=>{\r\n      if(e.keyCode === 13) // enter key pressed\r\n        handleSubmit();\r\n    }\r\n\r\n    return(\r\n\r\n    // <Dialog fullScreen className={classes.root} open={props.loginOpen} onClose={props.handleLoginClose} TransitionComponent={Transition}>\r\n    <Dialog className='login-dialog' open={props.loginOpen} onClose={props.handleLoginClose}>      \r\n         <FormControl className={classes.formControl}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Login\r\n                </Typography>\r\n\r\n                <Button autoFocus color=\"inherit\" onClick={props.handleLoginClose}>\r\n                    CLOSE\r\n                </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </FormControl>\r\n\r\n        <FormControl className={classes.formControl}>\r\n        {/* Userid */}\r\n        <TextField\r\n            id=\"textfield_userid\"\r\n            className={classes.textField}\r\n            label=\"User Id\"\r\n            value={userid}\r\n            // InputLabelProps={{shrink:true}}\r\n            onChange = {handleUseridChange}\r\n        />\r\n        </FormControl>\r\n\r\n        {/* Password */}\r\n        <FormControl className={classes.formControl}>\r\n        <TextField\r\n            id=\"textfield_password\"\r\n            className={classes.textField}\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value={pw}\r\n            onKeyUp={handlePwKeyUp}\r\n            // InputLabelProps={{shrink:true}}\r\n            onChange = {handlePwChange}\r\n        />\r\n        </FormControl>\r\n\r\n        <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleAlertClose}>\r\n        <Alert onClose={handleAlertClose} severity=\"error\">\r\n          {msg}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.button}\r\n        onClick={handleSubmit}\r\n      >\r\n        Submit\r\n      </Button>\r\n\r\n    </Dialog>\r\n\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class QaDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/qalist';\r\n        this.token = token;\r\n    }\r\n\r\n    getQAs(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs(){\r\n      return fetch(this.url+`/notcompleted?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs(){\r\n      return fetch(this.url+`/completed?token=${this.token}`);\r\n    }\r\n\r\n    getQAs_skip_limit(skip, limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs_skip_limit(skip,limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/notcompleted/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs_skip_limit(skip,limit){\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/completed/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }    \r\n\r\n    getQAs_machines_skip_limit(machines,skip, limit){\r\n      machines = encodeURIComponent(machines)\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getPendingQAs_machines_skip_limit(machines,skip,limit){\r\n        machines = encodeURIComponent(machines)\r\n        skip = encodeURIComponent(skip)\r\n        limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/notcompleted/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }\r\n\r\n    getCompletedQAs_machines_skip_limit(machines,skip,limit){\r\n      machines = encodeURIComponent(machines)\r\n      skip = encodeURIComponent(skip)\r\n      limit = encodeURIComponent(limit)\r\n      return fetch(`${this.url}/completed/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`);\r\n    }    \r\n\r\n    addQA(qa) {\r\n     //   console.log('adding a plan', plan);\r\n        return fetch(this.url+`?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(qa)\r\n        });\r\n      }\r\n\r\n      updateQA(qa,addtional_querystring) {\r\n     //   console.log('updating a plan', plan);\r\n        const qa_url = this.url+'/'+qa._id;\r\n        \r\n        let url = qa_url +`?token=${this.token}`;\r\n\r\n        if(addtional_querystring)\r\n           url = url+addtional_querystring;\r\n        \r\n        console.log('url==>', url);\r\n        return fetch(url, {\r\n          method: 'PATCH',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(qa)\r\n        });\r\n      }\r\n\r\n\r\n      deleteQA(qa) {\r\n    //    console.log('deleting a plan', plan);\r\n        const qa_url = this.url+'/'+qa._id;\r\n    //    console.log('plan url', plan_url);\r\n        return fetch(qa_url+`?token=${this.token}`, {\r\n          method: 'DELETE',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          }\r\n          //body: JSON.stringify(plan)\r\n        });\r\n      }\r\n} // class\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport './SimpleDlg.css'\r\n\r\nexport default function SimpleDlg(props) {\r\n\r\n  const {open, handleClose, title, msg, buttons, error} = props;\r\n\r\n  \r\n  const titleClass = (error)?'simple-dlg-error-title':'simple-dlg-info-title'\r\n    \r\n  return (\r\n      <Dialog\r\n        open={open}\r\n        className='simple-dlg'\r\n      >\r\n        {/* Title */}\r\n        <DialogTitle\r\n          className={titleClass}\r\n          > \r\n          {title}\r\n        </DialogTitle>\r\n\r\n        {\r\n          (msg)&&(\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-msg\">\r\n                {msg}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n          )\r\n        } \r\n        \r\n        <DialogActions>\r\n          {\r\n            (buttons.includes('Yes')) && (\r\n            <Button onClick={()=>{handleClose('Yes')}} color=\"primary\">\r\n            Yes\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('No')) && (\r\n            <Button onClick={()=>{handleClose('No')}} color=\"primary\">\r\n            No\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('Ok')) && (\r\n            <Button onClick={()=>{handleClose('Ok')}} color=\"primary\">\r\n            Ok\r\n            </Button>\r\n            )\r\n          }\r\n\r\n          {\r\n            (buttons.includes('Cancel')) && (\r\n            <Button onClick={()=>{handleClose('Cancel')}} color=\"primary\">\r\n            Cancel\r\n            </Button>\r\n            )\r\n          }\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useForm from './useForm'\r\nimport './GammaDlg.css'\r\n\r\nexport default function GammaDlg(props) {\r\n\r\n    const {open, handleClose} = props;\r\n\r\n    const [values, handleChange] = useForm({PD:3,DTA:2,G:95});\r\n\r\n\r\n\r\n  return (\r\n      <Dialog\r\n        open={open}\r\n      >\r\n        <div className='gamma-title'>Gamma Result</div>\r\n        { <DialogContent>\r\n            <div className=\"gamma-wrapper\">\r\n                  Gamma: [\r\n                    <select id=\"PD\" \r\n                    name=\"PD\"\r\n                    onChange={handleChange} \r\n                    value={values.PD}\r\n                    >\r\n                    <option value=\"1\">1 %</option>\r\n                    <option value=\"2\">2 %</option>\r\n                    <option value=\"3\">3 %</option>\r\n                    <option value=\"4\">4 %</option>\r\n                    <option value=\"5\">5 %</option>\r\n                  </select>\r\n                  /\r\n\r\n                  <select id=\"DTA\" \r\n                    name=\"DTA\"\r\n                    onChange={handleChange} \r\n                    value={values.DTA}\r\n                    >\r\n                    <option value=\"1\">1 mm</option>\r\n                    <option value=\"2\">2 mm</option>\r\n                    <option value=\"3\">3 mm</option>\r\n                    <option value=\"4\">4 mm</option>\r\n                    <option value=\"5\">5 mm</option>\r\n                  </select>\r\n                  ] => \r\n                  <input id=\"G\" name=\"G\" onChange={handleChange} value={values.G}/>\r\n                  %\r\n            </div>\r\n        </DialogContent>\r\n         }\r\n        <DialogActions>\r\n        <Button onClick={()=>{handleClose(values)}} color=\"primary\" autoFocus>\r\n            OK\r\n          </Button>\r\n          <Button onClick={()=>{handleClose(null)}} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import {useState} from 'react';\r\n\r\nexport default function useForm(initialVlaues){\r\n    const [values, setValues] = useState(initialVlaues);\r\n\r\n    const handleChange = (e)=>{\r\n        setValues({...values, [e.target.name]:e.target.value})\r\n    }\r\n\r\n    return [values, handleChange]\r\n}","import React, {useState} from 'react';\r\nimport './QAListItem.css'\r\nimport DT from '../helpers/datetime'\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\nimport GammaDlg from '../helpers/GammaDlg'\r\n\r\nexport default function QaListItem(props){\r\n\r\n    console.log('QAListItem()')\r\n    \r\n    const {qaitem, user, save_qa, delete_qa} = props;\r\n    const {qa, dirty} = qaitem;\r\n    const {due_on, plan_case_name, plan, type, result, machine, requested_by, requested_on, completed_by, completed_on, notes} = qa;\r\n\r\n    const dt = new DT();\r\n\r\n    const [values, setValues] = useState({result:result, notes: notes})\r\n\r\n    const [saveButtonEnabled, setSaveButtonEnabled] = useState(false);\r\n    const readyToComplete=()=>{\r\n        \r\n        // someone compalted already? no need to complate again.\r\n        if(qa.completed_by.trim()!==\"\")  \r\n            return false;\r\n\r\n        // no result? cannot complete the qa yet.\r\n        if(qa.result.trim() === \"\") // no result yet?\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const [completeButtonEnabled, setCompleteButtonEnabled] = useState(readyToComplete());\r\n\r\n    const handleSaveQa = ()=>{\r\n        \r\n        // save the current value\r\n        qa.result = values.result;\r\n        qa.notes = values.notes;\r\n        \r\n        // save\r\n        save_qa(qa);\r\n\r\n        setSaveButtonEnabled(false)\r\n    }\r\n\r\n    const handleDeleteQa = ()=>{\r\n        delete_qa(qaitem.qa);\r\n    }\r\n    \r\n    const handleCompleteQa = ()=>{\r\n\r\n        // completer info\r\n        qa.completed_on = new Date();\r\n        qa.completed_by = `${user.name}|${user.email}|${user.userid}`;    \r\n        \r\n        // save the current value\r\n        qa.result = values.result;\r\n        qa.notes = values.notes;\r\n    \r\n        // save\r\n        save_qa(qa, \"&action=completed\");\r\n\r\n        setSaveButtonEnabled(false)\r\n        setCompleteButtonEnabled(false)\r\n    }\r\n  \r\n    const handleChagneInput = (e)=>{\r\n        if(e.target.name==='notes')\r\n        {\r\n            setValues({...values, notes:e.target.value})\r\n            setSaveButtonEnabled(true);\r\n        }\r\n    }\r\n\r\n    const [openConfirmDlg, setOpenConfirmDlg] = useState(false);\r\n    const [openGammaDlg, setOpenGammaDlg] = useState(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"qa_item\">\r\n                <div className=\"qa-due\">{dt.MM_DD_DAY(new Date(due_on))}</div>\r\n                <div className=\"qa-plan_case_name\">{plan_case_name}</div>\r\n                <div className=\"qa-plan\">{plan}</div>\r\n                <div className=\"qa-type\">{type}</div>\r\n                <div className=\"qa-machine\">{machine}</div>\r\n                <div className=\"qa-requested_by\">{requested_by.split('|')[0]}</div>\r\n\r\n                <div className='qa-result-wrapper'>\r\n                    <div className=\"qa-result\">{values.result}</div>\r\n                    {/* <input name=\"result\" value={values.result} onChange={handleChagneInput} placeholder=\"Result\"/> */}\r\n                    <button className='open-gamma-dlg' onClick={()=>{setOpenGammaDlg(true)}}>...</button>\r\n                </div>\r\n                <div><input name=\"notes\" value={values.notes} onChange={handleChagneInput} placeholder=\"Notes\"></input></div>\r\n                <div className=\"qa-completed_by\">{completed_by.split('|')[0]}</div>\r\n                {/* <li className=\"qa-requested_on\">{requested_on}</li> */}\r\n                <div className=\"button-container\">\r\n                    <div><button onClick={handleSaveQa} disabled={!saveButtonEnabled} > Save </button></div>\r\n                    <div><button onClick={handleCompleteQa} disabled={!completeButtonEnabled} > Complete </button></div>\r\n                    {/* <div><button onClick={handleReviewQa} disabled={!reiewButtonEnabled} > Review </button></div> */}\r\n                    <div><button onClick={()=>{setOpenConfirmDlg(true)}}>x</button></div>\r\n                </div>\r\n            </div>\r\n\r\n            <SimpleDlg id=\"delete_confirm_dialog\"\r\n                open = {openConfirmDlg}\r\n                title = \"Are you sure?\"\r\n                buttons='Yes|no'\r\n                handleClose = {(btnPressed)=>{\r\n                    if(btnPressed==='Yes')\r\n                        handleDeleteQa();\r\n                    setOpenConfirmDlg(false);\r\n                }}\r\n            />\r\n\r\n            <GammaDlg id=\"gamma_dialog\"\r\n                open = {openGammaDlg}\r\n                handleClose = {(result)=>{\r\n                    if(result) // ok clicked\r\n                    {\r\n                        const newResult = `G(${result.PD}%,${result.DTA}mm)=${result.G}%`\r\n\r\n                        setValues({...values, result:newResult})\r\n                        setSaveButtonEnabled(true);\r\n                        setCompleteButtonEnabled(true)\r\n                    }\r\n\r\n                    setOpenGammaDlg(false);\r\n                }}\r\n            />\r\n\r\n        </React.Fragment>\r\n    ) // return\r\n} // function","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport List from '@material-ui/core/List';\r\nimport QaDataProvider from '../providers/QaDataProvider'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './QAListDlg.css'\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n//    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\n  import DateFnsUtils from '@date-io/date-fns';\r\n\r\n  import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport QaListItem from './QAListItem'\r\n\r\n  const useStyles = makeStyles(theme =>({\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n    container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    },\r\n    formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    backgroundColor: 'white'\r\n    },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nfunction Message(props) {\r\n    return <h1>{props.msg}</h1>;\r\n}\r\n\r\nfunction QaList(props){\r\n    const {list, delete_qa, save_qa, user} = props;\r\n    return (\r\n        <List>\r\n        { \r\n            list.map((qaitem,i)=>(<QaListItem key={uuidv4()} qaitem={qaitem} delete_qa={delete_qa} save_qa={save_qa} user={user}/>))\r\n        }\r\n        </List>)\r\n}\r\n\r\nexport default function QAListDlg(props)\r\n{\r\n    const classes = useStyles()\r\n    \r\n    const {open, handleClose, user} = props;\r\n    \r\n    const [list, setList] = useState([]);\r\n\r\n    const statusList = ['Pending', 'Completed', 'All'];\r\n    const [status, setStatus] = useState(statusList[0]);\r\n    const handleStatusChange = (e) =>{\r\n      \r\n      console.log('status', e.target.value);\r\n      setStatus(e.target.value)\r\n    }\r\n\r\n    ///////////////\r\n    // pagenation\r\n    const initValues = {\r\n      page: 1,\r\n      totalCount: 0,\r\n    };\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const itemsPerPage = (user && user.settings && user.settings.qalist_num_of_cases_per_page)?user.settings.qalist_num_of_cases_per_page:10;    \r\n    const numOfPages = (totalCount%itemsPerPage>0) ? Math.floor(totalCount/itemsPerPage)+1:Math.floor(totalCount/itemsPerPage);\r\n    \r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n      };\r\n\r\n    const getQAs = (status, page, itemsPerPage)=>{\r\n      \r\n      const skip = (page-1)*itemsPerPage;\r\n      const limit = itemsPerPage;\r\n\r\n      if(!user || !user.token) return;\r\n\r\n      const dp = new QaDataProvider(user.token);\r\n      \r\n      if(!user.settings || !user.settings.my_machines || user.settings.my_machines.trim()==='') // no machine settings\r\n      {\r\n        switch(status){\r\n          case 'All':\r\n            return dp.getQAs_skip_limit(skip, limit);\r\n            break;\r\n          case 'Pending':\r\n              return dp.getPendingQAs_skip_limit(skip, limit);\r\n              break;\r\n          case 'Completed':\r\n                return dp.getCompletedQAs_skip_limit(skip, limit);\r\n                break;            \r\n          default:\r\n            console.error('Unknown status')\r\n        }\r\n      }\r\n      else\r\n      {\r\n        switch(status){\r\n          case 'All':\r\n            return dp.getQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n            break;\r\n          case 'Pending':\r\n              return dp.getPendingQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n              break;\r\n          case 'Completed':\r\n                return dp.getCompletedQAs_machines_skip_limit(user.settings.my_machines,skip, limit);\r\n                break;            \r\n          default:\r\n            console.error('Unknown status')\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    const fetchList = ()=>\r\n    {\r\n      if(!user || !user.userid)\r\n        {\r\n          console.log('user not logged in yet');\r\n          return;\r\n        }\r\n\r\n      getQAs(status, page, itemsPerPage)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n              \r\n              // items\r\n              const qaItemList = ret_data.list.map(qa=>{\r\n                return {\r\n                        qa:qa,\r\n                        dirty:false }\r\n              });\r\n\r\n              setList(qaItemList)\r\n\r\n              setTotalCount(ret_data.totalCount)\r\n          })\r\n          .catch(err=>console.log(err));\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n      fetchList();\r\n             \r\n    },[open, user, status, page]) // useEffect\r\n\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n\r\n  const handleRefresh = ()=>{\r\n      fetchList();\r\n  }\r\n\r\n  const delete_qa = (qa)=>\r\n  {\r\n    if(!loggedIn())  return;\r\n\r\n    const dp = new QaDataProvider(user.token);\r\n    dp.deleteQA(qa)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(ret_data => {\r\n        \r\n        // console.log('delete_qa->ret_data',ret_data)\r\n        if(ret_data.deletedCount===1){\r\n          // delete from the list \r\n          const newList = list.filter(qi=>qi.qa._id!==qa._id);\r\n          setList(newList);\r\n          setTotalCount(totalCount-1)\r\n        }\r\n        else{\r\n          console.error('delete qa failed. Either none deleted or more than 1 QAs deleted.')\r\n        }\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n        alert('Failed deleting the QA. You may click the \"Refresh\" button of the brower and try again')\r\n        //alert(JSON.stringify(err))\r\n      });\r\n  }\r\n\r\n  const save_qa = (qa, addtional_querystring)=>\r\n  {\r\n    if(!user || !user.token) return;\r\n\r\n    const dp = new QaDataProvider(user.token);\r\n    dp.updateQA(qa, addtional_querystring)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(ret_data => {\r\n        \r\n        // console.log('save_qa->ret_data',ret_data)\r\n        if(ret_data.nModified===1){\r\n           setList(list);\r\n        }\r\n        else{\r\n           console.error('save qa failed. Either none saved or more than 1 QAs saved.')\r\n           alert('Saving QA failed!')\r\n        }\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n        alert('Saving QA failed!')\r\n        //alert(JSON.stringify(err))\r\n      });\r\n  }\r\n\r\n\r\n    return(\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                QA List\r\n            </Typography>\r\n\r\n            {/* Status */}\r\n           <div className='qa-status-wrapper'>\r\n            <label htmlFor=\"qa-status\" >STATUS:</label>\r\n            <select id=\"qa-status\" onChange={handleStatusChange} value={status}>\r\n            {\r\n              statusList.map(s=>{\r\n                  return (<option value={s} key={uuidv4()}>{s}</option>)\r\n              })\r\n            }\r\n            </select>\r\n          </div>\r\n\r\n\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        {\r\n            (loggedIn())?(<QaList list = {list} delete_qa={delete_qa} save_qa={save_qa} user={user}/>):(<Message msg=\"please login\"/>)\r\n        }\r\n\r\n\r\n        <div className=\"qalist-pagenation\">\r\n            <Pagination count={numOfPages} page={page} onChange={handlePageChange} />\r\n            <div className='total-count'>N={totalCount}</div>\r\n        </div>\r\n\r\n    </Dialog>\r\n    </MuiPickersUtilsProvider>\r\n    ) // return\r\n} // function","import config from '../config'\r\n\r\nexport default class UserDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/users';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllUsers(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getUserByUserId(userid){\r\n        const url = `${this.url}/userid/${userid}?token=${this.token}`;\r\n        return fetch(url);\r\n    }\r\n\r\n    updateUser(user) {\r\n        console.log('updating a user', user);\r\n        const url = `${this.url}/userid/${user.userid}?token=${this.token}`;\r\n        console.log('url==>', url);\r\n        return fetch(url, {\r\n            method: 'PATCH',\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: JSON.stringify(user)\r\n        });\r\n    }\r\n\r\n    // deleteUser(user) {\r\n    // console.log('deleting a user', user);\r\n    // const url = `${this.url}/userid/${user.userid}?token=${this.token}`;\r\n    // return fetch(url, {\r\n    //     method: 'DELETE',\r\n    //     mode: 'cors', // no-cors, *cors, same-origin\r\n    //     headers: {\r\n    //     'Content-Type': 'application/json'\r\n    //     // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    //     }\r\n    //     //body: JSON.stringify(plan)\r\n    // });\r\n    // }\r\n    \r\n} // class\r\n","import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\nfunction make_dict(list, selected){\r\n    const dict = {}\r\n    list.forEach(key=>{\r\n        dict[key] = (selected.indexOf(key)>-1);\r\n    })\r\n    return dict;\r\n}\r\n\r\nexport default function CheckBoxSelectorDlg(props){\r\n\r\n    console.log('CheckBoxSelectorDlg()')\r\n\r\n    const {open, handleClose, title, list, selected} = props;\r\n\r\n    const classes = useStyles();\r\n    \r\n    const [dict, setDict] = React.useState(make_dict(list, selected))\r\n\r\n    useEffect(()=>{\r\n        setDict(make_dict(list, selected)\r\n    )}, [list, selected, open])\r\n\r\n    const handleChange = (event) => {\r\n        setDict({ ...dict, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    const handleClickOk = ()=>{\r\n\r\n        const checked_items = [];\r\n        Object.keys(dict).forEach(key=>{\r\n            if(dict[key])\r\n                checked_items.push(key)\r\n        })\r\n\r\n        handleClose(checked_items)\r\n    }\r\n\r\n    const handleClickCancel = ()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    return(\r\n        <Dialog\r\n            open={open}\r\n            className = 'checkbox-selector-dlg'\r\n        >\r\n        <DialogTitle className = 'checkbox-selector-dlg-title'>{title}</DialogTitle>\r\n        <DialogContent>\r\n        \r\n        \r\n        <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        {/* <FormLabel component=\"legend\">Assign responsibility</FormLabel> */}\r\n        <FormGroup>\r\n            {\r\n                Object.keys(dict).map(key=>(\r\n\r\n                    <FormControlLabel key={key}\r\n                        control={<Checkbox checked={ dict[key]} onChange={handleChange} name={key} />}\r\n                        label={key}\r\n                    />\r\n                ))\r\n            }\r\n          \r\n        </FormGroup>\r\n        {/* <FormHelperText>Be careful</FormHelperText> */}\r\n      </FormControl>\r\n    </div>\r\n\r\n          \r\n         \r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n        </Button>\r\n\r\n        <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n        </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        ) // return\r\n}","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport logger from '../helpers/logger'\r\nimport UserDataProvider from '../providers/UserDataProvider'\r\nimport CheckBoxSelectorDlg from '../helpers/CheckBoxSelectorDlg'\r\n\r\nimport config from '../config'\r\n\r\nimport './UserSettingsDlg.css'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n  function isInteger(label, value){\r\n    console.log('label===>', label)\r\n    console.log('value===>', value)\r\n    console.log('typeof value===>', typeof(value))\r\n\r\n    // is empty\r\n\r\n    if(!value || (typeof(value)==='string' && value.trim()===''))\r\n    {\r\n      alert(`\"${label}\" field cannot be empty`);\r\n      return false;\r\n    }\r\n\r\n    // is this a number?\r\n    if(isNaN(value))\r\n    { \r\n      alert(`\"${label}\" is not a number`);\r\n      return false;\r\n    } \r\n\r\n    // is this an integer\r\n    const num = Number(value);\r\n    if(!Number.isInteger(num)){\r\n      alert(`\"${label}\" is not an integer number`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function isPositiveInteger(label, value){\r\n    if(!isInteger(label, value))\r\n      return false;\r\n\r\n    if(parseInt(value)<1){\r\n      alert(`\"${label}\" is not a positive integer number`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\nexport default function UserSettingsDlg(props)    \r\n{\r\n    const {open, handleClose, user} = props;\r\n\r\n    logger.log('UseSettings()');\r\n\r\n    // console.log('UseSettingsDlg-user', user)\r\n    const classes = useStyles()\r\n\r\n  ////////////////////////\r\n  // is user logged in?\r\n  const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n  }\r\n  \r\n  const isValid = ()=>{\r\n \r\n    if(!isPositiveInteger('PlanQ - Number of cases per page', settings.planq_num_of_cases_per_page))\r\n      return false;\r\n    \r\n    if(!isPositiveInteger('QA - Number of cases per page', settings.qalist_num_of_cases_per_page))\r\n      return false;\r\n\r\n    return true;\r\n }\r\n\r\n  const handleApply = ()=>{\r\n    console.log('handleApply')\r\n    if(!isValid())\r\n      return;\r\n\r\n    console.log('setting dirty to false')\r\n    setDirty(false);\r\n\r\n    console.log('settings========>', settings)\r\n\r\n    // return the values\r\n    handleClose(settings)\r\n  }\r\n\r\n  const handleCancel = ()=>\r\n  {\r\n    handleClose(null)\r\n  }\r\n  \r\n  const initValues = {\r\n    notify_planq_list: false,\r\n    planq_num_of_cases_per_page: 10,\r\n    qalist_num_of_cases_per_page: 10,\r\n    notify_qa_new: false,\r\n    notify_qa_completed_all: false,\r\n    notify_aria_rx_change: false,\r\n    notify_aria_plan_change: false,\r\n    notify_aria_structure_change:false,\r\n    notify_for_all_patients:false,\r\n    planner: false,\r\n    doctor: false,\r\n    aria_userid: \"\",\r\n    my_machines: (config)?config.machine_list.join(','):'' \r\n  }\r\n\r\n  const [settings, setSettings] = useState(initValues);\r\n  const [dirty, setDirty] = useState(false);\r\n\r\n  \r\n  const handleChange = (e) =>{\r\n\r\n    if(e.target.type === \"checkbox\")\r\n    {\r\n        setSettings({...settings, [e.target.name]:e.target.checked})\r\n    }\r\n    else\r\n    {\r\n        setSettings({...settings, [e.target.name]:e.target.value})\r\n    }\r\n\r\n    setDirty(true);\r\n  }\r\n\r\n\r\n  ////////////////////////\r\n  // fetch user\r\n  const fetchData = useCallback(async () => {\r\n\r\n    console.log('UserSettingsDlg - fetchList()')\r\n\r\n    if(!loggedIn())\r\n    {\r\n        console.log('fetchData -> User not logged in. Returing....')\r\n        return;\r\n    }\r\n\r\n    const dp = new UserDataProvider(props.user.token)\r\n    dp.getUserByUserId(props.user.userid)\r\n    .then(res=>{\r\n      return res.json()\r\n    })\r\n    .then(user=>{\r\n      if(user && user.settings)\r\n      {\r\n        // overwrite the current settings with the user settings\r\n  \r\n        // if user has no machine settings\r\n        if(!user.settings.my_machines || user.settings.my_machines.trim()===\"\")\r\n          if(config)\r\n            user.settings.my_machines = config.machine_list.join(',')\r\n  \r\n        setSettings({...settings, ...user.settings})\r\n      }\r\n  \r\n      setDirty(false);\r\n    })\r\n    .catch(err=>{\r\n      alert('Failed fetching user data!')\r\n    })\r\n\r\n\r\n  },[user, open]) // fetchData\r\n\r\n  useEffect(() => {\r\n    console.log('UserSettingsDlg-->useEffect()')\r\n    fetchData();\r\n  }, [open, user, fetchData]); \r\n\r\n  const [openMachineSelectorDlg, setOpenMachineSelectorDlg] = useState(false);\r\n  const handleMachineSelectorDlgClose = (selected)=>\r\n  {\r\n    \r\n    if(selected) {\r\n      const machines =  selected.join(',');\r\n\r\n      setSettings({...settings, my_machines: machines})\r\n      setDirty(true);\r\n    }\r\n\r\n    // close dlg\r\n    setOpenMachineSelectorDlg(false)\r\n  }\r\n  \r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCancel} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Use Settings\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleApply} disabled={!dirty}>\r\n                Apply\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleCancel}>\r\n                Cancel\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n\r\n<div className='user-settings-content'>\r\n\r\n      {/* About Me */}\r\n      <div className='card'>\r\n        <div className='card-title'>About Me</div>\r\n        <div className='card-content'>\r\n\r\n         <div className='user-settings-item-wrapper'>\r\n            My Email: {user.email}\r\n         </div>\r\n         <div className='user-settings-item-wrapper'>\r\n            My Name: {user.name}\r\n          </div>\r\n          <div className='item-helper-text'>\r\n             (If the email/name above is not correct, please contact the administrator)\r\n          </div>\r\n\r\n            {/* I am a planner */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>I am a planner</label>\r\n              <Switch\r\n                  name=\"planner\"\r\n                  checked={settings.planner}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n\r\n            </div>\r\n            {/* I am a doctor */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>I am a doctor</label>\r\n              <Switch\r\n                  name=\"doctor\"\r\n                  checked={settings.doctor}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n        {/* My Machines */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>My Machines</label>\r\n          <div className='item-input'>\r\n            <span>{settings.my_machines}</span>\r\n            <button onClick={()=>setOpenMachineSelectorDlg(true)}>...</button>\r\n          </div>\r\n        </div>\r\n        <div className='item-helper-text'>\r\n             (If blank, it means I am interested in all machines)\r\n        </div>\r\n        <CheckBoxSelectorDlg \r\n          open = {openMachineSelectorDlg}\r\n          handleClose = {handleMachineSelectorDlgClose}\r\n          title = \"Select Machines\"\r\n          list = {(config)?config.machine_list:[]}\r\n          selected = {settings.my_machines.split(',')}\r\n        />\r\n\r\n\r\n\r\n         </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n      {/* PlanQ */}\r\n      <div className='card'>\r\n        <div className='card-title'>PlanQ</div>\r\n        <div className='card-content'>\r\n            \r\n            {/* Daily PlanQ Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Send me PlanQ list every morning</label>\r\n              <Switch\r\n                  name=\"notify_planq_list\"\r\n                  checked={settings.notify_planq_list}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            {/* Num of items per page */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Number of cases per page</label>\r\n              <input \r\n                name='planq_num_of_cases_per_page'\r\n                value={settings.planq_num_of_cases_per_page}\r\n                className='item-input'\r\n                onChange = {handleChange}\r\n              />\r\n            </div>\r\n            \r\n            \r\n\r\n          </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n{/* QA */}\r\n<div className='card'>\r\n        <div className='card-title'>QA</div>\r\n        <div className='card-content'>\r\n            \r\n            {/* Notify me for new QA cases */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for all new QA creations</label>\r\n              <Switch\r\n                  name=\"notify_qa_new\"\r\n                  checked={settings.notify_qa_new}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n             {/* Notify me for all completed QA cases */}\r\n             <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for all QA completions</label>\r\n              <Switch\r\n                  name=\"notify_qa_completed_all\"\r\n                  checked={settings.notify_qa_completed_all}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            {/* Num of items per page */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Number of QA items per page</label>\r\n              <input \r\n                name='qalist_num_of_cases_per_page'\r\n                value={settings.qalist_num_of_cases_per_page}\r\n                className='item-input'\r\n                onChange = {handleChange}\r\n              />\r\n            </div>\r\n\r\n          </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n    {/* ARIA  */}\r\n    <div className='card'>\r\n        <div className='card-title'>ARIA</div>\r\n        <div className='card-content'>\r\n\r\n        {/* Aria User Id */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>My Aria User Id</label>\r\n          <input \r\n            name='aria_userid'\r\n            value={settings.aria_userid}\r\n            className='item-input'\r\n            onChange = {handleChange}\r\n          />\r\n        </div>\r\n        <div className='item-helper-text'>\r\n             (If ARIA User Id is not entered or incorrect, no ARIA notifiation will be sent)\r\n        </div>        \r\n\r\n          {/* Aria Prescrition (New & status change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Prescription</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_rx_change\"\r\n                  checked={settings.notify_aria_rx_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n          {/* Plan Status Change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Plan</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_plan_change\"\r\n                  checked={settings.notify_aria_plan_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n          {/* Structure Status Change Notification */}\r\n            <div className='user-settings-item-wrapper'>\r\n              <label className='item-label'>Notify me for <u>Structure</u> changes</label>\r\n              <Switch\r\n                  name=\"notify_aria_structure_change\"\r\n                  checked={settings.notify_aria_structure_change}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          </div>\r\n\r\n        {/* All Patients */}\r\n        <div className='user-settings-item-wrapper'>\r\n          <label className='item-label'>Notify me for the changes in <u>all monitored patients</u></label>\r\n          <Switch\r\n                  name=\"notify_for_all_patients\"\r\n                  checked={settings.notify_for_all_patients}\r\n                  className=\"item-input\"\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n              />\r\n          <div className='item-helper-text'>\r\n            (Monitored patients are those in the PlanQ with its newstart date is today or later)\r\n            </div>\r\n        </div>\r\n\r\n\r\n        </div>  {/* card-content  */}\r\n      </div> {/* card */}\r\n\r\n\r\n        <Divider/> \r\n\r\n</div>\r\n\r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Filters from './Filters'\r\nimport SimSchedule from './SimSchedule';\r\nimport Login from '../users/Login'\r\nimport logger from '../helpers/logger'\r\n\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n//import CashedIcon from '@material-ui/icons/Cashed';\r\n\r\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport QaListDlg from './QAListDlg'\r\nimport UserSettingsDlg from '../users/UserSettingsDlg'\r\nimport UserDataProvider from '../providers/UserDataProvider'\r\nimport './Header.css'\r\n\r\nimport config from '../config'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n      //flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: 2,\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  })); // classes\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})(props => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuItem = withStyles(theme => ({\r\n  root: {\r\n    // '&:focus': {\r\n    //   backgroundColor: theme.palette.primary.main,\r\n    //   '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n    //     color: theme.palette.common.white,\r\n    //   },\r\n    // },\r\n  },\r\n}))(MenuItem);\r\n\r\n\r\n  export default function Header(props){\r\n   \r\n    logger.log('Header()');\r\n\r\n    const classes = useStyles()\r\n\r\n    const {user, update_planlist, setUser, set_filter} = props;\r\n\r\n    //console.log('Header.js props.user===>', props.user);\r\n\r\n    const isLoggedIn = ()=>{\r\n      return (user && user.userid)?true:false;\r\n    };\r\n\r\n    /////////////////////////////\r\n    // filter dialog open/close\r\n    const [filterOpen, setFilterOpen] = useState(false);\r\n    const handleFilterOpen = ()=>{\r\n      setFilterOpen(true)\r\n    }\r\n    const handleFilterClose = (filter)=> {\r\n      \r\n      if(filter) // apply clicked\r\n      {\r\n        set_filter(filter)\r\n      }\r\n      \r\n      // close dialog\r\n      setFilterOpen(false)\r\n    }\r\n\r\n    const handleRefresh = ()=>{\r\n      // console.log('handleRefresh()')\r\n      update_planlist();\r\n    }\r\n\r\n    /////////////////////////////\r\n    // sim schedule dialog open/close\r\n    const [simScheduleOpen, setSimScheduleOpen] = useState(false);\r\n    const handleSimScheduleOpen = ()=>{\r\n      setSimScheduleOpen(true)\r\n    }\r\n    const handleSimScheduleClose = ()=> {\r\n      setSimScheduleOpen(false)\r\n    }\r\n\r\n\r\n    /////////////////////////////\r\n    // qaList dialog open/close\r\n    const [qaListDlgOpen, setQaListDlgOpen] = useState(false);\r\n    const handleQaListDlgOpen = ()=>{\r\n      setQaListDlgOpen(true)\r\n    }\r\n    const handleQaListDlgClose = ()=> {\r\n      setQaListDlgOpen(false)\r\n      handleMenuClose();\r\n    }\r\n\r\n    /////////////////////////////\r\n    // login dialog open/close\r\n    const [loginOpen, setLoginOpen] = useState(false);\r\n    const handleLoginOpen = ()=>{\r\n      setLoginOpen(true)\r\n    }\r\n    const handleLoginClose = ()=> {\r\n      setLoginOpen(false)\r\n    }\r\n\r\n    const handleLogout = ()=> {\r\n      console.log('Logout!')\r\n      setUser({});\r\n    }\r\n\r\n    /////////\r\n    // Menu\r\n    const [menuAnchorElement, setMenuAnchorElement] = React.useState(null);\r\n    const handleMenuClick = (e)=>{\r\n      setMenuAnchorElement(e.currentTarget);\r\n    }\r\n    const handleMenuClose = ()=>{\r\n      setMenuAnchorElement(null);\r\n    }\r\n\r\n\r\n    const handleAddCase = ()=> {\r\n      console.log('add a case');\r\n      props.onclick_addplan();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const handleSendListToMe = ()=> {\r\n      console.log('email list to me');\r\n      props.onclick_email_planq_list_to_me();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const handleOpenSimulationSchedule = ()=> {\r\n      handleSimScheduleOpen();\r\n      handleMenuClose();\r\n    }\r\n\r\n    const update_user_settings_to_db = (user)=>{ \r\n      console.log('updating user settings============>', user)\r\n      const dp = new UserDataProvider(user.token);\r\n      dp.updateUser({\r\n        userid: user.userid,\r\n        settings: user.settings\r\n      })\r\n      .then(data=>{\r\n        //console.log('User updated', data)\r\n      })\r\n      .catch(err=>{\r\n        console.error(err);\r\n        alert('Failed saving user settings.')\r\n        //alert(JSON.stringify(err))\r\n      })\r\n    }\r\n\r\n    const [openUserSettingsDlg, setOpenUserSettingsDlg] = useState(false);\r\n    const handleUserSettingsDlgClose = (settings)=>{\r\n\r\n      //console.log('handleUserSettingsDlgClose')\r\n      if(settings) // apply clicked\r\n      {\r\n        user.settings = {...user.settings, ...settings}\r\n        update_user_settings_to_db(user);\r\n        setUser(user)\r\n      }\r\n              \r\n      setOpenUserSettingsDlg(false);\r\n    }\r\n\r\n    // update the search keyword when the user changes\r\n    useEffect(()=>{\r\n      const searchKeyword_init = (user && user.settings && user.settings.planq_search_keyword)?user.settings.planq_search_keyword:\"\";\r\n      // consolo\r\n      setSearchKeyword(searchKeyword_init);\r\n    }, [user])\r\n\r\n     const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n     const handleSearch = ()=>{\r\n       \r\n      // save to user settings.\r\n      user.settings.planq_search_keyword = searchKeyword;\r\n      update_user_settings_to_db(user);\r\n      \r\n      setUser(user)\r\n      \r\n       console.log('handleSearch===============>')\r\n     }\r\n   \r\n\r\n    return (\r\n      \r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton \r\n              edge=\"start\" \r\n              className={classes.menuButton} \r\n              color=\"inherit\" \r\n              aria-label=\"menu\"\r\n              onClick={handleMenuClick}\r\n              disabled = {!isLoggedIn()}\r\n              >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            {/* Dropdown Menu */}\r\n            <StyledMenu\r\n              id=\"customized-menu\"\r\n              anchorEl={menuAnchorElement}\r\n              keepMounted\r\n              open={Boolean(menuAnchorElement)}\r\n              onClose={handleMenuClose}\r\n            >\r\n\r\n              {/* Add Case Menu */}\r\n              <StyledMenuItem onClick={handleAddCase}>\r\n                <ListItemIcon>\r\n                  <AddIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Add Case\" />\r\n              </StyledMenuItem>\r\n\r\n              <StyledMenuItem onClick={handleSendListToMe}>\r\n                <ListItemIcon>\r\n                  <SendIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Email List to Me\" />\r\n              </StyledMenuItem>\r\n\r\n              <StyledMenuItem onClick={handleOpenSimulationSchedule}>\r\n                <ListItemIcon>\r\n                  <DraftsIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Sim List\" />\r\n              </StyledMenuItem>\r\n              <SimSchedule\r\n                open = {simScheduleOpen}\r\n                handleClose = {handleSimScheduleClose}\r\n                addplan = {props.addplan}\r\n                user = {props.user}\r\n              />\r\n\r\n              {/* QA List Menu */}\r\n              <StyledMenuItem onClick={handleQaListDlgOpen}>\r\n                <ListItemIcon>\r\n                  <GpsFixedIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"QA List\" />\r\n              </StyledMenuItem>\r\n \r\n              {/* QA List Dlg */}\r\n              <QaListDlg\r\n                open = {qaListDlgOpen}\r\n                handleClose = {handleQaListDlgClose}\r\n                user = {user}\r\n              />\r\n\r\n            </StyledMenu>\r\n            \r\n\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              PlanQ - {config.site}\r\n            </Typography>\r\n\r\n            {/* Search */}\r\n            <div className='search-wriapper'>\r\n              <input \r\n                className='search-box'\r\n                placeholder='Search' \r\n                value={searchKeyword}\r\n                onChange={(e)=>{setSearchKeyword(e.target.value)}}\r\n                disabled = {!isLoggedIn()}\r\n                />\r\n              <Button\r\n                color=\"inherit\"\r\n                onClick = {handleSearch}\r\n                disabled = {!isLoggedIn()}\r\n              >\r\n                Update\r\n              </Button> \r\n             </div>\r\n\r\n            {/* Add Case Button */}\r\n            <Button\r\n              color=\"inherit\"\r\n              onClick = {handleAddCase}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<AddIcon/>}\r\n            >\r\n              Add\r\n            </Button>\r\n\r\n              {/* Sim List Button */}\r\n              <Button\r\n              color=\"inherit\"\r\n              onClick = {handleOpenSimulationSchedule}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<CachedIcon/>}\r\n            >\r\n              Sim\r\n            </Button>\r\n\r\n            {/* QA List Button */}\r\n            <Button\r\n              // id=\"button_refresh\"\r\n              color=\"inherit\"\r\n              onClick = {handleQaListDlgOpen}\r\n              disabled = {!isLoggedIn()}\r\n              // startIcon={<CachedIcon/>}\r\n            >\r\n              QA\r\n            </Button>\r\n\r\n            {/* Filter Dialog */}\r\n            <Button \r\n              id=\"button_filter\"\r\n              color=\"inherit\"\r\n              onClick = {handleFilterOpen}\r\n              disabled = {!isLoggedIn()}\r\n              //startIcon={<SettingsEthernetIcon />}\r\n              >\r\n                FILTERS\r\n              </Button>\r\n              <Filters\r\n                open = {filterOpen}\r\n                handleClose = {handleFilterClose}\r\n                set_filter = {props.set_filter}\r\n                filter = {props.filter}\r\n              />\r\n\r\n            {/* Refresh Button */}\r\n            <Button\r\n              // id=\"button_refresh\"\r\n              color=\"inherit\"\r\n              onClick = {handleRefresh}\r\n              disabled = {!isLoggedIn()}\r\n              // startIcon={<CachedIcon/>}\r\n            >\r\n              REFRESH              \r\n            </Button>\r\n            \r\n\r\n            {/* Login/Logout Dialog */}\r\n            { (isLoggedIn())?(\r\n              <div>\r\n\r\n                 {/* Open User Settings Button */}\r\n                 <Button \r\n                    color=\"inherit\"\r\n                    onClick = {()=>{\r\n                      setOpenUserSettingsDlg(true)\r\n                    }}\r\n                    >\r\n                      Settings\r\n                </Button>\r\n\r\n                {/* Settings Diglog */}\r\n                <UserSettingsDlg\r\n                  open={openUserSettingsDlg}\r\n                  handleClose = {handleUserSettingsDlgClose}\r\n                  user = {user}\r\n                />\r\n\r\n                {/* Logout Button */}\r\n                  <Button \r\n                    color=\"inherit\"\r\n                    onClick = {handleLogout}\r\n                    >\r\n                      LOGOUT[{props.user.userid}]\r\n                </Button>\r\n               \r\n              </div>):\r\n              (\r\n                <Button \r\n                  id=\"button_login\"\r\n                  color=\"inherit\"\r\n                  onClick = {handleLoginOpen}\r\n                  >\r\n                    LOGIN\r\n                </Button>)\r\n            }\r\n\r\n            <Login\r\n              loginOpen = {loginOpen}\r\n              handleLoginClose = {handleLoginClose}\r\n              user = {user}\r\n              setUser = {setUser}\r\n            />\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  } // function\r\n\r\n","import React, { Component } from 'react'\r\nimport { Paper, Typography } from '@material-ui/core'\r\n\r\nconst classes = {\r\n    root: {\r\n        margin: 0,\r\n        padding: 10,\r\n        textAlign: 'center'\r\n    }\r\n}\r\n\r\nexport class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <Paper style={classes.root}>\r\n                <Typography component=\"p\">\r\n                    Confidential. Version 1.0.0 (May 2020)\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport MuiExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport MuiExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport './AriaActivityItem.css';\r\n\r\n  const ExpansionPanel = withStyles({\r\n    root: {\r\n      border: '1px solid rgba(0, 0, 0, .125)',\r\n      boxShadow: 'none',\r\n      '&:not(:last-child)': {\r\n        borderBottom: 0,\r\n      },\r\n      '&:before': {\r\n        display: 'none',\r\n      },\r\n      '&$expanded': {\r\n        margin: 'auto',\r\n      },\r\n    },\r\n    expanded: {},\r\n  })(MuiExpansionPanel);\r\n  \r\n  const ExpansionPanelSummary = withStyles({\r\n    root: {\r\n      backgroundColor: 'rgba(0, 0, 0, .03)',\r\n      borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n      marginBottom: -1,\r\n      minHeight: 56,\r\n      '&$expanded': {\r\n        minHeight: 56,\r\n      },\r\n    },\r\n    content: {\r\n      '&$expanded': {\r\n        margin: '12px 0',\r\n      },\r\n    },\r\n    expanded: {},\r\n  })(MuiExpansionPanelSummary);\r\n  \r\n  const ExpansionPanelDetails = withStyles(theme => ({\r\n    root: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }))(MuiExpansionPanelDetails);\r\n\r\nexport default function AriaActivityItem(props)\r\n{\r\n    \r\n    const [expanded, setExpanded] = React.useState('');\r\n\r\n    const handleChange = panel => (event, newExpanded) => {\r\n      setExpanded(newExpanded ? panel : false);\r\n    };\r\n\r\n    const log = props.log;\r\n\r\n    ///////////\r\n    // createdAt\r\n    // const dt = new DT();\r\n    // const on = new Date(log.createdAt);\r\n    //const createdAtString = dt.MM_DD_YYYY(on)+' '+ dt.HH_MM_AMPM(on);\r\n\r\n    //////////////////////\r\n    // Msg List\r\n    const msg1 =  log.msg.trim();\r\n    const msg2 = msg1.substring(1, msg1.length-1);\r\n    const msgList = msg2.split(',');\r\n    \r\n    //////////////\r\n    // find whos\r\n    let whos = [];\r\n    msgList.forEach(msg => {\r\n      const elms1 = msg.split(' by ');\r\n      if(elms1.length===2)\r\n      {\r\n        const who = elms1[1].split(' ')[0];\r\n        whos.push(who);\r\n      }\r\n    });\r\n    const whos_unique_string = [...new Set(whos)].join('/'); \r\n\r\n    ///////////////////////\r\n    // find action times\r\n    let times = [];\r\n    msgList.forEach(msg => {\r\n       const elms1 = msg.split(' at ');\r\n       if(elms1.length===2)\r\n       {\r\n         const time = elms1[1].trim();\r\n         times.push(time);\r\n       }\r\n     });\r\n     const time_unique_string = [...new Set(times)].join('/'); \r\n\r\n\r\n    ////////////////////\r\n    // find new status\r\n    let new_status_list = [];\r\n    if(log.title.toLowerCase().includes('status changed'))\r\n    {\r\n      msgList.forEach(msg => {\r\n        const elms1 = msg.split('->');\r\n        if(elms1.length === 2)\r\n        {\r\n          const new_status = elms1[1].trim().split(' ')[0];\r\n          new_status_list.push(new_status);\r\n        } \r\n      });\r\n    }\r\n    const new_status_unique_string = [...new Set(new_status_list)].join('/'); \r\n\r\n    let title2 = \"\";\r\n    if(new_status_unique_string.length===0){\r\n      title2 = [whos_unique_string, time_unique_string].join(',');\r\n    }\r\n    else{\r\n      title2 = [].join(',');\r\n    }\r\n\r\n    return(\r\n      <ExpansionPanel square expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n      <ExpansionPanelSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\r\n        <ul className=\"log-heading\">\r\n          <li className=\"log-title\">{log.title}</li> \r\n          <li className=\"log-who\">{whos_unique_string}</li>\r\n          <li className=\"log-status\">{new_status_unique_string}</li>\r\n          <li className=\"log-time\">{time_unique_string}</li>\r\n        </ul>  \r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n          <ul>\r\n          {\r\n             msgList.map(str=>(<li key={uuidv4()}>{str}</li>))\r\n          }\r\n          </ul>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n    ); // return\r\n}","import config from '../config'\r\n\r\nexport default class LogDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/logs';\r\n        this.token = token;\r\n    }\r\n\r\n    getLogsOfObject(object_id){\r\n       \r\n        const url_query = `${this.url}/object_id/${object_id}?token=${this.token}`;\r\n        \r\n       // console.log('url_query',url_query);\r\n        return fetch(url_query);\r\n    }\r\n\r\n    addLogOfObject(object_id, msg) {\r\n            \r\n        const url_query = `${this.url}/object_id/${object_id}?token=${this.token}`;\r\n\r\n           return fetch(url_query, {\r\n             method: 'POST',\r\n             headers: {\r\n               'Content-Type': 'application/json'\r\n               // 'Content-Type': 'application/x-www-form-urlencoded',\r\n             },\r\n             body: msg\r\n           });\r\n         }\r\n\r\n\r\n} // class\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AriaActivityItem from './AriaActivityItem'\r\nimport LogDataProvider from '../providers/LogDataProvider'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport logger from '../helpers/logger'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n   list:{\r\n    width: '100%',\r\n    //maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n   }, \r\n   appBar: {\r\n    position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n      container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        backgroundColor: 'white'\r\n      },\r\n  })); // classes\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nexport default function AriaActivityList(props)\r\n{\r\n\r\n  const {open, handleClose} = props;\r\n\r\n  logger.log('AriaActivityList()')\r\n  const classes = useStyles()\r\n\r\n  const object_id = props.object_id;\r\n\r\n  ///////////////\r\n  // Log List\r\n  const [list, setList] = React.useState([]);\r\n    \r\n  const fetchList = () => {\r\n\r\n    logger.log('AriaActivityList()->fetchList()->props.user', props.user)\r\n    \r\n    const dp = new LogDataProvider(props.user.token);\r\n    dp.getLogsOfObject(props.object_id)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      setList(data);\r\n    })\r\n    .catch(err=>{\r\n      //alert('Failed fetching ARIA activity list. You may click the \"Refresh\" button of the brower & try again')\r\n      console.log('Failed fetching ARIA activity list', err)\r\n    })\r\n  } // fetchList\r\n\r\n  useEffect(() => {\r\n     fetchList();\r\n  }, [object_id, open]); // re-run only if object_id changes (this will not happen)\r\n\r\n  const handleRefresh = ()=>{\r\n    fetchList();\r\n  }\r\n\r\n    return(\r\n    <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n         <FormControl className={classes.formControl}>\r\n        <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Activities\r\n            </Typography>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleRefresh}>\r\n                refresh\r\n            </Button>\r\n\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n                close\r\n            </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </FormControl>\r\n\r\n        <div>\r\n        { \r\n            list.map(item=>(<AriaActivityItem key={item._id} log={item}/>))\r\n        }\r\n        </div>\r\n        \r\n    </Dialog>\r\n    ) // return\r\n} // function","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\nimport DT from '../helpers/datetime';\r\n\r\nconst classes = {\r\n    root:{\r\n        width: '100%',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n    },\r\n    LogTextField:{\r\n        width: '100%'\r\n    },\r\n    logToolbar: {\r\n        width: '100%',\r\n        borderWidth: 1,\r\n    },\r\n    listitem:{\r\n        margin:0,\r\n        padding:0,\r\n    }\r\n  };\r\n  \r\n\r\nexport class PlanLogList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n       \r\n        this.state = {input_text:\"\"}\r\n    }\r\n\r\n    change_handler = (e)=>{\r\n        this.setState({input_text: e.target.value});\r\n    }\r\n\r\n    keyup = (e)=>{\r\n        if(e.keyCode===13) // enter key\r\n        {\r\n            const msg = e.target.value;\r\n            this.props.addlog(this.props.planitem, msg);\r\n\r\n            // clear the target\r\n            this.setState({input_text:\"\"}); // clear input\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let dt = new DT();\r\n\r\n        return (\r\n            <div style={classes.root}>\r\n\r\n                        <TextField\r\n                            fullWidth={true}\r\n                            style={classes.LogTextField}\r\n                            label=\"Log\" \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.input_text}\r\n                            placeholder=\"Type your log & hit Enter key\"\r\n                            InputLabelProps={{shrink:true}}\r\n                            onChange = {this.change_handler}\r\n                            onKeyUp = {this.keyup}\r\n                            />\r\n\r\n\r\n            {/* Log List */}\r\n            <div style={classes.list}>\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    \r\n                    {\r\n                        this.props.planitem.plan.logs && this.props.planitem.plan.logs.map(log=>\r\n                        (<ListItem button style={classes.listitem} key={log.at}> \r\n                           <ListItemText primary={`[${dt.MM_DD(new Date(log.at))}] ${log.msg}`} /> \r\n                           <Button onClick={()=>{this.props.removelog(this.props.planitem, log)}}>X</Button>\r\n                        </ListItem>)\r\n                        )\r\n                    }\r\n\r\n                </List>\r\n            </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlanLogList\r\n","import config from '../config'\r\n\r\nexport default class PlanSetupDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/aria/plansetups';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllPlanSetupsPerPatientId(PatientId){\r\n       \r\n\r\n        const url_query = `${this.url}/PlanSetupsPerPatientIdAll/${PatientId}?token=${this.token}`;\r\n        \r\n        // console.log('url_query',url_query);\r\n        // console.log('PatientId=', PatientId);\r\n\r\n        return fetch(url_query,\r\n            {\r\n                method: 'GET', \r\n                //credentials: 'include'\r\n            });\r\n    }\r\n\r\n} // class\r\n","import React, {useEffect, useState, useCallback} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PlanSetupDataProvider from '../providers/PlanSetupDataProvider'\r\nimport './PlanSetupCheckboxSelector.css'\r\n\r\n\r\nexport default function PlanSetupCheckboxSelector(props){\r\n\r\n    const {open, handleClose, user, PatientId} = props;\r\n\r\n    const [list, setList] = useState([])\r\n\r\n    const [selected, setSelected] = useState({});\r\n    const handleSelectedChange = (event) => {\r\n          setSelected({...selected, [event.target.name]:event.target.checked})\r\n      };\r\n\r\n      const handleClickOk =()=>{\r\n        const checked_list = []\r\n        Object.keys(selected).forEach(key=>{\r\n          if(selected[key]) // if checked\r\n            checked_list.push(key)\r\n        })\r\n        handleClose(checked_list.join(','))\r\n      }\r\n\r\n      const handleClickCancel =()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    ////////////////////////\r\n    // is user logged in?\r\n    const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n        }\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect()');\r\n\r\n        fetchList(PatientId);\r\n\r\n    }, [PatientId, open]);\r\n\r\n\r\n    const fetchList = (PatientId)=>{\r\n\r\n        console.log('PlanSetupSelector - fetchList()')\r\n\r\n        if(!loggedIn())\r\n        {\r\n            console.log('fetchList -> User not logged in. Returing....')\r\n            return;\r\n        }\r\n\r\n        const dp = new PlanSetupDataProvider(props.user.token);\r\n        dp.getAllPlanSetupsPerPatientId(PatientId)\r\n        .then(res=>res.json())\r\n        .then(list=>{\r\n          setList(list)\r\n        })\r\n        .catch(err=>{\r\n          alert('Failed fetching plan list!')\r\n        })\r\n    }\r\n\r\n\r\n     return(\r\n        <Dialog\r\n          open={open}\r\n          className=\"plan-setup-selector-dlg\"\r\n        >\r\n        <DialogTitle className=\"plan-setup-selector-dlg-title\">Select Plan</DialogTitle>\r\n        { <DialogContent>\r\n\r\n            <FormControl component=\"fieldset\">\r\n            { \r\n                list.map(ps=>{ \r\n                    const label = ps.CourseId + '/'+ps.PlanSetupId;\r\n                    return (\r\n                    <FormControlLabel\r\n                        key={uuidv4()}\r\n                        control={\r\n                        <Checkbox\r\n                            checked={selected[label]}\r\n                            onChange={handleSelectedChange}\r\n                            name={label}\r\n                            color=\"primary\"\r\n                        />\r\n                        }\r\n                        label={label}\r\n                    />\r\n                    )\r\n                }) // map\r\n            }\r\n            \r\n\r\n\r\n            </FormControl>\r\n\r\n        </DialogContent>\r\n         }\r\n        <DialogActions>\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n          </Button>\r\n          <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        ) // return\r\n}","import React, {useEffect, useState, useCallback} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PlanSetupDataProvider from '../providers/PlanSetupDataProvider'\r\nimport './PlanSetupRadioButtonSelector.css'\r\n\r\nexport default function PlanSetupRadioButtonSelector(props){\r\n\r\n    const {open, handleClose, user, PatientId} = props;\r\n\r\n    const [list, setList] = useState([])\r\n\r\n    const [selected, setSelected] = useState({});\r\n    const handleSelectedChange = (event) => {\r\n          setSelected(event.target.value);\r\n      };\r\n\r\n      const handleClickOk =()=>{\r\n          handleClose(selected)\r\n      }\r\n\r\n      const handleClickCancel =()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    ////////////////////////\r\n    // is user logged in?\r\n    const loggedIn = () => {\r\n        return (user.userid)?(true):(false);\r\n        }\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect()');\r\n\r\n        fetchList(PatientId);\r\n\r\n    }, [PatientId, open]);\r\n\r\n\r\n    const fetchList = (PatientId)=>{\r\n\r\n        console.log('PlanSetupSelector - fetchList()')\r\n\r\n        if(!loggedIn())\r\n        {\r\n            console.log('fetchList -> User not logged in. Returing....')\r\n            return;\r\n        }\r\n\r\n        const dp = new PlanSetupDataProvider(props.user.token);\r\n        dp.getAllPlanSetupsPerPatientId(PatientId)\r\n        .then(res=>res.json())\r\n        .then(list=>{\r\n          setList(list)\r\n        })\r\n        .catch(err=>{\r\n          alert('Failed fetching plan list!')\r\n        })\r\n         \r\n   }\r\n\r\n    return(\r\n        <Dialog\r\n          open={open}\r\n          className=\"plan-setup-selector-dlg\"\r\n        >\r\n        <DialogTitle className=\"plan-setup-selector-dlg-title\">Select Plan</DialogTitle>\r\n        { <DialogContent>\r\n\r\n            <FormControl component=\"fieldset\">\r\n            {/* <FormLabel component=\"legend\">Gender</FormLabel> */}\r\n              <RadioGroup className=\"plansetupselector-radiogroup\" aria-label=\"plansetuplist\" name=\"plansetuplist\" value={selected} onChange={handleSelectedChange} >\r\n                  {\r\n                      list.map(ps=>{ \r\n                          const label = ps.CourseId + '/'+ps.PlanSetupId;\r\n                          return (<FormControlLabel key={uuidv4()} value={label} control={<Radio/>} label={label} />)\r\n                          }) // map\r\n                  }\r\n              </RadioGroup>\r\n\r\n            </FormControl>\r\n\r\n        </DialogContent>\r\n         }\r\n        <DialogActions>\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n          </Button>\r\n          <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        ) // return\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PlanSetupRadioButtonSelector from '../helpers/PlanSetupRadioButtonSelector'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\n\r\nimport './AddQADlg.css'\r\n\r\nexport default function AddQADlg(props){\r\n\r\n    const {open, handleClose, user, PatientId} = props;\r\n\r\n    ////////////\r\n    // qa type\r\n    const list = [\"PD\", \"MapCheck\", \"Film\"];\r\n    const [type, setType] = React.useState(list[0]);\r\n    const handleTypeChange = (event) => {\r\n        setType(event.target.value);\r\n      };\r\n\r\n    ///////////\r\n    // plan \r\n    const [plan, setPlan] = React.useState(\"\");\r\n    \r\n    /////////////////////////////\r\n    // plansetup selector dialog\r\n    const [openPlanSetupSelectorDlg, setOpenPlanSetupSelectorDlg] = useState(false);\r\n    const handlePlanSetupSelectorDlgClose = (planname)=>{\r\n        \r\n        console.log('handlePlanSetupSelectorDlgClose()', planname)\r\n\r\n        // set data (plan name) if Ok clicked\r\n        if(planname){\r\n            setPlan(planname);            \r\n        }\r\n\r\n        // close dlg\r\n        setOpenPlanSetupSelectorDlg(false);\r\n    }\r\n\r\n    ////////////////////\r\n    // Ok/Canel Buttons\r\n    const handleClickOk = ()=>{\r\n        \r\n        // check if a plan has been selected.\r\n        if(plan === \"\")\r\n        {\r\n            showMsg(\"Error\", \"Please select a QA plan\", true)\r\n            return;\r\n        }\r\n        \r\n        handleClose({\r\n            type: type,\r\n            plan: plan})\r\n    }\r\n    \r\n    const handleClickCancel = ()=>{\r\n        handleClose(null)\r\n    }\r\n\r\n    ///////////////\r\n    // msgbox\r\n    const [msgBox, setMsgBox] = useState({\r\n            open: false,\r\n            title: \"\",\r\n            msg: \"\",\r\n            error: false\r\n        })\r\n    const showMsg = (title, msg, error=false)=>{\r\n        setMsgBox({\r\n            open: true,\r\n            title: title,\r\n            msg: msg,\r\n            error: error\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <Dialog\r\n        open={open}\r\n        className = 'add-qa-dlg'\r\n      >\r\n        <DialogTitle className='add-qa-dlg-title'>New QA</DialogTitle>\r\n        <DialogContent>\r\n        <FormControl component=\"fieldset\">\r\n\r\n            {/* Type */}\r\n            <label className='qa-type-label'> QA Type:</label>\r\n            <RadioGroup \r\n                className='radiogroup-qa-type'\r\n                value={type} \r\n                onChange={handleTypeChange}>\r\n                {\r\n                    list.map(label=>(<FormControlLabel value={label} key={uuidv4()} control={<Radio />} label={label} />))\r\n                }\r\n            </RadioGroup>\r\n\r\n            {/* Plan Name */}\r\n            <label className='qa-plan-label'>QA Plan:</label>\r\n            <TextField\r\n                //id=\"textfield_plan_name\"\r\n                className=\"text-field-qa-plan-name\"\r\n                // label=\"Plan Name\"\r\n                value={plan}\r\n                InputLabelProps={{shrink:true}}\r\n                // onChange = {(e)=>{props.change_handler(props.planitem, 'plan_name', e.target.value)}}                       \r\n                onClick = {()=>{\r\n                    setOpenPlanSetupSelectorDlg(true);\r\n                }}\r\n                helperText=\"Click to select a QA plan\"\r\n            />\r\n            <PlanSetupRadioButtonSelector\r\n                open = {openPlanSetupSelectorDlg}\r\n                handleClose = {handlePlanSetupSelectorDlgClose}\r\n                user = {user}\r\n                PatientId = {PatientId}\r\n            />\r\n\r\n            </FormControl>\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n        <Button onClick={handleClickOk} color=\"primary\" autoFocus>\r\n            Ok\r\n        </Button>\r\n\r\n        <Button onClick={handleClickCancel} color=\"primary\">\r\n            Cancel\r\n        </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <SimpleDlg \r\n        open = {msgBox.open}\r\n        handleClose = {()=> setMsgBox({open:false, title:\"\", msg:\"\", error:false})}\r\n        title = {msgBox.title}\r\n        msg = {msgBox.msg}\r\n        buttons = 'Ok'\r\n        error = {msgBox.error}\r\n      />\r\n\r\n\r\n\r\n      </div>\r\n        ) // return\r\n}","import React, { useReducer, useEffect } from 'react';\r\nimport QaDataProvider from '../providers/QaDataProvider';\r\n\r\nconst QaDataContext = React.createContext();\r\n\r\nfunction qaReducer(qaItemList, action){\r\n\r\n  const {type, data, user} = action;\r\n\r\n  switch(type){\r\n    case 'set-list':\r\n      return data;  \r\n    case 'add-item':\r\n        console.log('add-item', data);\r\n\r\n        if(!user || !user.token)      return;\r\n\r\n        // add to db\r\n        const dp = new QaDataProvider(user.token);\r\n        dp.addQA(data)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n            let qaitem = {\r\n              qa: ret_data,\r\n              dirty: false\r\n            }\r\n\r\n            // console.log('qaItem', qaitem);\r\n\r\n            const ret = [...qaItemList, qaitem];\r\n\r\n            // console.log('qaReducer->add-item->qaItemList', qaItemList)\r\n            // console.log('qaReducer->add-item->ret', ret)\r\n            return ret;\r\n          })\r\n          .catch(err=>{\r\n            console.log(err)\r\n            //alert(JSON.stringify(err))\r\n          });\r\n\r\n        break;\r\n    default:\r\n  }\r\n}\r\n\r\n\r\nconst QaDataContextProvider = (props) => {\r\n  \r\n    const {user} = props;\r\n\r\n    const [qaList, qaListDispatch] = useReducer(qaReducer,[]);\r\n\r\n    const fetchList =(user)=>{\r\n  \r\n      if(!user || !user.token) return;\r\n\r\n      const dp = new QaDataProvider(user.token);\r\n        dp.getQAs()\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(ret_data => {\r\n              // console.log('QaDataContextProvider->fetchList->ret_data', ret_data);\r\n\r\n              const qaItemList = ret_data.map(qa=>{\r\n                return {\r\n                        qa:qa,\r\n                        dirty:false }\r\n              });\r\n\r\n              qaListDispatch({type:'set-list', data:qaItemList})\r\n          })\r\n          .catch(err=>{\r\n            console.log(err)\r\n            alert('Failed fetching QA list!')\r\n          });\r\n  \r\n    }\r\n        \r\n    useEffect(()=>{\r\n      fetchList(user);\r\n    },[user]); // useEffect\r\n    \r\n  \r\n    return (\r\n    <QaDataContext.Provider value={{qaList, qaListDispatch}}>\r\n      {props.children}\r\n    </QaDataContext.Provider>\r\n  );\r\n}\r\n\r\nexport {QaDataContext, QaDataContextProvider};","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport './SimpleInputWithSearchListDlg.css'\r\n\r\nexport default function SimpleInputWithSearchListDlg({open, handleClose, title, initialValue, searchList}) {\r\n\r\n    const [value, setValue] = useState(initialValue);\r\n    const [matchedList, setMatchedList] = React.useState([]);\r\n\r\n    const handleChange = (e)=>{\r\n        const value = e.target.value;\r\n        setValue(value);\r\n\r\n        //  find the matching result\r\n        const list = searchList.filter(item=>item.toLowerCase().includes(value.toLowerCase()));\r\n        setMatchedList(list);\r\n    }\r\n\r\n    const handleItemClick = (e)=>{\r\n        console.log('item clicked', e.target);\r\n        \r\n        const clicked_value = e.target.innerText;\r\n\r\n        setValue(clicked_value)\r\n    }\r\n   \r\n  return (\r\n      <Dialog\r\n        open={open}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n            {title}\r\n        </DialogTitle>\r\n        \r\n        <DialogContent>\r\n            \r\n            <div className=\"search-wrapper\">\r\n                <div className=\"search-input-wrapper\">\r\n                    <input\r\n                        className=\"search-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"matched-list\">\r\n                    {matchedList.map(item => (\r\n                     <div key={item} onClick={handleItemClick}>{item}</div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n        </DialogContent>\r\n        \r\n        <DialogActions>\r\n        <Button onClick={()=>{handleClose(value)}} color=\"primary\" autoFocus>\r\n            Ok\r\n          </Button>\r\n          <Button onClick={()=>{handleClose(null)}} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import config from '../config'\r\n\r\nexport default class EmailServiceProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url + '/email';\r\n        this.token = token;\r\n    }\r\n\r\n    send(email) {\r\n        console.log('sending an email', email);\r\n        return fetch(`${this.url}?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(email)\r\n        });\r\n      }\r\n\r\n    send_dailydigest()\r\n    {\r\n      //console.log('sending an email', email);\r\n      return fetch(`${this.url}/dailydigest?token=${this.token}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: JSON.stringify({})\r\n      });\r\n\r\n    }\r\n\r\n     \r\n\r\n\r\n      \r\n    \r\n} // class\r\n","import 'date-fns';\r\nimport React, {useState, useContext} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport DT from '../helpers/dt';\r\nimport AriaActivityList from './AriaActivityList'\r\nimport PlanNoteList from './PlanNoteList';\r\nimport SimpleDlg from '../helpers/SimpleDlg'\r\nimport PlanSetupCheckboxSelector from '../helpers/PlanSetupCheckboxSelector'\r\nimport AddQADlg from './AddQADlg'\r\nimport {QaDataContext} from '../data/QaDataContext' \r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './Plan.css';\r\nimport SimpleInputWithSearchListDlg from '../helpers/SimpleInputWithSearchListDlg'\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport EmailServiceProvider from '../providers/EmailServiceProvider';\r\n\r\nimport config from '../config'\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction initial_from_name(name)\r\n{\r\n    if(!name.includes('.'))\r\n        return name;\r\n\r\n    const elms = name.split('.');\r\n    const init = elms[0][0]+elms[1][0];\r\n    return init.toUpperCase();    \r\n}\r\n\r\n\r\nfunction initial_list_string_from_name_email_list_string(name_email_list_string)\r\n{\r\n    //console.log('name_email_list_string===>', name_email_list_string )\r\n    if(!name_email_list_string || name_email_list_string.trim()===\"\")\r\n        return \"\";\r\n\r\n    const name_email_list = name_email_list_string.split(',').filter(name_email=>name_email.trim()!==\"\");\r\n\r\n    // remove empty\r\n\r\n    const name_list = name_email_list.map(name_email=>name_email.split('|')[0])\r\n    return name_list.map(name=>initial_from_name(name)).join(',')\r\n}\r\n\r\nfunction remove_empty_string(string_list){\r\n    return string_list.filter(str=>str.trim() !== \"\")\r\n}\r\nconst useStyles = makeStyles( theme =>({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: 15,\r\n    },\r\n    expensionPanelSummary: {\r\n        backgroundColor: '#f1f1f1',\r\n        borderWidth:1,\r\n    },\r\n    PlanLogList:{\r\n        width: '100%',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        //maxWidth: 300,\r\n    }\r\n  }));\r\n  \r\nfunction email_plan(plan, user)\r\n{\r\n    console.log('email_plan====>', plan)\r\n\r\n    const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\r\n    const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\r\n\r\n    const newstart = (newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\";\r\n    const case_name = plan.case_name;\r\n    const status = plan.status;\r\n    const doctors = plan.doctors.split(',').map(d=>d.split('|')[0]).join('/');\r\n    const planners = plan.planners.split(',').map(p=>p.split('|')[0]).join('/');\r\n    const tx_site = plan.tx_site;\r\n    const modality = plan.modality;\r\n    const machine = plan.machine;\r\n    const note = plan.note\r\n    \r\n    const lines = [];\r\n    lines.push('Patient = ' + case_name)\r\n    lines.push('Start Date = ' + newstart)\r\n    lines.push('Status = ' + status)\r\n    lines.push('Doctors=' + doctors)\r\n    lines.push('Planners = ' +planners)\r\n    lines.push('Tx Site = ' + tx_site)\r\n    lines.push('Modality = ' + modality)\r\n    lines.push('Machine = ' + machine)\r\n    lines.push('Notes = ' + note)\r\n    \r\n    // const line = `${newstart}\\t${case_name}\\t${status}\\t${doctors}\\t${planners}\\t${tx_site}`\r\n    const msg = lines.join('\\n')\r\n\r\n    const mail = {\r\n        from: 'radonc.physics@stonybrookmedicine.edu', \r\n        to: user.email, // list of receivers\r\n        subject: case_name.split('-')[0], // Subject line\r\n        text: msg\r\n        //html: err\r\n    }\r\n\r\n    const esp = new EmailServiceProvider(user.token);\r\n    esp.send(mail);\r\n}\r\n\r\nexport default function Plan(props){\r\n\r\n    const classes = useStyles();\r\n\r\n    const {user, planitem} = props;\r\n\r\n    const {qaListDispatch} = useContext(QaDataContext);\r\n\r\n    /////////////////////////////\r\n    // local copy of the plan\r\n    const [plan, setPlan] = useState(planitem.plan);\r\n    const [dirty, setDirty] = useState(false);\r\n    const handlePlanChange = (e)=>{\r\n        setPlanProp(e.target.name, e.target.value);\r\n    }\r\n    const setPlanProp = (name, value)=>{\r\n        setPlan({...plan, [name]:value}) \r\n        setDirty(true);\r\n    }\r\n\r\n    //////////////////////\r\n    // expander state\r\n    const [expanded, setExpanded] = useState(false);\r\n    const toggleExpanded = () => {\r\n        setExpanded(!expanded)\r\n    }\r\n\r\n    ///////////////////////////\r\n    // ARIA Activities Dialog\r\n    const [ariaActivitiesOpen, setAriaActivitiesOpen] = useState(false);\r\n\r\n    /////////////////////////////\r\n    // auto log dialog open/close\r\n    const [deleteDlgOpen, setSimpleDlgOpen] = useState(false);\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // rough calculation - newstart - how many month away from now\r\n    // if more than 6 month, display as TBD in the line summary\r\n    const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\r\n    const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\r\n\r\n    /////////////////////////////\r\n    // plansetup selector dialog\r\n    const [openPlanSetupSelectorDlg, setOpenPlanSetupSelectorDlg] = useState(false);\r\n    const handlePlanSetupSelectorDlgClose = (result)=>{\r\n        // if okay clicked, set the result (plan name)\r\n        console.log('handlePlanSetupSelectorDlgClose.result=======', result)\r\n        if(result !== null ){\r\n            setPlanProp(\"plan_name\", result)\r\n        }\r\n        setOpenPlanSetupSelectorDlg(false);\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Add QA Dlg\r\n    const [openAddQADlg, setOpenAddQADlg] = useState(false);\r\n    const handleAddQADlgClose = (data) =>{\r\n        \r\n        if(data){ // clicked OK\r\n            const qa = {\r\n                id: uuidv4(),\r\n                type: data.type,\r\n                plan: data.plan,\r\n                result: \"\",\r\n                requested_by: `${user.name}|${user.email}|${user.userid}`,\r\n                requested_on: new Date(),\r\n                completed_by:\"\",\r\n                completed_on: null,\r\n                due_on: new Date(plan.newstart),\r\n                plan_case_name: plan.case_name,\r\n                plan_case_id: plan._id,\r\n                machine: plan.machine,\r\n                notes:\"\"\r\n            }\r\n            qaListDispatch({type:'add-item', data:qa, user:user})\r\n        }\r\n        \r\n        // close the dlg\r\n        setOpenAddQADlg(false);\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Tx Site Dlg\r\n    const [openTxSiteDlg, setOpenTxSiteDlg] = useState(false);\r\n    const handleTxSiteDlgClose = (data) =>{\r\n        \r\n        // console.log('handleTxSiteDlgClose.data', data)\r\n\r\n        if(data) // Yes clicked\r\n        {\r\n            // set the value\r\n            setPlanProp('tx_site', data)\r\n        }\r\n\r\n        setOpenTxSiteDlg(false);\r\n    }\r\n\r\n    ////////////////////////\r\n    // highlight if my plan\r\n    const doctorsClassName = (plan && plan.doctors && user && user.email && plan.doctors.toLowerCase().includes(user.email.toLowerCase()))? \"doctors highlight\" : \"doctors\"\r\n    const plannersClassName = (plan && plan.planners && user && user.email && plan.planners.toLowerCase().includes(user.email.toLowerCase()))? \"planners highlight\" : \"doctors\"\r\n    \r\n\r\n    const addlog =  (planitem, msg)=>{\r\n        props.addlog(planitem, msg);\r\n        setDirty(true)\r\n    }\r\n\r\n    const removelog = (planitem, log)=>{\r\n        props.removelog(planitem, log)\r\n        setDirty(true)\r\n    }\r\n\r\n\r\n    return (\r\n       <ExpansionPanel expanded={expanded} >\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls={plan._id+\"content\"}\r\n                id={plan._id+\"header\"}\r\n                className={classes.expensionPanelSummary}\r\n                onClick={toggleExpanded}\r\n            >\r\n                <ul className=\"heading\">\r\n                    <li className=\"newstart\">{(newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\"}</li>\r\n                    <li className=\"lastname\">{plan.case_name.split('-')[0]}</li>\r\n                    <li className=\"status\">{plan.status}</li>\r\n                    <li className= {doctorsClassName}>{initial_list_string_from_name_email_list_string(plan.doctors)}</li> \r\n                    <li className= {plannersClassName}>{initial_list_string_from_name_email_list_string(plan.planners)}</li>\r\n                    <li className=\"tx_site\">{plan.tx_site}</li>\r\n                    <li className=\"tx_modality\">{plan.modality}</li>\r\n                    <li className=\"tx_machine\">{plan.machine}</li>\r\n                    <li className=\"note\">{plan.note}</li>\r\n                </ul>                    \r\n\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n\r\n                <form className=\"plan-form\" noValidate>\r\n                    {/* Case Name */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-casename\"\r\n                        label=\"Case\"\r\n                        name=\"case_name\"\r\n                        value={plan.case_name}\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    {/* New Start */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        //id=\"textfield_new_start\"\r\n                        className=\"text-field-newstart\"\r\n                        type=\"datetime-local\"\r\n                        label=\"New Start\"\r\n                        name=\"newstart\"\r\n                        defaultValue={DT.YYYY_MM_DDTHH_MM(new Date(plan.newstart))} //\"2019-11-18T17:16\"\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    {/* Status */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        //id=\"select-plan-status\"\r\n                        className=\"text-field-plan-status\"\r\n                        select\r\n                        name=\"status\"\r\n                        label=\"Status\"\r\n                        value={plan.status}\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                        SelectProps={{native: true}}\r\n                        // helperText=\"Select Plan Status\"\r\n                        >\r\n                        <option key=\"status_not_selected\" value=\"\"></option>\r\n                        {\r\n                            (config && config.plan_status_list.map(status => (\r\n                            <option key={status} value={status}>\r\n                                {status}\r\n                            </option>\r\n                            )))\r\n                        }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n    \r\n                    {/* Plan Name */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-plan-name\"\r\n                        label=\"Plan Name\"\r\n                        value={plan.plan_name}\r\n                        InputLabelProps={{shrink:true}}\r\n                        onClick = {()=>{\r\n                            setOpenPlanSetupSelectorDlg(true);\r\n                        }}\r\n                    />\r\n                    </FormControl>\r\n                    <PlanSetupCheckboxSelector\r\n                        open = {openPlanSetupSelectorDlg}\r\n                        handleClose = {handlePlanSetupSelectorDlgClose}\r\n                        user = {user}\r\n                        PatientId = {plan.case_name.split('-')[1]}\r\n                    />\r\n\r\n                    {/* tx modality */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-tx-modality\"\r\n                        select\r\n                        label=\"Modality\"\r\n                        name=\"modality\"\r\n                        value={plan.modality}\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                        SelectProps={{native: true}}\r\n                        // helperText=\"Select modality\"\r\n                        >\r\n                        <option key=\"modality_not_selected\" value=\"\"></option>\r\n                        {\r\n                            (config && config.tx_modality_list.map(m => (\r\n                                <option key={m} value={m}>\r\n                                    {m}\r\n                                </option>\r\n                            )))\r\n                        }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n                    {/* Doctors */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"doctors-label\">Doctors</InputLabel>\r\n                    <Select\r\n                    labelId=\"doctors-label\"\r\n                    id=\"doctors-checkbox-list\"\r\n                    multiple\r\n                    value={plan.doctors.split(',')}\r\n                    onChange={(e)=>setPlanProp(\"doctors\", remove_empty_string(e.target.value).join(','))}\r\n                    input={<Input />}\r\n                    renderValue={(selected) => initial_list_string_from_name_email_list_string(selected.join(','))}\r\n                    MenuProps={MenuProps}\r\n                    >\r\n                    {config && config.doctor_list.map((name_email) => (\r\n                        <MenuItem key={name_email} value={name_email}>\r\n                            <Checkbox checked={plan.doctors.split(',').indexOf(name_email) > -1} />\r\n                            <ListItemText primary={name_email.split('|')[0]} />\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Select>\r\n                    </FormControl>\r\n\r\n                    {/* Planners */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"planners-label\">Planners</InputLabel>\r\n                    <Select\r\n                    labelId=\"planners-label\"\r\n                    id=\"planners-checkbox-list\"\r\n                    multiple\r\n                    value={plan.planners.split(',')}\r\n                    onChange={(e)=>setPlanProp(\"planners\", remove_empty_string(e.target.value).join(','))}\r\n                    input={<Input />}\r\n                    renderValue={(selected) => initial_list_string_from_name_email_list_string(selected.join(','))}\r\n                    MenuProps={MenuProps}\r\n                    >\r\n                    {config.planner_list.map((name_email) => (\r\n                        <MenuItem key={name_email} value={name_email}>\r\n                            <Checkbox checked={plan.planners.split(',').indexOf(name_email) > -1} />\r\n                            <ListItemText primary={name_email.split('|')[0]} />\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Select>\r\n                    </FormControl>\r\n\r\n                    {/* Tx Site */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-tx-site\"\r\n                        label=\"Tx Site\"\r\n                        name=\"tx_site\"\r\n                        value={plan.tx_site}\r\n                        onChange = {handlePlanChange}\r\n                        onClick = {()=>setOpenTxSiteDlg(true)}\r\n                        InputLabelProps={{shrink:true}}\r\n                        InputProps={{disabled:true}}\r\n                    />\r\n                    </FormControl>\r\n\r\n                    <SimpleInputWithSearchListDlg \r\n                        open = {openTxSiteDlg}\r\n                        handleClose = {handleTxSiteDlgClose}\r\n                        title=\"Treatment Site\"\r\n                        initialValue={plan.tx_site}\r\n                        searchList = {config.tx_site_list}\r\n                    />\r\n\r\n                    {/* Sim */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                        className=\"text-field-sim-date\"\r\n                        type=\"date\"\r\n                        label=\"Sim\"\r\n                        name=\"sim\"\r\n                        defaultValue={DT.YYYY_MM_DD(new Date(plan.sim.replace('Z','')))} //\"2019-11-18\"\r\n                        InputLabelProps={{shrink:true}}\r\n                        onChange = {handlePlanChange}\r\n                    />\r\n                    </FormControl>\r\n                        \r\n                    {/* machine */}\r\n                    <FormControl className={classes.formControl}>\r\n                    <TextField\r\n                    className=\"text-field-machine\"\r\n                    select\r\n                    name=\"machine\"\r\n                    label=\"Machine\"\r\n                    value={plan.machine}\r\n                    onChange = {handlePlanChange}\r\n                    InputLabelProps={{shrink:true}}\r\n                    SelectProps={{native: true}}\r\n                    >\r\n                    <option key=\"machine_not_selected\" value=\"\"></option>\r\n                    {\r\n                        (config && config.machine_list.map(machine => (\r\n                        <option key={machine} value={machine}>\r\n                            {machine}\r\n                        </option>\r\n                        )))\r\n                    }\r\n                    </TextField>\r\n                    </FormControl>\r\n\r\n\r\n                    {/* note */}\r\n                    <FormControl className={classes.formControl} fullWidth={true}>\r\n                    <TextField\r\n                        className=\"text-field-note\"\r\n                        label=\"Short Comment\"\r\n                        name=\"note\"\r\n                        value={(plan.note)?(plan.note):\"\"}\r\n                        fullWidth={true}\r\n                        variant = 'outlined'\r\n                        onChange = {handlePlanChange}\r\n                        InputLabelProps={{shrink:true}}\r\n                    />\r\n                    </FormControl>\r\n\r\n                </form>\r\n                \r\n                 <PlanNoteList \r\n                    className={classes.PlanLogList}\r\n                    planitem={props.planitem}\r\n                    addlog = {addlog}\r\n                    removelog = {removelog}\r\n                    />\r\n\r\n                </Grid>\r\n                </ExpansionPanelDetails>\r\n       \r\n        {/* Bottom Toolbar */}\r\n        <Divider />\r\n        <ExpansionPanelActions>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            disabled={!dirty}\r\n            onClick = {()=>{\r\n                props.saveplan_handler({plan:plan, dirty: false});\r\n                setDirty(false);\r\n                toggleExpanded();\r\n            }}\r\n            > \r\n            Save \r\n        </Button>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            onClick = {()=>{\r\n                props.duplicateplan_handler(props.planitem);\r\n\r\n                // close the expanded one\r\n                toggleExpanded();\r\n            }}\r\n            > \r\n            Duplicate\r\n        </Button>\r\n        <Button \r\n            size=\"small\" \r\n            color=\"primary\"\r\n            variant='outlined'\r\n            onClick = {()=>{\r\n                setSimpleDlgOpen(true);\r\n            }}\r\n            > \r\n            Delete \r\n        </Button>\r\n        <SimpleDlg id=\"delete_dialog\"\r\n            open = {deleteDlgOpen}\r\n            title = \"Are you sure?\"\r\n            buttons = 'Yes|No'\r\n            handleClose = {(btnPressed)=>{\r\n                if(btnPressed==='Yes')\r\n                    props.deleteplan_handler(props.planitem)\r\n                setSimpleDlgOpen(false);\r\n            }}\r\n        />\r\n\r\n            {/* Add QA */}\r\n            <Button \r\n              id=\"button_add_qa\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>{setOpenAddQADlg(true)}}\r\n              >\r\n                Add QA\r\n              </Button>\r\n\r\n              <AddQADlg\r\n                open = {openAddQADlg}\r\n                handleClose = {handleAddQADlgClose}\r\n                user = {user}\r\n                PatientId = {plan.case_name.split('-')[1]}\r\n              />\r\n\r\n            {/* Email Group */}\r\n            <Button \r\n              id=\"button_email_group\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>{email_plan(plan, user)}}\r\n              >\r\n                Email Me\r\n              </Button>\r\n             \r\n\r\n            {/* Logs Dialog Box */}\r\n            <Button \r\n              id=\"button_view_auto_activities\"\r\n              size=\"small\" \r\n              color=\"primary\"\r\n              variant='outlined'\r\n              onClick = {()=>setAriaActivitiesOpen(true)}\r\n              >\r\n                Activities\r\n              </Button>\r\n\r\n              <AriaActivityList\r\n                open = {ariaActivitiesOpen}\r\n                handleClose = {()=>setAriaActivitiesOpen(false)}\r\n                object_id = {plan.case_name.split('-')[1]}\r\n                user = {props.user}\r\n              />\r\n\r\n        </ExpansionPanelActions>\r\n\r\n        </ExpansionPanel>\r\n        )\r\n    }\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Paper} from '@material-ui/core';\r\nimport Plan from './Plan';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './PlanList.css'\r\n\r\nexport default function PlanList(props){\r\n        const{ pagenation, setPage} = props;\r\n        const {page, totalCount, itemsPerPage} = pagenation;\r\n        \r\n        const numOfPages = (totalCount%itemsPerPage>0) ? Math.floor(totalCount/itemsPerPage)+1:Math.floor(totalCount/itemsPerPage);\r\n\r\n        const handlePageChange = (event, page) => {\r\n            setPage(page);\r\n          };\r\n\r\n        return (\r\n            <Paper className='planlist-wrapper'>\r\n                <div className=\"planlist\">\r\n                { \r\n                    props.planitems.map(pi=>\r\n                        <Plan \r\n                            key={pi.plan._id} \r\n                            planitem={pi} \r\n                            date_change_handler={props.date_change_handler} \r\n                            deleteplan_handler={props.deleteplan_handler}\r\n                            saveplan_handler={props.saveplan_handler}\r\n                            duplicateplan_handler={props.duplicateplan_handler}\r\n                            addlog = {props.addlog}\r\n                            removelog = {props.removelog}\r\n                            user = {props.user}\r\n                            set_planitems_state = {props.set_planitems_state}\r\n                        />)\r\n                } \r\n                </div>\r\n                <div className=\"planlist-pagenation\">\r\n                        {/* <Pagination count={numOfPages} page={page} onChange={handleChange} /> */}\r\n                        <Pagination count={numOfPages} page={page} onChange={handlePageChange} />\r\n                        <div className='total-count'>N={totalCount}</div>\r\n                </div>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n\r\n\r\n","import config from '../config'\r\n\r\nexport default class PlanDataProvider{\r\n\r\n    constructor(token) {\r\n        this.url = config.webservice_url +  '/plans';\r\n        this.token = token;\r\n    }\r\n\r\n    getAllPlans(){\r\n        return fetch(this.url+`?token=${this.token}`);\r\n    }\r\n\r\n    getAllPlans_newstart_gt(t0){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}?token=${this.token}`;\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt(t0, t1){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_skip_limit(t0, t1, skip, limit){\r\n      \r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_keyword_skip_limit(t0, t1, keyword, skip, limit){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      keyword = encodeURIComponent(keyword)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n      \r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/keyword/${keyword.trim().toLowerCase()}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_machines_skip_limit(t0, t1, machines, skip, limit){\r\n      \r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      machines = encodeURIComponent(machines)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n\r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n    getAllPlans_newstart_gt_lt_keyword_machines_skip_limit(t0, t1, keyword, machines, skip, limit){\r\n\r\n      // encode the inputs\r\n      t0=encodeURIComponent(t0);\r\n      t1=encodeURIComponent(t1);\r\n      keyword = encodeURIComponent(keyword)\r\n      machines = encodeURIComponent(machines)\r\n      skip=encodeURIComponent(skip);\r\n      limit=encodeURIComponent(limit)\r\n      \r\n      const url_query = `${this.url}/newstart/gt/${t0}/lt/${t1}/keyword/${keyword.trim().toLowerCase()}/machines/${machines}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n\r\n    getAllPlans_keyword_skip_limit(keyword, skip, limit){\r\n\r\n        // encode the inputs\r\n        keyword = encodeURIComponent(keyword)\r\n        skip=encodeURIComponent(skip);\r\n        limit=encodeURIComponent(limit)\r\n\r\n            \r\n      const url_query = `${this.url}/keyword/${keyword.trim().toLowerCase()}/skip/${skip}/limit/${limit}?token=${this.token}`;\r\n     // console.log('url_query',url_query);\r\n      return fetch(url_query);\r\n    }\r\n\r\n\r\n    addPlan(plan) {\r\n\r\n        // update the keywords string field\r\n        plan.keywords = \"\";\r\n        plan.keywords = Object.values(plan)\r\n                           .filter(f => typeof(f) === 'string')\r\n                           .filter(item=>item.length>0)\r\n                           .filter(item=>item.length !== '2019-11-12T00:00:00.000Z'.length)\r\n                           .join('|')\r\n                           .toLowerCase()\r\n\r\n        return fetch(this.url+`?token=${this.token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(plan)\r\n        });\r\n      }\r\n\r\n      updatePlan(plan) {\r\n     //   console.log('updating a plan', plan);\r\n        const plan_url = this.url+'/'+plan._id;\r\n        const url = plan_url +`?token=${this.token}`;\r\n        // console.log('url==>', url);\r\n\r\n        // update the keywords string field\r\n        plan.keywords = \"\";\r\n        plan.keywords = Object.values(plan)\r\n          .filter(f => typeof(f) === 'string')\r\n          .filter(item=>item.length>0)\r\n          .filter(item=>item.length !== '2019-11-12T00:00:00.000Z'.length)\r\n          .join('|')\r\n          .toLowerCase()\r\n\r\n        return fetch(url, {\r\n          method: 'PATCH',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: JSON.stringify(plan)\r\n        });\r\n      }\r\n\r\n\r\n      deletePlan(plan) {\r\n    //    console.log('deleting a plan', plan);\r\n        const plan_url = this.url+'/'+plan._id;\r\n    //    console.log('plan url', plan_url);\r\n        return fetch(plan_url+`?token=${this.token}`, {\r\n          method: 'DELETE',\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          }\r\n          //body: JSON.stringify(plan)\r\n        });\r\n      }\r\n    \r\n} // class\r\n","import React from 'react';\nimport './App.css';\nimport {Header,Footer} from './comp'\nimport PlanList from './comp/PlanList'\nimport PlanDataProvider from './providers/PlanDataProvider';\nimport EmailServiceProvider from './providers/EmailServiceProvider';\nimport DT from  './helpers/dt';\nimport logger from './helpers/logger'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {QaDataContextProvider} from './data/QaDataContext'\nimport EnumDataProvider from './providers/EnumDataProvider'\nimport SimpleDlg from './helpers/SimpleDlg'\nimport config from './config'\n\nfunction same_array(list1, list2){\n\n  if(list1.length !== list2.length)\n    return false;\n\n  const str1 = list1.map(i=>i.trim()).sort().join('')\n  const str2 = list2.map(i=>i.trim()).sort().join('')\n  \n  return (str1 === str2)\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // set the browser window title\n    document.querySelector('title').innerHTML = 'PlanQ - ' + config.site;\n\n    // initial state\n    this.state = { \n      planitems: [],\n      user:{},\n      showProgress:false,\n      msgBox: {\n        open: false,\n        title: \"\",\n        msg: \"\",\n        error: false\n      }\n    };\n\n    this.pagenation = {\n      itemsPerPage:10,\n      page:1,\n      totalCount:0\n    }\n\n    const dt = new Date();\n    const dt_plus2year = new Date(dt.getFullYear()+2, dt.getMonth(), dt.getDate());\n    this.filter = {\n      newstart_from: dt,\n      newstart_to:  dt_plus2year,\n      keyword: \"\"\n    }\n    \n  }  \n\n  ///////////////////////////\n  // i\n  componentDidMount( )\n  {\n    logger.log('App-->componentDidMount()')\n    this.update_planlist()\n  }\n\n  showMsg = (title, msg, error=false)=>{\n    this.setState({msgBox:{\n      open: true,\n      title: title,\n      msg, msg,\n      error: error\n    }})\n  }\n\n setPage = (page)=> {\n\n    if(page === this.pagenation.page)\n      return;\n\n    this.pagenation.page = page;\n\n    this.update_planlist();\n\n  }\n\n  update_planlist_internal = (dataFetchFunction)=>\n  {\n    const user = this.state.user;\n\n    //console.log('update_planlist_internal.user', user)  \n\n    logger.log('App-->update_planlist()')\n    \n    // if not logged in, just return\n    if(!user || !user.token)\n    {\n      console.log('update_planlist=>user not logged in yet')\n      \n      this.setState({planitems:[]})\n      \n      return;\n    }\n\n    /// show progress bar\n    this.setState({showProgress:true});\n\n    // see if user seeting has the number of cases per page\n    if(user.settings && user.settings.planq_num_of_cases_per_page)\n      {\n        this.pagenation.itemsPerPage = user.settings.planq_num_of_cases_per_page;\n      }\n\n      \n    // get enum list\n    const dp = new EnumDataProvider(this.state.user.token);\n    dp.getEnums()\n    .then(res=>{\n      return res.json()\n    })\n    .then(data=>{\n\n      this.enumList = data;\n      this.enumList.tx_site_list.sort();\n\n      // fetch planning cases\n      dataFetchFunction()\n      .then(res=>{\n        return res.json();\n      })\n      .then(data => {\n\n          this.pagenation.totalCount = data.totalCount;\n\n          // add dirty flag\n          const planitems = data.list.map(p => {\n            return {plan: p, dirty: false}\n          });\n\n          this.setState({\n            planitems: planitems,\n            showProgress:false\n          }\n\n        );\n      })\n      .catch(err => {\n        console.error('getAllPlans failed',err)\n        this.showMsg(\"Error\", 'Failed getting planning data. Please contact the administrator.', true)\n      });\n      \n    })\n    .catch(err=>{\n      console.error()\n      this.showMsg(\"Error\", 'Failed getting the enumeration data. Please contact the administrator.', true)\n    })\n    \n  }//update_planlist_internal\n\n  update_planlist = ()=>{\n\n    console.log('update_planlist================>')\n    const user = this.state.user;\n\n    if(!user || !user.token)\n    {\n      console.log('update_planlist=>user not logged in yet')\n      \n      this.setState({planitems:[]})\n      \n      return;\n    }\n\n    ///////////\n    let useMachinesFilter = false;\n    if(this.enumList) // enum list available, then if the users' machine setting is different from the machine list, use machine filter\n    {\n      // console.log('enumList.machine_list', this.enumList.machine_list)\n      if(user.settings && user.settings.my_machines &&  !same_array(user.settings.my_machines.split(','), this.enumList.machine_list)) \n        useMachinesFilter = true;\n    }\n    else // enumList is not available yet, then useMachine filter if the user has machine filter settings\n    {\n      if(user.settings && user.settings.my_machines) \n        useMachinesFilter = true;\n    }\n\n    /////////////\n    let searchKeyword = (user.settings && user.settings.planq_search_keyword && user.settings.planq_search_keyword.trim() !== \"\")?user.settings.planq_search_keyword.trim():\"\";\n  \n\n    if(searchKeyword === \"\" && !useMachinesFilter)\n    {\n      const dataFetchFunction = ()=>{\n\n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_skip_limit(\n          newstart_from, \n          newstart_to, \n          skip, \n          limit)\n      }\n\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword === \"\" && useMachinesFilter)\n    {\n      const dataFetchFunction = ()=>{\n\n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const machines = user.settings.my_machines;\n\n        \n        // console.log('machines===>', machines)\n\n\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_machines_skip_limit(\n          newstart_from, \n          newstart_to,\n          machines,\n          skip, \n          limit)\n      }\n\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword !== \"\" && !useMachinesFilter){ // there is keyword, but no macine filter\n      \n\n      const dataFetchFunction = ()=>{\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        console.log('keyword===>', searchKeyword)\n\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_keyword_skip_limit(\n          newstart_from, \n          newstart_to, \n          searchKeyword,\n          skip, \n          limit)\n      }\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else if(searchKeyword !== \"\" && useMachinesFilter){ // keyword & machine filter \n\n      const dataFetchFunction = ()=>{\n        const {page, itemsPerPage} = this.pagenation;\n        const skip = (page-1)*itemsPerPage;\n        const limit = itemsPerPage;\n        \n        const newstart_from = DT.YYYY_MM_DD(this.filter.newstart_from)\n        const newstart_to = DT.YYYY_MM_DD(this.filter.newstart_to)\n\n        const machines = user.settings.my_machines;\n        console.log('keyword===>', searchKeyword)\n        console.log('machines===>', machines)\n\n        const dp = new PlanDataProvider(this.state.user.token);\n        return dp.getAllPlans_newstart_gt_lt_keyword_machines_skip_limit(\n          newstart_from, \n          newstart_to, \n          searchKeyword,\n          machines,\n          skip, \n          limit)\n      }\n      this.update_planlist_internal(dataFetchFunction)\n    }\n    else{\n        console.log('Code should not reach this code block!!!')\n    }\n    \n  }\n\n  //////////////////////////\n  // click Add Plan button\n  onclick_addplan = ()=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_addplan=> User not Logged In')\n      return;\n    }\n    const d = new Date();\n    \n    const plan =  {\n        case_name: \"NA\",\n        sim: d,\n        status: \"\",\n        newstart: d,\n        plan_name: \"\",\n        planners: \"\",\n        doctors: \"\",\n        tx_site: \"\",\n        note: \"\",\n        logs: []\n     };\n\n     this.addplan(plan)\n  }\n\n  addplan = (plan)=>{\n    \n    if(!this.state.user || !this.state.user.userid)\n    {\n      console.log('onclick_addplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.addPlan(plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n\n      let planitem = {\n        plan: ret_data,\n        dirty: false\n      }\n\n      this.state.planitems.unshift(planitem);\n    \n     // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n        return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n\n      this.setState({planitems: this.state.planitems});\n    });\n  }\n\n  \n  //////////////////////////\n  // click Email List to Me button\n  onclick_email_planq_list_to_me = ()=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_email_planq_list_to_me=> User not Logged In')\n      return;\n    }\n\n    // make this of the case\n    const lines = []\n    this.state.planitems.forEach(pi=>{\n      const plan = pi.plan;\n\n      const newstart_diff_ms = Date.parse(plan.newstart) - (new Date());\n      const newstart_diff_month = newstart_diff_ms/1000/60/60/24/30;\n\n      const newstart = (newstart_diff_month<6)?DT.MM_DD_DAY(new Date(plan.newstart)):\"TBD\";\n      const case_name = plan.case_name;\n      const status = plan.status;\n      const doctors = plan.doctors.split(',').map(d=>d.split('|')[0]).join('/')\n      const planners = plan.planners.split(',').map(d=>d.split('|')[0]).join('/')\n      const tx_site = plan.tx_site;\n      //const tx_modality = plan.tx_modality;\n      //const tx_machine = plan.tx_machine;\n      //const note = plan.note\n      \n      const line = `${newstart}\\t${case_name}\\t${status}\\t${doctors}\\t${planners}\\t${tx_site}`\n\n      lines.push(line);\n\n    }) // forEach\n\n    const mail = {\n      from: 'radonc.physics@stonybrookmedicine.edu', \n      to: this.state.user.email, // list of receivers\n      subject: \"PlanQ List\", // Subject line\n      text: lines.join('\\n')\n      //html: err\n    }\n\n    const esp = new EmailServiceProvider(this.state.user.token);\n    esp.send(mail);\n  }\n\n  \n  /////////////////\n  // delete plan\n  onclick_deleteplan = (planitem)=>{\n\n    if(!this.state.user.userid)\n    {\n      console.log('onclick_deleteplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.deletePlan(planitem.plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n      \n      // remove the plan from the list & set the state\n      let new_planitems = this.state.planitems.filter(pi => pi.plan._id !== planitem.plan._id);\n\n      this.setState({planitems: new_planitems});\n    });\n  }\n\n  /////////////////\n  // save plan\n  onclick_saveplan = (planitem)=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_saveplan=> User not Logged In')\n      return;\n    }\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    \n    // // if array flatten out to a string \n    // if(Array.isArray(planitem.doctors))\n    //   planitem.doctors = planitem.doctors.join(\"/\");\n\n    console.log('planitem.plan=', planitem.plan)\n\n    dp.updatePlan(planitem.plan)\n    .then(res=>{\n      return res.json()\n    })\n    .then(data=>{\n      // success \n      // set the dirty flag to OFF  \n      // this.state.planitems.forEach(pi => {\n      //   if(pi.plan._id === planitem.plan._id)\n      //   {\n      //     pi.dirty = false;\n      //   }\n      // });\n      planitem.dirty = false;\n\n      // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n        return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n      \n      this.setState({planitems: this.state.planitems});\n    })\n    .catch(err=>{\n      console.log(err);\n    })\n\n  }\n\n  onclick_duplicateplan = (planitem)=>{\n    \n    if(!this.state.user.userid)\n    {\n      console.log('onclick_duplicateplan=> User not Logged In')\n      return;\n    }\n\n    //console.log('duplicate plan');\n    const plan =  {\n      case_name: planitem.plan.case_name,\n      sim: planitem.plan.sim,\n      status: \"\",\n      newstart: planitem.plan.newstart,\n      plan_name: planitem.plan.plan_name,\n      planners: planitem.plan.planners,\n      doctors: planitem.plan.doctors,\n      tx_site: planitem.plan.tx_site,\n      machine: planitem.plan.machine,\n      modality: planitem.plan.modality,\n      note: planitem.plan.note,\n      logs: planitem.plan.logs\n   };\n\n    // data provider\n    const dp = new PlanDataProvider(this.state.user.token);\n    dp.addPlan(plan)\n    .then(res => {\n      return res.json();\n    }).then(ret_data => {\n\n      let planitem = {\n        plan: ret_data,\n        dirty: false\n      }\n\n      this.state.planitems.unshift(planitem);\n\n      // sort by newstart date\n      this.state.planitems.sort((pi1, pi2)=>{\n       return((new Date(pi1.plan.newstart) > new Date(pi2.plan.newstart))?(1):(-1));\n      })\n\n      this.setState({planitems: this.state.planitems});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  } // onclick_duplicateplan\n\n\n  // change_handler = (planitem,key, value)=>{\n    \n  //   //console.log('change handler')\n\n  //    //const value = e.target.value;\n\n  //    // set the new value to the plan\n  //    this.state.planitems.forEach(pi => {\n  //     if(pi.plan._id === planitem.plan._id)\n  //     {\n  //       if(key === 'newstart')\n  //       {\n  //         pi.plan[key] = new Date(value); // set new value\n  //       }\n  //       else\n  //       {\n  //         pi.plan[key] = value; // set new value\n  //       }\n  //       pi.dirty = true; // set dirty flag\n  //     }\n  //   });\n\n  //   // set state\n  //   this.setState({planitems: this.state.planitems});\n  // } // change_handler\n  \n\n  addlog = (planitem, msg)=>\n  {\n    logger.log('addlog()')\n    if(!this.state.user.userid)\n    {\n      console.log('addlog=> User not Logged In')\n      return;\n    }\n\n    const log = {\n      msg: msg,\n      by: \"\",\n      at: new Date()\n    }\n\n    // add at the front\n    planitem.plan.logs.unshift(log);\n\n    // // set dirty flag\n    // planitem.dirty = true;\n    \n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  removelog = (planitem, log)=>\n  {\n    logger.log('removelog()')\n\n    if(!this.state.user.userid)\n    {\n      console.log('removelog=> User not Logged In')\n      return;\n    }\n\n    // remove\n    planitem.plan.logs = planitem.plan.logs.filter(l=> l.at !== log.at );\n\n    // // set dirty flag\n    // planitem.dirty = true;\n     \n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  set_filter = (filter)=>{\n\n    if(!filter)\n      return;\n    \n    this.filter = filter;\n    \n    console.log('set_filter=>',filter)\n\n    this.pagenation.page=1;\n\n    this.update_planlist()\n  }\n\n  setUser = (user)=>{\n    console.log('setUser()')\n    \n    if(user && user.token)  // login\n    {\n      this.setState({user: user})\n      this.setPage(1); // reset page\n      this.update_planlist()\n    }\n    else // logout\n    {\n      this.setState({\n        user: {},\n        planitems:[]\n      })\n\n    }\n  }\n  \n  ///////////////////////////////////\n  // helper function to set the state\n  // triggering the PlanList to update\n  set_planitems_state = () =>{\n    // set state\n    this.setState({planitems: this.state.planitems});\n  }\n\n  render() {\n\n    return (\n    \n    <React.Fragment>\n      <QaDataContextProvider user={this.state.user}>\n        <Header \n          onclick_addplan={this.onclick_addplan} \n          onclick_email_planq_list_to_me={this.onclick_email_planq_list_to_me}\n          set_filter ={this.set_filter}\n          addplan = {this.addplan}\n          user = {this.state.user}\n          setUser = {this.setUser}\n          update_planlist = {this.update_planlist}\n          filter = {this.filter}\n        />\n        \n        {/* Progress Bar */}\n        { this.state.showProgress && (<LinearProgress color=\"secondary\"/>) }\n\n        { (this.state.user && this.state.user.userid)?\n        (<PlanList \n            planitems={this.state.planitems}\n            date_change_handler={this.date_change_handler}\n            deleteplan_handler = {this.onclick_deleteplan}\n            saveplan_handler = {this.onclick_saveplan}\n            duplicateplan_handler = {this.onclick_duplicateplan}\n            addlog = {this.addlog}\n            removelog = {this.removelog}\n            user = {this.state.user}\n            set_planitems_state = {this.set_planitems_state}\n            pagenation={this.pagenation}\n            setPage = {this.setPage}\n            />):(\n              <h3 className=\"please-login\">Please login (use your computer login id/pw)</h3>\n            )\n        }\n        <Footer/>\n      </QaDataContextProvider>\n      <SimpleDlg \n        open = {this.state.msgBox.open}\n        handleClose = {()=>this.setState({msgBox:{open:false, title:\"\", msg:\"\", error:false}})}\n        title = {this.state.msgBox.title}\n        msg = {this.state.msgBox.msg}\n        buttons = 'Ok'\n        error = {this.state.msgBox.error}\n      />\n    </React.Fragment>\n    \n  );}\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}